'\"ntro       To get a copy of the front matter (intro, table of contents,
'\"	  index), on your terminal, type:
'\"              nroff [ intro ] [ tocin ] [ ptxin ]
'\"	  To typeset a copy via GCAT, use:
'\"		 troff [ -rs1 ] -g [ intro ] [ tocin ] [ ptxin ] | gcat
'\"	  ("-rs1" forces small -- 6x9 inches -- format).
'\"	  If typesetter is on-line, omit the "-g" and the "| gcat".
.so /usr/lib/tmac/tmac.m
.ds 5) \s-1UNIX System V\s+1
.de PP
.if n .sp
.if t .sp .5v
.ne 1.1v
..
.hw print-out photo-type-setter
.tr ~
.hy 0
.if t \{.ds ` ``
.	 ds ' ''
.	 ds d \-
'	 br \}
.if n \{.ds ` ""
.	 ds ' ""
.	 ds d " -- \"
.	 na
.	 rm ad \}
.ft
.hy 14
.ta .5i 1i 1.5i 2i 2.5i 3i 3.5i 4i 4.5i 5i 5.5i 6i 6.5i
.if \n()t \{.pl 10i
.	     ll 6.5i
.	     lt 6.5i
.	     po 1.40i
.	     ps 10
.	     vs 12 \}
.if n \{.pl 11i
.	 ll 6.5i
.	 lt 6.5i
.	 po .463i \}
.PH ''''
.PF ''''
.sp 4
.tl ''' December 1983'
.sp 10
.ce 1
.B "UNIX System V"
.sp 2
.ce 1
.B "USER'S MANUAL"
.sp 5
The information in this document has been carefully checked
and is believed to be entirely reliable.  However, no
responsibility is assumed for inaccuracies.  Furthermore,
Motorola reserves the right to make changes to any products
herein to improve reliability, function, or design.  Motorola
does not assume any liability arising out of the application
or use of any product or circuit described herein; neither does it
convey any license under its patent rights or the rights of others.
.sp 5
EXORmacs and EXORterm are trademarks of Motorola Inc.
UNIX is a trademark of Bell Laboratories, Incorporated.
PDP, VAX, DEC, UNIBUS, MASSBUSS, and SBI are trademarks of
Digital Equipment Corporation.  PRINTRONIX is a trademark of
Printronix, Inc.  CENTRONICS is a trademark of Data Computer
Corporation.
.sp 5
.ce 1
First Edition
.sp
.ce 1
Copyright 1983 by Motorola Inc.
.sp
.ce 1
Portions of this document are reprinted
.br
.ce 1
from copyrighted documents by permission of
.br
.ce 1
Western Electric Company, Incorporated, 1983.
.in -\n(}Iu
.ll +\n(}Iu
.bp
.hy 14
.ta .5i 1i 1.5i 2i 2.5i 3i 3.5i 4i 4.5i 5i 5.5i 6i 6.5i
.PH ''''
.PF ''\\\\nP''
.af P i
.nr P 1
.sp 6
.ce
\f3INTRODUCTION\f1
.sp 1
.H 1 GENERAL
.P
This manual describes the commands, facilities, and
features of \*(5) for the EXORmacs Development System.
It provides neither a general
overview of \*(5)
nor details of the implementation of the system.
For a general overview of the UNIX system, refer to the
Bell System Technical Journal, July-August 1978 (volume
57, number 6, part 2).  This issue of the Technical Journal includes
``The UNIX Time-Sharing System''
by D.M. Ritchie and K. Thompson, which describes major features
of the system.
For information regarding system implementation, refer to the
\f2\*(6) Release Description (SRD)\f1, \f2\*(6) Transition Aids\f1,
and \f2\*(6) Administrator's Guide\f1.
A complete list of the \*(5) documentation
is provided in the Table of Contents at the front of each binder.
.H 1 "USER'S MANUAL ORGANIZATION"
.H 2 "Description of Contents"
This manual is divided into
six sections,
some containing inter-filed sub-classes:
.PP
.nf
.ta 2m +\w'\1.~~'u +\w'1M.~~'u
	1.	Commands and Application Programs:
		1.	General-Purpose Commands.
		1C.	Communications Commands.
		1G.	Graphics Commands.
	2.	System Calls.
	3.	Subroutines:
		3C.	C and Assembler Library Routines.
		3F.	FORTRAN Library Routines.
		3M.	Mathematical Library Routines.
		3S.	Standard I/O Library Routines.
		3X.	Miscellaneous Routines.
	4.	File Formats.
	5.	Miscellaneous Facilities.
	6.	Games.
.ta .5i 1i 1.5i 2i 2.5i 3i 3.5i 4i 4.5i 5i 5.5i 6i 6.5i
.PP
.fi
\f3Section~1\f1 (\f2Commands and Application Programs\^\f1)
describes programs intended to be invoked directly by
the user
or by command language procedures,
as opposed to subroutines, which are
intended to be called by the user's programs.
Commands generally reside in the directory
\f3/bin\f1
(for
\f3bin\^\f1ary programs).
Some programs also reside in
\f3/usr/bin\f1
to save space in
\f3/bin\f1.
These directories are searched automatically by the command interpreter
called the
\f2shell\^\f1.
Sub-class 1C contains communication programs
such as
\f2cu\^\f1
and
\f2uucp\^\f1.
These entries may not apply from system to system
depending upon the hardware included on your processor.
Some systems may have a directory called
\f3/usr/lbin\f1, containing local commands.
.PP
\f3Section~2\f1 (\f2System Calls\^\f1)
describes the entries into the system kernel, including
the C language
interface.
.PP
\f3Section~3\f1 (\f2Subroutines\^\f1) describes the available
subroutines.
Their binary versions reside in various system libraries
in the directories
\f3/lib\f1 and \f3/usr/lib\f1.
See \f2intro\^\f1(3) for descriptions of these libraries and the
files in which they are stored.
.PP
\f3Section~4\f1
(\f2File Formats\^\f1)
documents the structure of particular
kinds of files;
for example, the format of the output of the link editor is given
in \f2a\^\f1\f3.\^\f1\f2out\^\f1(4).
Excluded are files used by only one command
(for example, the assembler's intermediate files).
In general, the C language \f3struct\f1
declarations corresponding to these formats
can be found in the directories \f3/usr/include\f1
and \f3/usr/include/sys\f1.
.PP
\f3Section~5\f1 (\f2Miscellaneous Facilities\^\f1) contains various
descriptions, including those for character sets and macro
packages.
.PP
\f3Section~6\f1 (\f2Games\^\f1) describes the games and educational
programs that, as a rule, reside
in
the directory
\f3/usr/games\f1.
.PP
A table of contents
and a permuted index derived from that table
precede Section~1.
On each
\f2index\^\f1
line, the title
of the
entry to which
that line refers is followed by the appropriate section number in parentheses.
This is important because there is considerable
duplication of names among the sections,
arising principally from commands that
exist only to exercise a particular system call.
.H 2 "Section Organization"
Each section consists of a number of independent
entries of a page or so each.
The name of the entry appears in the upper corners of its pages.
Entries within each section are
alphabetized,
with the exception of the introductory entry
that begins each section.
The page numbers of each entry start at 1.
Some entries may describe several routines, commands, etc.
In such cases, the entry appears only once, alphabetized under
its \*`major\*' name.
.PP
The
.IR "\*(6) Administrator's Manual" ,
which contains sections 1M, 7, and 8,
is organized in the same manner as this User's Manual.
Throughout the documentation, references to the contents
of either manual are given as
.IR name (section).
For example,
.IR chroot (1M)
is a reference to the \f2chroot\f1 entry in section
1M of the
.IR "\*(6) Administrator's Manual" .
.PP
On most systems, all entries are
available \%on-line via the \f2man\^\f1(1)
command.
.H 2 "Entry Format"
All entries are presented in a standard format,
not all of whose parts always appear:
.PP
The
\f3\s-1NAME\s+1\f1
part gives the name(s) of the entry and
briefly
states its purpose.
.PP
The
\f3\s-1SYNOPSIS\s+1\f1
part summarizes the use of the
program being described.
.PP
The
\f3\s-1DESCRIPTION\s+1\f1
part provides additional information about the program
or facility outlined in the ``Name'' and ``Synopsis'' parts.
.PP
The
\f3\s-1EXAMPLE(S)\s+1\f1
part gives
example(s) of usage, where appropriate.
.PP
The
\f3\s-1FILES\s+1\f1
part gives the filenames that are
built into the program.
.PP
The
\f3\s-1SEE ALSO\s+1\f1
part gives pointers to related information.
.PP
The
\f3\s-1DIAGNOSTICS\s+1\f1
part discusses
the diagnostic indications that may be produced.
Messages that are intended to be self-explanatory
are not listed.
.PP
The
\f3\s-1WARNINGS\s+1\f1
part points out potential pitfalls.
.PP
The
\f3\s-1BUGS\s+1\f1
part gives
known bugs and sometimes deficiencies.
Occasionally, the suggested fix is
also described.
.H 2 "Conventions"
A few conventions are used, particularly in
Section~1
(\f2Commands\^\f1):
.PP
\f3Boldface\f1
strings are literals and
are to be typed just as they appear.
.PP
\f2Italic\^\f1 strings usually represent
substitutable argument prototypes
and program names found elsewhere in the manual.
Note that this convention is not used in the
``SYNOPSIS'' or ``SEE ALSO'' part; regular print is used in place
of italics.
.PP
Square brackets \f3[\|]\f1 around an argument prototype
indicate that the argument is optional.
When an argument prototype is given as
\*`name\*' or \*`file\*',
it always
refers to a
\f2file\^\f1name.
.PP
Ellipses (\f3\^.\|.\|.\^\f1) are used to show that
the previous argument prototype
may be repeated.
.PP
A final convention is used by the commands themselves.
An argument beginning with a minus (\f3\(mi\f1),
plus (\f3\(pl\f1),
or equal sign (\f3\(eq\f1)
is often taken to be some sort of flag argument,
even if it appears in a position where a filename
could appear.
Therefore, it is unwise to have files
whose names begin with \f3\(mi\f1,
\f3\(pl\f1, or \f3\(eq\f1.
.in -2M
.H 1 "HOW TO GET STARTED"
This discussion provides the basic information
you need to get started on \*(5):
how to log in and log out,
how to communicate through your terminal,
and how to run a program.
See the \f2\*(6) User's Guide\^\f1
for a more complete introduction
to the system.
.PP
.H 2 "Logging In"
You must dial up the system from an appropriate terminal.
\*(5) supports full-duplex \s-1ASCII\s+1 terminals.
You must have a valid user name,
which may be obtained
(together with the telephone number(s) of your system)
from the administrator
of your system.
Common terminal speeds are 10, 15, 30, and 120 characters per second
(110, 150, 300, and 1,200 baud);
occasionally, speeds of 240, 480, and 960 characters per second
(2,400, 4,800, and 9,600 baud)
are also available.
On some systems, there are separate telephone numbers
for each available terminal speed, while on other
systems several speeds may be served by a single telephone number.
In the latter case, there is one ``preferred'' speed;
if you dial in from a terminal set to a different speed, you will
be greeted by a string of meaningless characters
(the \f3login:\f1 message at the wrong speed).
Keep hitting the ``break'' or ``attention'' key until the \f3login:\f1
message appears.
Hard-wired terminals usually are set to the correct speed.
.PP
Most terminals have a speed
switch that should be set to the appropriate speed
and a half-/full-duplex switch that should be set to
full-duplex.
When a connection (at the speed of the terminal)
has been established, the system
types \f3login:\f1 and you then type your
user name followed by the \*`return\*' key.
If you have a password (and you should!), the system asks for it,
but does not print (\*`echo\*') it on the terminal.
After you have logged in,
the \*`return\*', \*`new-line\*', and \*`line-feed\*' keys
will give exactly the same result.
.PP
It is important
that you type your login name in lower case if possible; if you type
upper-case letters, the system
assumes that your terminal cannot generate lower-case
letters and that you mean all subsequent
upper-case
input to be treated as lower case.
When you have logged in successfully,
the shell
returns a \f3$\f1.
(The shell is described below under
``How to Run a Program''.)
.PP
For more information, consult
\f2login\^\f1(1),
which discuss the login sequence in more
detail, and \f2stty\^\f1(1), which tells you how to describe the
characteristics of your terminal to the system
(\f2profile\^\f1(4) explains how to accomplish this last task
automatically every time you log in).
.H 2 "Logging Out"
There are two ways to log out:
.PP
.in 2m+\w'1.  'u
.ti -\w'1.  'u
1.  You can simply hang up the phone.
.br
.ti -\w'1.  'u
2.  You can log out by typing an end-of-file indication
(\s-1ASCII\s+1 \s-1\f3EOT\f1\s+1 character,
usually typed as \s-1CONTROL-D\s+1 to the shell.
When you use this method to log out,
the shell terminates and the \f3login:\f1 message
appears again.
.in -2m+\w'1.  'u
.H 2 "How to Communicate Through Your Terminal"
When you type input, the system
gathers your characters and saves them.
These
characters are not given to a program
until you type a \*`return\*' (or \*`new-line\*'), as described above
in ``Logging In''.
.PP
\*(5) terminal input/output is full-duplex.
It has full read-ahead capability, which means that you can
type at any time,
even while a program is
prompting you.
Of course, if you type during output, the output is
interspersed with the input characters;
however, your input is saved and
interpreted in the correct sequence.
There is a limit to the amount of read-ahead,
but it
is generous and not likely to be exceeded unless
the system is in trouble.
When the read-ahead limit is exceeded, the system
throws away
\f2all\^\f1
the saved characters.
.PP
On an input line from a terminal, the character \f3@\f1
``kills'' all the characters typed before it.
The character \f3#\f1 erases the last character typed.
Successive uses of \f3#\f1 erase characters back to, but
not beyond, the beginning of the line;
\f3@\f1 and \f3#\f1 can be typed as themselves
by preceding them with \f3\e\f1
(thus, to erase a \f3\e\f1\|, you need two \f3#\f1s).
These default erase and kill characters can be changed; see \f2stty\f1(1).
.PP
The \s-1ASCII\s+1 \s-1\f3DC3\f1\s+1 (\s-1CONTROL-S\s+1)
character can be used to temporarily
stop output.
It is useful with \s-1CRT\s+1 terminals to prevent output from
disappearing before it can be read.
Output is resumed when a
\s-1\f3DC1\f1\s+1 (\s-1CONTROL-Q\s+1) or a second \s-1\f3DC3\f1\s+1
(or any other character, for that matter)
is typed.
The \s-1\f3DC1\f1\s+1 and \s-1\f3DC3\f1\s+1
characters are not passed to any other program when used
in this manner.
.PP
The \s-1ASCII\s+1 \s-1\f3DEL\f1\s+1 (a.k.a. \*`rubout\*')
character is not passed to programs,
but instead generates
an
\f2interrupt signal,\^\f1
just like the \*`break\*', \*`interrupt\*', or \*`attention\*' signal.
This signal
generally causes whatever program
you are running to terminate.
It is typically used to stop a long printout that
you don't want.
However, programs can arrange either to ignore
this signal altogether,
or to be notified when it happens (instead
of being terminated).
The editor \f2ed\^\f1(1), for example, catches interrupts and
stops what it is doing,
instead of terminating, so that an interrupt can
be used to halt an editor printout without
losing the file being edited.
.PP
The \f2quit\^\f1 signal is generated
by typing the \s-1ASCII\s+1 \s-1\f3FS\f1\s+1 character.
It not only causes a running program to terminate,
but also generates a file with the ``core image''
of the terminated process.
\f2Quit\^\f1
is useful
for debugging.
.PP
Besides adapting to the speed of the terminal,
\*(5) tries to determine whether
you have a terminal with the \*`new-line\*' function,
or whether it must be simulated with a \*`carriage-return\*'
and \*`line-feed\*' pair.
In the latter case, all
\f2input\^\f1
\*`carriage-return\*' characters
are changed to \*`line-feed\*' characters (the standard
line delimiter),
and a \*`carriage-return\*' and \*`line-feed\*' pair
is echoed to the terminal.
If you get into the wrong mode, use the \f2stty\^\f1(1) command
to correct it.
.PP
Tab characters are used freely in system source programs.
If your terminal does not have the tab function,
you can arrange to have tab characters changed into spaces
during output and echoed as spaces
during input.
The \f2stty\^\f1(1) command
can be used to set or reset this mode.
The system assumes
that tabs are set every eight character positions.
The \f2tabs\^\f1(1) command sets
tab stops on your terminal, if that is possible.
.PP
.H 2 "How to Run a Program"
When you have successfully logged into the system, a program
called the shell is listening to your terminal.
The shell reads the lines you type, splits them
into a command name and its arguments, and executes the command.
A command is simply an executable program.
Normally, the shell looks first in your current directory
(see ``The Current Directory'' below)
for a program with the given name.
If none is there, it looks in system directories.
There is nothing special about system-provided
commands except that they are kept in directories
where the shell can find them.
You can also keep commands in your own directories and arrange for the
shell to find them there.
.PP
The command name is the first word on an input line to the shell;
the command and its arguments are separated from one another by
space and/or tab characters.
.PP
When a program terminates, the shell ordinarily regains control and
returns a \f3$\f1 to indicate that it is ready for another command.
The shell has many other capabilities, which are described in detail in
\f2sh\^\f1(1).
.H 2 "The Current Directory"
The \*(5) file system is arranged in a hierarchy of directories.
When the system administrator gives you a user name,
he or she also creates a directory for you (ordinarily
with the same name as your user name.  This directory is
known as your \f2login\^\f1 or \f2home\^\f1 directory).
When you log in, your home
directory becomes your \f2current\^\f1 or \f2working\^\f1 directory, and
any filename you type is by default
assumed to be in that directory.
Because you are the owner of this directory, you have
full permissions to read, write, alter, or destroy
its contents.
Permissions for directories and files other than your own
may be granted or denied to you
by their owners, or by the system administrator.
To change the
current directory,
use \f2cd\^\f1(1).
.H 2 "Pathnames"
To refer to files not in the current directory, you must
use a pathname.
Full pathnames begin with \f3/\f1, which is the name
of the \f2root\^\f1 directory of the
whole file system.
Following the initial slash, each directory and 
subdirectory is named in succession, until the
filename is reached.  Each directory name is followed by a
\f3/\f1.
For example,
\f3/usr/ae/filex\f1
refers to file
\f3filex\f1
in directory
\f3ae\f1, while \f3ae\f1
is itself a subdirectory of
\f3usr\f1\^; \f3usr\f1
springs directly from the root directory.
See \f2intro\^\f1(2) for a formal definition of pathname.
.PP
If your current directory contains subdirectories,
the pathnames of files therein begin with
the name of the corresponding subdirectory (\f2without\^\f1 a prefixed \f3/\f1).
Without important exception,
a pathname may be used anywhere a filename is
required.
.PP
Important commands that modify the contents of files
are \f2cp\^\f1(1), \f2mv\^\f1, and \f2rm\^\f1(1),
which copy, move (i.e., rename), and remove files.
To find out the status of files or directories, use \f2ls\^\f1(1).
Use \f2mkdir\^\f1(1) for making directories and \f2rmdir\^\f1(1) for destroying them.
.PP
For further discussion of the file system, see
the ``Basics For Beginners'' section in the 
.IR "\*(6) User's Guide" .
It may also be useful to glance through
Section~2 of this manual, which discusses
system calls, even if you don't intend
to use the system at that level.
.PP
.H 2 "Writing a Program"
To enter the text of a source program into a \*(5) file, use \f2ed\^\f1(1).
The principal languages available are
C (see
\f2cc\^\f1(1)), Fortran (see
\f2f77\^\f1(1)),
and assembly language (see \f2as\^\f1(1)).
After the program text has been entered with
the editor
and written into a file (whose name has the appropriate suffix),
you can give the name of that file
to the appropriate language processor as an argument.
Normally, the output of the language processor
is left in a file in the current directory named \f3a.out\f1
(if that output is precious,
use
\f2mv\^\f1(1)
to give it a less vulnerable name).
If the program is written in assembly language, you probably
need to load library subroutines with it (see
\f2ld\^\f1(1)).
Fortran and C call
the loader automatically.
.PP
When you have completed this entire process
without provoking any diagnostics, the resulting program
can be run by giving its name to the shell
in response to the \f3$\f1 prompt.
.PP
If any execution (run-time) errors occur, use \f2sdb\^\f1(1)
to examine the remains of your program.
.PP
Your programs can receive arguments from the command line
just as system programs do;
see \f2exec\^\f1(2).
.PP
.H 2 "Text Processing"
Almost all text is entered using one of the editors (see \f2ex\^\f1(1), 
\f2vi\^\f1(1), and \f2ed\^\f1(1)).
The commands most often used to write text on a terminal are
\f2cat\^\f1(1), \f2pr\^\f1(1), and \f2nroff\^\f1(1).
The \f2cat\^\f1(1) command simply dumps \s-1ASCII\s+1 text
on the terminal, with no processing at all.
The \f2pr\^\f1(1) command paginates the text, supplies headings,
and has a facility for multi-column output.
\f2Nroff\^\f1(1)
is an elaborate text formatting program,
and requires careful forethought
in entering both the text and the formatting commands
into the input file; it
produces output on a typewriter-like terminal.
\f2Troff\^\f1(1)
is very similar to \f2nroff\^\f1(1), but
produces its output on a
.if t phototypesetter (it was used to typeset this manual).
.if n phototypesetter.
There are several ``macro'' packages  (e.g., the 
\f2mm\^\f1(1) package) that significantly ease the effort
required to use
\f2nroff\^\f1 and \f2troff\^\f1(1);
Section~5 entries for these packages indicate where you can find their
detailed descriptions.
.H 2 "Surprises"
Certain commands provide
inter-user communication.
Even if you do not plan to use them, it would be
well to learn something about them, because someone else may
direct them to you.
To communicate with another user currently logged in,
\f2write\^\f1(1)
is used;
\f2mail\^\f1(1)
leaves a message whose presence is announced
to another user when he or she next logs in.
The corresponding entries in this manual suggest how to respond to
these two commands.
.PP
When you log in, a message-of-the-day may greet you
before the first \f3$\f1.
.\"	@(#)intro	1.20	
