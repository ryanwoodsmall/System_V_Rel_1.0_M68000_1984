.xx "" "cm16:" "16Mb Cartridge Module Drive." "" cm16(7)
.xx "" "lrk25:" "25Mb Lark Module Drive." "" lrk25(7)
.xx "" "hp: handle special functions of HP 2640 and" "2621-series terminals." "" hp(1)
.xx "" "hp: handle special functions of HP" "2640 and 2621-series terminals." "" hp(1)
.xx "300s terminals." "" "300, 300s: handle special functions of DASI 300 and" "" 300(1)
.xx "" "300, 300s: handle special functions of DASI" "300 and 300s terminals." "" 300(1)
.xx "terminals." "300," "300s: handle special functions of DASI 300 and 300s" "" 300(1)
.xx "" "300, 300s: handle special functions of DASI 300 and" "300s terminals." "" 300(1)
.xx "" "l3tol, ltol3: convert between" "3-byte integers and long integers." "" l3tol(3C)
.xx "" "diff3:" "3-way differential file comparison." "" diff3(1)
.xx "" "" "4014: paginator for the Tektronix 4014 terminal." "" 4014(1)
.xx "" "4014: paginator for the Tektronix" "4014 terminal." "" 4014(1)
.xx "terminal." "" "450: handle special functions of the DASI 450" "" 450(1)
.xx "" "450: handle special functions of the DASI" "450 terminal." "" 450(1)
.xx "" "config: configure" "5)." "" config.68(1M)
.xx "" "filesave, tapesave: daily/weekly" "5) file system backup." "" filesave(1M)
.xx "" "cu: call another" "5) system." "" cu(1C)
.xx "" "f77: Fortran" "77 compiler." "" f77(1)
.xx "" "cm80:" "80Mb Cartridge Module Drive." "" cm80(7)
.xx "base-64 ASCII string." "" "a64l, l64a: convert between long integer and" "" a64l(3C)
.xx "" "" "abort: generate an IOT fault." "" abort(3C)
.xx "" "" "abort: terminate Fortran program." "" abort(3F)
.xx "value." "" "abs, iabs, dabs, cabs, zabs: Fortran absolute" "" abs(3F)
.xx "" "" "abs: return integer absolute value." "" abs(3C)
.xx "" "abs: return integer" "absolute value." "" abs(3C)
.xx "" "abs, iabs, dabs, cabs, zabs: Fortran" "absolute value." "" abs(3F)
.xx "" "floor, ceil, fmod, fabs: floor, ceiling, remainder," "absolute value functions." "" floor(3M)
.xx "" "" "accept, reject: allow/prevent LP requests." "" accept(1M)
.xx "" "touch: update" "access and modification times of a file." "" touch(1)
.xx "" "utime: set file" "access and modification times." "" utime(2)
.xx "" "" "access: determine accessibility of a file." "" access(2)
.xx "" "graphics:" "access graphical and numerical commands." "" graphics(1G)
.xx "fashion.." "sputl, sgetl:" "access long integer data in a machine independent" "" sputl(3X)
.xx "" "sadp: disk" "access profiler." "" sadp(1)
.xx "" "ldfcn: common object file" "access routines." "" ldfcn(4)
.xx "" "dcopy: copy file systems for optimal" "access time." "" dcopy(1M)
.xx "" "getutline, pututline, setutent, endutent, utmpname:" "access utmp file entry." "getutent, getutid," getut(3C)
.xx "" "access: determine" "accessibility of a file." "" access(2)
.xx "" "acct: enable or disable process" "accounting." "" acct(2)
.xx "" "acctcon1, acctcon2: connect-time" "accounting." "" acctcon(1M)
.xx "" "acctprc1, acctprc2: process" "accounting." "" acctprc(1M)
.xx "" "shutacct, startup, turnacct: shell procedures for" "accounting." "/prdaily, prtacct, remove, runacct," acctsh(1M)
.xx "" "acctdisk, acctdusg, accton, acctwtmp: overview of" "accounting and miscellaneous accounting commands." "" acct(1M)
.xx "" "acctwtmp: overview of accounting and miscellaneous" "accounting commands." "acctdisk, acctdusg, accton," acct(1M)
.xx "" "acct: per-process" "accounting file format." "" acct(4)
.xx "" "acctcom: search and print process" "accounting file(s)." "" acctcom(1)
.xx "" "acctmerg: merge or add total" "accounting files." "" acctmerg(1M)
.xx "" "mclock: return Fortran time" "accounting." "" mclock(3F)
.xx "" "acctcms: command summary from per-process" "accounting records." "" acctcms(1M)
.xx "" "fwtmp, wtmpfix: manipulate connect" "accounting records." "" fwtmp(1M)
.xx "" "runacct: run daily" "accounting." "" runacct(1M)
.xx "" "" "acct: enable or disable process accounting." "" acct(2)
.xx "" "" "acct: per-process accounting file format." "" acct(4)
.xx "accounting records." "" "acctcms: command summary from per-process" "" acctcms(1M)
.xx "file(s)." "" "acctcom: search and print process accounting" "" acctcom(1)
.xx "" "" "acctcon1, acctcon2: connect-time accounting." "" acctcon(1M)
.xx "" "acctcon1," "acctcon2: connect-time accounting." "" acctcon(1M)
.xx "accounting and miscellaneous accounting commands." "" "acctdisk, acctdusg, accton, acctwtmp: overview of" "" acct(1M)
.xx "and miscellaneous accounting commands." "acctdisk," "acctdusg, accton, acctwtmp: overview of accounting" "" acct(1M)
.xx "" "" "acctmerg: merge or add total accounting files." "" acctmerg(1M)
.xx "miscellaneous accounting/" "acctdisk, acctdusg," "accton, acctwtmp: overview of accounting and" "" acct(1M)
.xx "" "" "acctprc1, acctprc2: process accounting." "" acctprc(1M)
.xx "" "acctprc1," "acctprc2: process accounting." "" acctprc(1M)
.xx "accounting commands." "acctdisk, acctdusg, accton," "acctwtmp: overview of accounting and miscellaneous" "" acct(1M)
.xx "Adapter." "" "acia: Asynchronous Communications Interface" "" acia(7)
.xx "" "sin, cos, tan, asin," "acos, atan, atan2: trigonometric functions." "" trig(3M)
.xx "" "" "acos, dacos: Fortran arccosine intrinsic function." "" acos(3F)
.xx "" "killall: kill all" "active processes." "" killall(1M)
.xx "" "sag: system" "activity graph." "" sag(1G)
.xx "" "sa1, sa2, sadc: system" "activity report package." "" sar(1M)
.xx "" "sar: system" "activity reporter." "" sar(1)
.xx "" "sact: print current SCCS file editing" "activity." "" sact(1)
.xx "" "time a command; report process data and system" "activity." "timex:" timex(1)
.xx "" "acia: Asynchronous Communications Interface" "Adapter." "" acia(7)
.xx "" "mosd: the OSDD" "adapter macro package for formatting documents." "" mosd(5)
.xx "" "acctmerg: merge or" "add total accounting files." "" acctmerg(1M)
.xx "" "" "admin: create and administer SCCS files." "" admin(1)
.xx "" "admin: create and" "administer SCCS files." "" admin(1)
.xx "argument." "" "aimag, dimag: Fortran imaginary part of complex" "" aimag(3F)
.xx "function." "" "aint, dint: Fortran integer part intrinsic" "" aint(3F)
.xx "" "alarm: set a process's" "alarm clock." "" alarm(2)
.xx "" "" "alarm: set a process's alarm clock." "" alarm(2)
.xx "" "brk, sbrk: change data segment space" "allocation." "" brk(2)
.xx "" "malloc, free, realloc, calloc: main memory" "allocator." "" malloc(3C)
.xx "" "accept, reject:" "allow/prevent LP requests." "" accept(1M)
.xx "intrinsic function." "log," "alog, dlog, clog: Fortran natural logarithm" "" log(3F)
.xx "function." "log10," "alog10, dlog10: Fortran common logarithm intrinsic" "" log10(3F)
.xx "functions." "max, max0," "amax0, max1, amax1, dmax1: Fortran maximum-value" "" max(3F)
.xx "" "max, max0, amax0, max1," "amax1, dmax1: Fortran maximum-value functions." "" max(3F)
.xx "functions." "min, min0," "amin0, min1, amin1, dmin1: Fortran minimum-value" "" min(3F)
.xx "" "min, min0, amin0, min1," "amin1, dmin1: Fortran minimum-value functions." "" min(3F)
.xx "functions." "mod," "amod, dmod: Fortran remaindering intrinsic" "" mod(3F)
.xx "" "fsba: file system block" "analyzer." "" fsba(1M)
.xx "boolean functions." "" "and, or, xor, not, lshift, rshift: Fortran bitwise" "" bool(3F)
.xx "" "sort: sort" "and/or merge files." "" sort(1)
.xx "functions." "" "anint, dnint, nint, idnint: Fortran nearest integer" "" round(3F)
.xx "" "" "a.out: common assembler and link editor output." "" a.out(4)
.xx "" "aouthdr: optional" "aout header." "" aouthdr(4)
.xx "" "" "aouthdr: optional aout header." "" aouthdr(4)
.xx "" "intro: introduction to commands and" "application programs." "" intro(1)
.xx "" "introduction to system maintenance commands and" "application programs." "intro:" intro(1M)
.xx "archives." "" "ar: archive and library maintainer for portable" "" ar(1)
.xx "" "" "ar: common archive file format." "" ar(4)
.xx "" "bc:" "arbitrary-precision arithmetic language." "" bc(1)
.xx "" "acos, dacos: Fortran" "arccosine intrinsic function." "" acos(3F)
.xx "archives." "ar:" "archive and library maintainer for portable" "" ar(1)
.xx "" "cpio: format of cpio" "archive." "" cpio(4)
.xx "" "ar: common" "archive file format." "" ar(4)
.xx "" "ldahread: read the archive header of a member of an" "archive file." "" ldahread(3X)
.xx "" "ldahread: read the" "archive header of a member of an archive file." "" ldahread(3X)
.xx "" "tar: tape file" "archiver." "" tar(1)
.xx "" "ar: archive and library maintainer for portable" "archives." "" ar(1)
.xx "" "cpio: copy file" "archives in and out." "" cpio(1)
.xx "" "asin, dasin: Fortran" "arcsine intrinsic function." "" asin(3F)
.xx "" "atan2, datan2: Fortran" "arctangent intrinsic function." "" atan2(3F)
.xx "" "atan, datan: Fortran" "arctangent intrinsic function." "" atan(3F)
.xx "" "aimag, dimag: Fortran imaginary part of complex" "argument." "" aimag(3F)
.xx "" "getarg: return Fortran command-line" "argument." "" getarg(3F)
.xx "" "xargs: construct" "argument list(s) and execute command." "" xargs(1)
.xx "" "getopt: get option letter from" "argument vector." "" getopt(3C)
.xx "" "expr: evaluate" "arguments as an expression." "" expr(1)
.xx "" "echo: echo" "arguments." "" echo(1)
.xx "" "bc: arbitrary-precision" "arithmetic language." "" bc(1)
.xx "" "" "arithmetic: provide drill in number facts." "" arithmetic(6)
.xx "" "expr: evaluate arguments" "as an expression." "" expr(1)
.xx "" "" "as, ljas: common assembler." "" as(1)
.xx "" "asa: interpret" "ASA carriage control characters." "" asa(1)
.xx "" "" "asa: interpret ASA carriage control characters." "" asa(1)
.xx "" "ascii: map of" "ASCII character set." "" ascii(5)
.xx "" "" "ascii: map of ASCII character set." "" ascii(5)
.xx "" "l64a: convert between long integer and base-64" "ASCII string." "a64l," a64l(3C)
.xx "" "atof: convert" "ASCII string to floating-point number." "" atof(3C)
.xx "" "ctime, localtime, gmtime," "asctime, tzset: convert date and time to string." "" ctime(3C)
.xx "" "sin, cos, tan," "asin, acos, atan, atan2: trigonometric functions." "" trig(3M)
.xx "" "" "asin, dasin: Fortran arcsine intrinsic function." "" asin(3F)
.xx "" "help:" "ask for help." "" help(1)
.xx "" "a.out: common" "assembler and link editor output." "" a.out(4)
.xx "" "as, ljas: common" "assembler." "" as(1)
.xx "" "" "assert: verify program assertion." "" assert(3X)
.xx "" "assert: verify program" "assertion." "" assert(3X)
.xx "" "setbuf:" "assign buffering to a stream." "" setbuf(3S)
.xx "" "acia:" "Asynchronous Communications Interface Adapter." "" acia(7)
.xx "" "sin, cos, tan, asin, acos," "atan, atan2: trigonometric functions." "" trig(3M)
.xx "" "" "atan, datan: Fortran arctangent intrinsic function." "" atan(3F)
.xx "function." "" "atan2, datan2: Fortran arctangent intrinsic" "" atan2(3F)
.xx "" "sin, cos, tan, asin, acos, atan," "atan2: trigonometric functions." "" trig(3M)
.xx "number." "" "atof: convert ASCII string to floating-point" "" atof(3C)
.xx "" "strtol, atol," "atoi: convert string to integer." "" strtol(3C)
.xx "" "strtol," "atol, atoi: convert string to integer." "" strtol(3C)
.xx "" "wait:" "await completion of process." "" wait(1)
.xx "" "" "awk: pattern scanning and processing language." "" awk(1)
.xx "" "ungetc: push character" "back into input stream." "" ungetc(3S)
.xx "" "" "back: the game of backgammon." "" back(6)
.xx "" "back: the game of" "backgammon." "" back(6)
.xx "" "filesave, tapesave: daily/weekly 5) file system" "backup." "" filesave(1M)
.xx "" "finc: fast incremental" "backup." "" finc(1M)
.xx "" "frec: recover files from a" "backup tape." "" frec(1M)
.xx "" "" "banner: make posters." "" banner(1)
.xx "" "termcap: terminal capability data" "base." "" termcap(5)
.xx "" "a64l, l64a: convert between long integer and" "base-64 ASCII string." "" a64l(3C)
.xx "" "vi: screen oriented (visual) display editor" "based on ex." "" vi(1)
.xx "" "" "basename, dirname: deliver portions of pathnames." "" basename(1)
.xx "" "" "bc: arbitrary-precision arithmetic language." "" bc(1)
.xx "shell scripts." "brc," "bcheckrc, rc, powerfail: system initialization" "" brc(1M)
.xx "" "" "bcopy: interactive block copy." "" bcopy(1M)
.xx "" "" "bdiff: file comparator for large files." "" bdiff(1)
.xx "" "cb: C program" "beautifier." "" cb(1)
.xx "" "j0, j1, jn, y0, y1, yn:" "Bessel functions." "" bessel(3M)
.xx "" "" "bfs: big file scanner." "" bfs(1)
.xx "" "fread, fwrite:" "binary input/output." "" fread(3S)
.xx "" "bsearch:" "binary search." "" bsearch(3C)
.xx "" "tsearch, tdelete, twalk: manage" "binary search trees." "" tsearch(3C)
.xx "" "and, or, xor, not, lshift, rshift: Fortran" "bitwise boolean functions." "" bool(3F)
.xx "" "" "bj: the game of black jack." "" bj(6)
.xx "" "bj: the game of" "black jack." "" bj(6)
.xx "" "fsba: file system" "block analyzer." "" fsba(1M)
.xx "" "bcopy: interactive" "block copy." "" bcopy(1M)
.xx "" "sum: print checksum and" "block count of a file." "" sum(1)
.xx "" "sync: update the super" "block." "" sync(1)
.xx "" "df: report number of free disk" "blocks." "" df(1M)
.xx "restart." "" "bo: bootstrap operating procedure for system" "" bo(8)
.xx "" "and, or, xor, not, lshift, rshift: Fortran bitwise" "boolean functions." "" bool(3F)
.xx "" "bo:" "bootstrap operating procedure for system restart." "" bo(8)
.xx "shell scripts." "" "brc, bcheckrc, rc, powerfail: system initialization" "" brc(1M)
.xx "" "" "brk, sbrk: change data segment space allocation." "" brk(2)
.xx "programs." "" "bs: a compiler/interpreter for modest-sized" "" bs(1)
.xx "" "" "bsearch: binary search." "" bsearch(3C)
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)
.xx "" "setbuf: assign" "buffering to a stream." "" setbuf(3S)
.xx "" "mknod:" "build special file." "" mknod(1M)
.xx "" "swab: swap" "bytes." "" swab(3C)
.xx "" "cc\-" "C compiler." "" cc(1)
.xx "" "scc:" "C compiler for stand-alone programs." "" scc(1)
.xx "" "cflow: generate" "C flow graph." "" cflow(1)
.xx "" "cpp: the" "C language preprocessor." "" cpp(1)
.xx "" "cb:" "C program beautifier." "" cb(1)
.xx "" "lint: a" "C program checker." "" lint(1)
.xx "" "cxref: generate" "C program cross-reference." "" cxref(1)
.xx "" "abs, iabs, dabs," "cabs, zabs: Fortran absolute value." "" abs(3F)
.xx "" "" "cal: print calendar." "" cal(1)
.xx "" "dc: desk" "calculator." "" dc(1)
.xx "" "cal: print" "calendar." "" cal(1)
.xx "" "" "calendar: reminder service." "" calendar(1)
.xx "" "cu:" "call another 5) system." "" cu(1C)
.xx "" "stat: data returned by stat system" "call." "" stat(5)
.xx "" "malloc, free, realloc," "calloc: main memory allocator." "" malloc(3C)
.xx "" "intro: introduction to system" "calls and error numbers." "" intro(2)
.xx "" "link, unlink: exercise link and unlink system" "calls." "" link(1M)
.xx "" "lp," "cancel: send/cancel requests to an LP line printer." "" lp(1)
.xx "" "termcap: terminal" "capability data base." "" termcap(5)
.xx "" "pnch: file format for" "card images." "" pnch(4)
.xx "" "asa: interpret ASA" "carriage control characters." "" asa(1)
.xx "" "cm16: 16Mb" "Cartridge Module Drive." "" cm16(7)
.xx "" "cm80: 80Mb" "Cartridge Module Drive." "" cm80(7)
.xx "" "edit: text editor (variant of ex for" "casual users)." "" edit(1)
.xx "" "" "cat: concatenate and print files." "" cat(1)
.xx "" "" "cb: C program beautifier." "" cb(1)
.xx "" "" "cc\- C compiler." "" cc(1)
.xx "" "cos, dcos," "ccos: Fortran cosine intrinsic function." "" cos(3F)
.xx "" "" "cd: change working directory." "" cd(1)
.xx "" "" "cdc: change the delta commentary of an SCCS delta." "" cdc(1)
.xx "absolute value functions." "floor," "ceil, fmod, fabs: floor, ceiling, remainder," "" floor(3M)
.xx "" "floor, ceil, fmod, fabs: floor," "ceiling, remainder, absolute value functions." "" floor(3M)
.xx "" "exp, dexp," "cexp: Fortran exponential intrinsic function." "" exp(3F)
.xx "" "" "cflow: generate C flow graph." "" cflow(1)
.xx "" "delta: make a delta" "(change) to an SCCS file." "" delta(1)
.xx "" "pipe: create an interprocess" "channel." "" pipe(2)
.xx "" "real, float, sngl, dble, cmplx, dcmplx, ichar," "char: explicit Fortran type conversion." "/idint," ftype(3F)
.xx "" "ungetc: push" "character back into input stream." "" ungetc(3S)
.xx "" "eqnchar: special" "character definitions for eqn and neqn." "" eqnchar(5)
.xx "" "cuserid: get" "character login name of the user." "" cuserid(3S)
.xx "" "getc, getchar, fgetc, getw: get" "character or word from stream." "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)
.xx "" "ascii: map of ASCII" "character set." "" ascii(5)
.xx "" "asa: interpret ASA carriage control" "characters." "" asa(1)
.xx "" "tolower,  toupper,  tolower, toascii: translate" "characters." "toupper," conv(3C)
.xx "" "isprint, isgraph, iscntrl, isascii: classify" "characters." "/isxdigit, isalnum, isspace, ispunct," ctype(3C)
.xx "" "tr: translate" "characters." "" tr(1)
.xx "nulladm, prctmp, prdaily, prtacct, remove,/" "" "chargefee, ckpacct, dodisk, lastlogin, monacct," "" acctsh(1M)
.xx "" "" "chdir: change working directory." "" chdir(2)
.xx "" "fsck, fsck1b, dfsck: file system consistency" "check and interactive repair." "" fsck(1M)
.xx "" "" "checkall: faster file system checking procedure." "" checkall(1M)
.xx "" "cw," "checkcw: prepare constant-width text for troff." "" cw(1)
.xx "troff." "eqn, neqn," "checkeq: format mathematical text for nroff or" "" eqn(1)
.xx "" "lint: a C program" "checker." "" lint(1)
.xx "" "pwck, grpck: password/group file" "checkers." "" pwck(1M)
.xx "" "checkall: faster file system" "checking procedure." "" checkall(1M)
.xx "" "volcopy, labelit: copy file systems with label" "checking." "" volcopy(1M)
.xx "" "" "checklist: list of file systems processed by fsck." "" checklist(4)
.xx "MM macros." "mm, osdd," "checkmm: print/check documents formatted with the" "" mm(1)
.xx "" "sum: print" "checksum and block count of a file." "" sum(1)
.xx "" "chess: the game of" "chess." "" chess(6)
.xx "" "" "chess: the game of chess." "" chess(6)
.xx "" "chown," "chgrp: change owner or group." "" chown(1)
.xx "" "times: get process and" "child process times." "" times(2)
.xx "" "wait: wait for" "child process to stop or terminate." "" wait(2)
.xx "" "" "chmod: change mode." "" chmod(1)
.xx "" "" "chmod: change mode of file." "" chmod(2)
.xx "" "" "chown: change owner and group of a file." "" chown(2)
.xx "" "" "chown, chgrp: change owner or group." "" chown(1)
.xx "" "" "chroot: change root directory." "" chroot(2)
.xx "" "" "chroot: change root directory for a command." "" chroot(1M)
.xx "prctmp, prdaily, prtacct, remove,/" "chargefee," "ckpacct, dodisk, lastlogin, monacct, nulladm," "" acctsh(1M)
.xx "" "ispunct, isprint, isgraph, iscntrl, isascii:" "classify characters." "/isxdigit, isalnum, isspace," ctype(3C)
.xx "" "uuclean: uucp spool directory" "clean-up." "" uuclean(1M)
.xx "" "clri:" "clear inode." "" clri(1M)
.xx "" "ferror, feof," "clearerr, fileno: stream status inquiries." "" ferror(3S)
.xx "" "alarm: set a process's alarm" "clock." "" alarm(2)
.xx "" "cron:" "clock daemon." "" cron(1M)
.xx "" "" "clock: report CPU time used." "" clock(3C)
.xx "" "log, alog, dlog," "clog: Fortran natural logarithm intrinsic function." "" log(3F)
.xx "" "ldclose, ldaclose:" "close a common object file." "" ldclose(3X)
.xx "" "close:" "close a file descriptor." "" close(2)
.xx "" "" "close: close a file descriptor." "" close(2)
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)
.xx "" "" "clri: clear inode." "" clri(1M)
.xx "" "" "cm16: 16Mb Cartridge Module Drive." "" cm16(7)
.xx "" "" "cm80: 80Mb Cartridge Module Drive." "" cm80(7)
.xx "" "" "cmp: compare two files." "" cmp(1)
.xx "" "int, ifix, idint, real, float, sngl, dble," "cmplx, dcmplx, ichar, char: explicit Fortran type/" "" ftype(3F)
.xx "" "" "col: filter reverse line-feeds." "" col(1)
.xx "" "" "comb: combine SCCS deltas." "" comb(1)
.xx "" "comb:" "combine SCCS deltas." "" comb(1)
.xx "files." "" "comm: select or reject lines common to two sorted" "" comm(1)
.xx "" "nice: run a" "command at low priority." "" nice(1)
.xx "" "chroot: change root directory for a" "command." "" chroot(1M)
.xx "" "env: set environment for" "command execution." "" env(1)
.xx "" "uux: unix to unix" "command execution." "" uux(1C)
.xx "" "system: issue a shell" "command from Fortran." "" system(3F)
.xx "" "nohup: run a" "command immune to hangups and quits." "" nohup(1)
.xx "" "getopt: parse" "command options." "" getopt(1)
.xx "" "sh, rsh: shell, the standard/restricted" "command programming language." "" sh(1)
.xx "" "timex: time a" "command; report process data and system activity." "" timex(1)
.xx "records." "acctcms:" "command summary from per-process accounting" "" acctcms(1M)
.xx "" "system: issue a shell" "command." "" system(3S)
.xx "" "test: condition evaluation" "command." "" test(1)
.xx "" "time: time a" "command." "" time(1)
.xx "" "xargs: construct argument list(s) and execute" "command." "" xargs(1)
.xx "" "getarg: return Fortran" "command-line argument." "" getarg(3F)
.xx "" "overview of accounting and miscellaneous accounting" "commands." "acctdisk, acctdusg, accton, acctwtmp:" acct(1M)
.xx "" "intro: introduction to" "commands and application programs." "" intro(1)
.xx "" "intro: introduction to system maintenance" "commands and application programs." "" intro(1M)
.xx "" "graphics: access graphical and numerical" "commands." "" graphics(1G)
.xx "" "install: install" "commands." "" install(1M)
.xx "" "mk: how to remake the system and" "commands." "" mk(8)
.xx "" "stat: statistical network useful with graphical" "commands." "" stat(1G)
.xx "" "cdc: change the delta" "commentary of an SCCS delta." "" cdc(1)
.xx "" "ar:" "common archive file format." "" ar(4)
.xx "" "a.out:" "common assembler and link editor output." "" a.out(4)
.xx "" "as, ljas:" "common assembler." "" as(1)
.xx "" "log10, alog10, dlog10: Fortran" "common logarithm intrinsic function." "" log10(3F)
.xx "" "ldfcn:" "common object file access routines." "" ldfcn(4)
.xx "" "ldopen, ldaopen: open a" "common object file for reading." "" ldopen(3X)
.xx "" "ldlitem: manipulate line number entries of a" "common object file function." "ldlread, ldlinit," ldlread(3X)
.xx "" "ldclose, ldaclose: close a" "common object file." "" ldclose(3X)
.xx "" "ldfhread: read the file header of a" "common object file." "" ldfhread(3X)
.xx "" "seek to line number entries of a section of a" "common object file." "ldlseek, ldnlseek:" ldlseek(3X)
.xx "" "ldohseek: seek to the optional file header of a" "common object file." "" ldohseek(3X)
.xx "" "seek to relocation entries of a section of a" "common object file." "ldrseek, ldnrseek:" ldrseek(3X)
.xx "" "read an indexed\/named section header of a" "common object file." "ldshread, ldnshread:" ldshread(3X)
.xx "" "ldnsseek: seek to an indexed\/named section of a" "common object file." "ldsseek," ldsseek(3X)
.xx "" "compute the index of a symbol table entry of a" "common object file." "ldtbindex:" ldtbindex(3X)
.xx "" "ldtbread: read an indexed symbol table entry of a" "common object file." "" ldtbread(3X)
.xx "" "ldtbseek: seek to the symbol table of a" "common object file." "" ldtbseek(3X)
.xx "" "linenum: line number entries in a" "common object file." "" linenum(4)
.xx "" "nm: print name list of" "common object file." "" nm(1)
.xx "" "reloc: relocation information for a" "common object file." "" reloc(4)
.xx "" "scnhdr: section header for a" "common object file." "" scnhdr(4)
.xx "" "syms:" "common object file symbol table format." "" syms(4)
.xx "" "filehdr: file header for" "common object files." "" filehdr(4)
.xx "" "ld: link editor for" "common object files." "" ld(1)
.xx "" "size: print section sizes of" "common object files." "" size(1)
.xx "" "comm: select or reject lines" "common to two sorted files." "" comm(1)
.xx "" "ipcs: report inter-process" "communication facilities status." "" ipcs(1)
.xx "" "stdipc: standard interprocess" "communication package." "" stdipc(3C)
.xx "" "acia: Asynchronous" "Communications Interface Adapter." "" acia(7)
.xx "" "diff: differential file" "comparator." "" diff(1)
.xx "" "bdiff: file" "comparator for large files." "" bdiff(1)
.xx "" "cmp:" "compare two files." "" cmp(1)
.xx "" "sccsdiff:" "compare two versions of an SCCS file." "" sccsdiff(1)
.xx "" "diff3: 3-way differential file" "comparison." "" diff3(1)
.xx "" "dircmp: directory" "comparison." "" dircmp(1)
.xx "" "regcmp, regex:" "compile and execute a regular expression." "" regcmp(3X)
.xx "" "regexp: regular expression" "compile and match routines." "" regexp(5)
.xx "" "regcmp: regular expression" "compile." "" regcmp(1)
.xx "" "cc\- C" "compiler." "" cc(1)
.xx "" "f77: Fortran 77" "compiler." "" f77(1)
.xx "" "scc: C" "compiler for stand-alone programs." "" scc(1)
.xx "" "yacc: yet another" "compiler-compiler." "" yacc(1)
.xx "" "bs: a" "compiler/interpreter for modest-sized programs." "" bs(1)
.xx "" "erf, erfc: error function and" "complementary error function." "" erf(3M)
.xx "" "wait: await" "completion of process." "" wait(1)
.xx "" "aimag, dimag: Fortran imaginary part of" "complex argument." "" aimag(3F)
.xx "" "conjg, dconjg: Fortran" "complex conjugate intrinsic function." "" conjg(3F)
.xx "" "pack, pcat, unpack:" "compress and expand files." "" pack(1)
.xx "common object file." "ldtbindex:" "compute the index of a symbol table entry of a" "" ldtbindex(3X)
.xx "" "cat:" "concatenate and print files." "" cat(1)
.xx "" "scat:" "concatenate and print files on synchronous printer." "" scat(1)
.xx "" "test:" "condition evaluation command." "" test(1)
.xx "" "" "config: configure 5)." "" config.68(1M)
.xx "" "config:" "configure 5)." "" config.68(1M)
.xx "" "lpadmin:" "configure the LP spooling system." "" lpadmin(1M)
.xx "function." "" "conjg, dconjg: Fortran complex conjugate intrinsic" "" conjg(3F)
.xx "" "conjg, dconjg: Fortran complex" "conjugate intrinsic function." "" conjg(3F)
.xx "" "fwtmp, wtmpfix: manipulate" "connect accounting records." "" fwtmp(1M)
.xx "" "dial: establish an out-going terminal line" "connection." "" dial(3C)
.xx "" "acctcon1, acctcon2:" "connect-time accounting." "" acctcon(1M)
.xx "" "fsck, fsck1b, dfsck: file system" "consistency check and interactive repair." "" fsck(1M)
.xx "" "rjestat: RJE status report and interactive status" "console." "" rjestat(1C)
.xx "" "cw, checkcw: prepare" "constant-width text for troff." "" cw(1)
.xx "" "mkfs, omkfs:" "construct a file system." "" mkfs(1M)
.xx "" "xargs:" "construct argument list(s) and execute command." "" xargs(1)
.xx "" "deroff: remove nroff/troff, tbl, and eqn" "constructs." "" deroff(1)
.xx "" "ls: list" "contents of directories." "" ls(1)
.xx "" "toc: graphical table of" "contents routines." "" toc(1G)
.xx "" "csplit:" "context split." "" csplit(1)
.xx "" "asa: interpret ASA carriage" "control characters." "" asa(1)
.xx "" "ioctl:" "control device." "" ioctl(2)
.xx "" "fcntl: file" "control." "" fcntl(2)
.xx "" "init, telinit: process" "control initialization." "" init(1M)
.xx "" "msgctl: message" "control operations." "" msgctl(2)
.xx "" "semctl: semaphore" "control operations." "" semctl(2)
.xx "" "shmctl: shared memory" "control operations." "" shmctl(2)
.xx "" "fcntl: file" "control options." "" fcntl(5)
.xx "" "uustat: uucp status inquiry and job" "control." "" uustat(1C)
.xx "" "vc: version" "control." "" vc(1)
.xx "" "for all disk units supported by the M68KVM21 disk" "controller." "ud: general driver" ud(7)
.xx "" "tty:" "controlling terminal interface." "" tty(7)
.xx "" "" "conv: object file converter." "" conv(1)
.xx "" "term:" "conventional names for terminals." "" term(5)
.xx "" "cmplx, dcmplx, ichar, char: explicit Fortran type" "conversion." "/ifix, idint, real, float, sngl, dble," ftype(3F)
.xx "" "units:" "conversion program." "" units(1)
.xx "" "dd:" "convert and copy a file." "" dd(1)
.xx "" "atof:" "convert ASCII string to floating-point number." "" atof(3C)
.xx "" "l3tol, ltol3:" "convert between 3-byte integers and long integers." "" l3tol(3C)
.xx "string." "a64l, l64a:" "convert between long integer and base-64 ASCII" "" a64l(3C)
.xx "" "ctime, localtime, gmtime, asctime, tzset:" "convert date and time to string." "" ctime(3C)
.xx "processors." "fscv:" "convert files between M68000 and VAX-11/780" "" fscv(1M)
.xx "" "ecvt, fcvt, gcvt:" "convert floating-point number to string." "" ecvt(3C)
.xx "" "scanf, fscanf, sscanf:" "convert formatted input." "" scanf(3S)
.xx "" "strtol, atol, atoi:" "convert string to integer." "" strtol(3C)
.xx "" "conv: object file" "converter." "" conv(1)
.xx "" "dd: convert and" "copy a file." "" dd(1)
.xx "" "bcopy: interactive block" "copy." "" bcopy(1M)
.xx "" "cpio:" "copy file archives in and out." "" cpio(1)
.xx "" "dcopy:" "copy file systems for optimal access time." "" dcopy(1M)
.xx "" "volcopy, labelit:" "copy file systems with label checking." "" volcopy(1M)
.xx "" "cp, ln, mv:" "copy, link or move files." "" cp(1)
.xx "" "uucp, uulog, uuname: unix to unix" "copy." "" uucp(1C)
.xx "" "uupick: public UNIX System-to-UNIX System file" "copy." "uuto," uuto(1C)
.xx "" "" "core: format of core image file." "" core(4)
.xx "" "core: format of" "core image file." "" core(4)
.xx "" "mem, kmem:" "core memory." "" mem(7)
.xx "" "" "cos, dcos, ccos: Fortran cosine intrinsic function." "" cos(3F)
.xx "functions." "sin," "cos, tan, asin, acos, atan, atan2: trigonometric" "" trig(3M)
.xx "function." "" "cosh, dcosh: Fortran hyperbolic cosine intrinsic" "" cosh(3F)
.xx "" "sinh," "cosh, tanh: hyperbolic functions." "" sinh(3M)
.xx "" "cos, dcos, ccos: Fortran" "cosine intrinsic function." "" cos(3F)
.xx "" "cosh, dcosh: Fortran hyperbolic" "cosine intrinsic function." "" cosh(3F)
.xx "" "sum: print checksum and block" "count of a file." "" sum(1)
.xx "" "wc: word" "count." "" wc(1)
.xx "" "" "cp, ln, mv: copy, link or move files." "" cp(1)
.xx "" "cpio: format of" "cpio archive." "" cpio(4)
.xx "" "" "cpio: copy file archives in and out." "" cpio(1)
.xx "" "" "cpio: format of cpio archive." "" cpio(4)
.xx "" "" "cpp: the C language preprocessor." "" cpp(1)
.xx "" "clock: report" "CPU time used." "" clock(3C)
.xx "" "craps: the game of" "craps." "" craps(6)
.xx "" "" "craps: the game of craps." "" craps(6)
.xx "" "" "crash: examine system images." "" crash(1M)
.xx "" "" "crash: what to do when the system crashes." "" crash.m68(8)
.xx "" "crash: what to do when the system" "crashes." "" crash.m68(8)
.xx "one." "" "creat: create a new file or rewrite an existing" "" creat(2)
.xx "" "tmpnam, tempnam:" "create a name for a temporary file." "" tmpnam(3S)
.xx "" "creat:" "create a new file or rewrite an existing one." "" creat(2)
.xx "" "fork:" "create a new process." "" fork(2)
.xx "" "tmpfile:" "create a temporary file." "" tmpfile(3S)
.xx "" "pipe:" "create an interprocess channel." "" pipe(2)
.xx "" "admin:" "create and administer SCCS files." "" admin(1)
.xx "" "umask: set and get file" "creation mask." "" umask(2)
.xx "" "" "cron: clock daemon." "" cron(1M)
.xx "" "cxref: generate C program" "cross-reference." "" cxref(1)
.xx "" "" "crypt: encode/decode." "" crypt(1)
.xx "" "" "crypt, setkey, encrypt: generate DES encryption." "" crypt(3C)
.xx "" "sin, dsin," "csin: Fortran sine intrinsic function." "" sin(3F)
.xx "" "" "csplit: context split." "" csplit(1)
.xx "" "sqrt, dsqrt," "csqrt: Fortran square root intrinsic function." "" sqrt(3F)
.xx "" "" "ct: spawn getty to a remote terminal." "" ct(1C)
.xx "" "" "ctermid: generate filename for terminal." "" ctermid(3S)
.xx "date and time to string." "" "ctime, localtime, gmtime, asctime, tzset: convert" "" ctime(3C)
.xx "" "" "cu: call another 5) system." "" cu(1C)
.xx "" "ttt," "cubic: tic-tac-toe." "" ttt(6)
.xx "" "uname: get name of" "current operating system." "" uname(2)
.xx "" "sact: print" "current SCCS file editing activity." "" sact(1)
.xx "" "uname: print name of" "current UNIX System." "" uname(1)
.xx "" "ttyslot: find the slot in the utmp file of the" "current user." "" ttyslot(3C)
.xx "" "getcwd: get pathname of" "current working directory." "" getcwd(3C)
.xx "" "spline: interpolate smooth" "curve." "" spline(1G)
.xx "" "" "cuserid: get character login name of the user." "" cuserid(3S)
.xx "file." "" "cut: cut out selected fields of each line of a" "" cut(1)
.xx "" "cut:" "cut out selected fields of each line of a file." "" cut(1)
.xx "" "" "cw, checkcw: prepare constant-width text for troff." "" cw(1)
.xx "" "" "cxref: generate C program cross-reference." "" cxref(1)
.xx "" "abs, iabs," "dabs, cabs, zabs: Fortran absolute value." "" abs(3F)
.xx "" "acos," "dacos: Fortran arccosine intrinsic function." "" acos(3F)
.xx "" "cron: clock" "daemon." "" cron(1M)
.xx "" "errdemon: error-logging" "daemon." "" errdemon(1M)
.xx "" "errstop: terminate the error-logging" "daemon." "" errstop(1M)
.xx "" "lpd: line printer" "daemon." "" lpd(1C)
.xx "" "runacct: run" "daily accounting." "" runacct(1M)
.xx "" "filesave, tapesave:" "daily/weekly 5) file system backup." "" filesave(1M)
.xx "" "300, 300s: handle special functions of" "DASI 300 and 300s terminals." "" 300(1)
.xx "" "450: handle special functions of the" "DASI 450 terminal." "" 450(1)
.xx "" "asin," "dasin: Fortran arcsine intrinsic function." "" asin(3F)
.xx "" "timex: time a command; report process" "data and system activity." "" timex(1)
.xx "" "termcap: terminal capability" "data base." "" termcap(5)
.xx "" "sputl, sgetl: access long integer" "data in a machine independent fashion.." "" sputl(3X)
.xx "" "plock: lock process, text, or" "data in memory." "" plock(2)
.xx "" "prof: display profile" "data." "" prof(1)
.xx "" "stat:" "data returned by stat system call." "" stat(5)
.xx "" "brk, sbrk: change" "data segment space allocation." "" brk(2)
.xx "" "types: primitive system" "data types." "" types(5)
.xx "" "join: relational" "database operator." "" join(1)
.xx "" "atan," "datan: Fortran arctangent intrinsic function." "" atan(3F)
.xx "" "atan2," "datan2: Fortran arctangent intrinsic function." "" atan2(3F)
.xx "" "ctime, localtime, gmtime, asctime, tzset: convert" "date and time to string." "" ctime(3C)
.xx "" "date: print and set the" "date." "" date(1)
.xx "" "" "date: print and set the date." "" date(1)
.xx "type/" "int, ifix, idint, real, float, sngl," "dble, cmplx, dcmplx, ichar, char: explicit Fortran" "" ftype(3F)
.xx "" "" "dc: desk calculator." "" dc(1)
.xx "" "int, ifix, idint, real, float, sngl, dble, cmplx," "dcmplx, ichar, char: explicit Fortran type/" "" ftype(3F)
.xx "function." "conjg," "dconjg: Fortran complex conjugate intrinsic" "" conjg(3F)
.xx "" "" "dcopy: copy file systems for optimal access time." "" dcopy(1M)
.xx "" "cos," "dcos, ccos: Fortran cosine intrinsic function." "" cos(3F)
.xx "function." "cosh," "dcosh: Fortran hyperbolic cosine intrinsic" "" cosh(3F)
.xx "" "" "dd: convert and copy a file." "" dd(1)
.xx "" "fsdb, fsdb1b: file system" "debugger." "" fsdb(1M)
.xx "" "sdb: symbolic" "debugger." "" sdb(1)
.xx "" "sysdef: system" "definition." "" sysdef(1M)
.xx "" "eqnchar: special character" "definitions for eqn and neqn." "" eqnchar(5)
.xx "" "basename, dirname:" "deliver portions of pathnames." "" basename(1)
.xx "" "tail:" "deliver the last part of a file." "" tail(1)
.xx "" "cdc: change the delta commentary of an SCCS" "delta." "" cdc(1)
.xx "" "delta: make a" "delta (change) to an SCCS file." "" delta(1)
.xx "" "cdc: change the" "delta commentary of an SCCS delta." "" cdc(1)
.xx "" "rmdel: remove a" "delta from an SCCS file." "" rmdel(1)
.xx "" "" "delta: make a delta (change) to an SCCS file." "" delta(1)
.xx "" "comb: combine SCCS" "deltas." "" comb(1)
.xx "" "mesg: permit or" "deny messages." "" mesg(1)
.xx "constructs." "" "deroff: remove nroff/troff, tbl, and eqn" "" deroff(1)
.xx "" "crypt, setkey, encrypt: generate" "DES encryption." "" crypt(3C)
.xx "" "close: close a file" "descriptor." "" close(2)
.xx "" "dup: duplicate an open file" "descriptor." "" dup(2)
.xx "" "dc:" "desk calculator." "" dc(1)
.xx "" "access:" "determine accessibility of a file." "" access(2)
.xx "" "file:" "determine file type." "" file(1)
.xx "" "master: master" "device information table." "" master.dec(4)
.xx "" "ioctl: control" "device." "" ioctl(2)
.xx "" "devnm:" "device name." "" devnm(1M)
.xx "" "hpd, erase, hardcopy, tekset, td: graphical" "device routines and filters." "" gdev(1G)
.xx "" "dk: disk" "device special files." "" dk(7)
.xx "" "" "devnm: device name." "" devnm(1M)
.xx "" "exp," "dexp, cexp: Fortran exponential intrinsic function." "" exp(3F)
.xx "" "" "df: report number of free disk blocks." "" df(1M)
.xx "interactive repair." "fsck, fsck1b," "dfsck: file system consistency check and" "" fsck(1M)
.xx "connection." "" "dial: establish an out-going terminal line" "" dial(3C)
.xx "" "ratfor: rational Fortran" "dialect." "" ratfor(1)
.xx "" "" "diff: differential file comparator." "" diff(1)
.xx "" "" "diff3: 3-way differential file comparison." "" diff3(1)
.xx "" "sdiff: side-by-side" "difference program." "" sdiff(1)
.xx "" "diffmk: mark" "differences between files." "" diffmk(1)
.xx "" "diff:" "differential file comparator." "" diff(1)
.xx "" "diff3: 3-way" "differential file comparison." "" diff3(1)
.xx "" "" "diffmk: mark differences between files." "" diffmk(1)
.xx "" "aimag," "dimag: Fortran imaginary part of complex argument." "" aimag(3F)
.xx "" "aint," "dint: Fortran integer part intrinsic function." "" aint(3F)
.xx "" "" "dir: format of directories." "" dir(4)
.xx "" "" "dircmp: directory comparison." "" dircmp(1)
.xx "" "dir: format of" "directories." "" dir(4)
.xx "" "ls: list contents of" "directories." "" ls(1)
.xx "" "rm, rmdir: remove files or" "directories." "" rm(1)
.xx "" "cd: change working" "directory." "" cd(1)
.xx "" "chdir: change working" "directory." "" chdir(2)
.xx "" "chroot: change root" "directory." "" chroot(2)
.xx "" "uuclean: uucp spool" "directory clean-up." "" uuclean(1M)
.xx "" "dircmp:" "directory comparison." "" dircmp(1)
.xx "" "unlink: remove" "directory entry." "" unlink(2)
.xx "" "chroot: change root" "directory for a command." "" chroot(1M)
.xx "" "getcwd: get pathname of current working" "directory." "" getcwd(3C)
.xx "" "mkdir: make a" "directory." "" mkdir(1)
.xx "" "mvdir: move a" "directory." "" mvdir(1M)
.xx "" "pwd: working" "directory name." "" pwd(1)
.xx "" "mknod: make a" "directory, or a special or ordinary file." "" mknod(2)
.xx "" "basename," "dirname: deliver portions of pathnames." "" basename(1)
.xx "" "" "dis: disassembler." "" dis(1)
.xx "" "enable," "disable: enable/disable LP printers." "" enable(1)
.xx "" "acct: enable or" "disable process accounting." "" acct(2)
.xx "" "dis:" "disassembler." "" dis(1)
.xx "" "getty: set terminal type, modes, speed, and line" "discipline." "" getty(1M)
.xx "" "sadp:" "disk access profiler." "" sadp(1)
.xx "" "df: report number of free" "disk blocks." "" df(1M)
.xx "" "driver for all disk units supported by the M68KVM21" "disk controller." "ud: general" ud(7)
.xx "" "dk:" "disk device special files." "" dk(7)
.xx "" "fl8: 8 inch Floppy" "Disk Drive." "" fl8(7)
.xx "controller." "ud: general driver for all" "disk units supported by the M68KVM21 disk" "" ud(7)
.xx "" "du: summarize" "disk usage." "" du(1)
.xx "" "mount, umount: mount and" "dismount file system." "" mount(1M)
.xx "" "vi: screen oriented (visual)" "display editor based on ex." "" vi(1)
.xx "" "prof:" "display profile data." "" prof(1)
.xx "" "hypot: Euclidean" "distance function." "" hypot(3M)
.xx "" "srand48, seed48, lcong48: generate uniformly" "distributed pseudo-random numbers." "/jrand48," drand48(3C)
.xx "" "" "dk: disk device special files." "" dk(7)
.xx "function." "log, alog," "dlog, clog: Fortran natural logarithm intrinsic" "" log(3F)
.xx "function." "log10, alog10," "dlog10: Fortran common logarithm intrinsic" "" log10(3F)
.xx "" "max, max0, amax0, max1, amax1," "dmax1: Fortran maximum-value functions." "" max(3F)
.xx "" "min, min0, amin0, min1, amin1," "dmin1: Fortran minimum-value functions." "" min(3F)
.xx "" "mod, amod," "dmod: Fortran remaindering intrinsic functions." "" mod(3F)
.xx "functions." "anint," "dnint, nint, idnint: Fortran nearest integer" "" round(3F)
.xx "" "mm, osdd, checkmm: print/check" "documents formatted with the MM macros." "" mm(1)
.xx "" "mm: the MM macro package for formatting" "documents." "" mm(5)
.xx "" "mosd: the OSDD adapter macro package for formatting" "documents." "" mosd(5)
.xx "" "mmt, mvt: typeset" "documents, viewgraphs, and slides." "" mmt(1)
.xx "prdaily, prtacct, remove,/" "chargefee, ckpacct," "dodisk, lastlogin, monacct, nulladm, prctmp," "" acctsh(1M)
.xx "" "whodo: who is" "doing what." "" whodo(1M)
.xx "" "reversi: a game of" "dramatic reversals." "" reversi(6)
.xx "jrand48, srand48, seed48, lcong48: generate/" "" "drand48, erand48, lrand48, nrand48, mrand48," "" drand48(3C)
.xx "" "graph:" "draw a graph." "" graph(1G)
.xx "" "arithmetic: provide" "drill in number facts." "" arithmetic(6)
.xx "" "cm16: 16Mb Cartridge Module" "Drive." "" cm16(7)
.xx "" "cm80: 80Mb Cartridge Module" "Drive." "" cm80(7)
.xx "" "fl8: 8 inch Floppy Disk" "Drive." "" fl8(7)
.xx "" "lrk25: 25Mb Lark Module" "Drive." "" lrk25(7)
.xx "disk controller." "ud: general" "driver for all disk units supported by the M68KVM21" "" ud(7)
.xx "" "sign, isign," "dsign: Fortran transfer-of-sign intrinsic function." "" sign(3F)
.xx "" "sin," "dsin, csin: Fortran sine intrinsic function." "" sin(3F)
.xx "" "sinh," "dsinh: Fortran hyperbolic sine intrinsic function." "" sinh(3F)
.xx "function." "sqrt," "dsqrt, csqrt: Fortran square root intrinsic" "" sqrt(3F)
.xx "" "tan," "dtan: Fortran tangent intrinsic function." "" tan(3F)
.xx "function." "tanh," "dtanh: Fortran hyperbolic tangent intrinsic" "" tanh(3F)
.xx "" "" "du: summarize disk usage." "" du(1)
.xx "" "" "dump: dump selected parts of an object file." "" dump(1)
.xx "" "errdead: extract error records from" "dump." "" errdead(1M)
.xx "" "od: octal" "dump." "" od(1)
.xx "" "dump:" "dump selected parts of an object file." "" dump(1)
.xx "" "" "dup: duplicate an open file descriptor." "" dup(2)
.xx "" "dup:" "duplicate an open file descriptor." "" dup(2)
.xx "" "echo:" "echo arguments." "" echo(1)
.xx "" "" "echo: echo arguments." "" echo(1)
.xx "string." "" "ecvt, fcvt, gcvt: convert floating-point number to" "" ecvt(3C)
.xx "" "" "ed, red: text editor." "" ed(1)
.xx "" "end, etext," "edata: last locations in program." "" end(3C)
.xx "" "" "edit: text editor (variant of ex for casual users)." "" edit(1)
.xx "" "sact: print current SCCS file" "editing activity." "" sact(1)
.xx "" "vi: screen oriented (visual) display" "editor based on ex." "" vi(1)
.xx "" "ed, red: text" "editor." "" ed(1)
.xx "" "ex: text" "editor." "" ex(1)
.xx "" "ld: link" "editor for common object files." "" ld(1)
.xx "" "ged: graphical" "editor." "" ged(1G)
.xx "" "a.out: common assembler and link" "editor output." "" a.out(4)
.xx "" "sed: stream" "editor." "" sed(1)
.xx "" "edit: text" "editor (variant of ex for casual users)." "" edit(1)
.xx "" "get real user, effective user, real group, and" "effective group IDs." "/geteuid, getgid, getegid:" getuid(2)
.xx "" "getuid, geteuid, getgid, getegid: get real user," "effective user, real group, and effective group/" "" getuid(2)
.xx "" "" "ef\&l: Extended Fortran Language." "" efl(1)
.xx "" "fsplit: split f77, ratfor, or" "ef\&l files." "" fsplit(1)
.xx "" "grep," "egrep, fgrep: search a file for a pattern." "" grep(1)
.xx "" "" "enable, disable: enable/disable LP printers." "" enable(1)
.xx "" "acct:" "enable or disable process accounting." "" acct(2)
.xx "" "enable, disable:" "enable/disable LP printers." "" enable(1)
.xx "" "crypt:" "encode/decode." "" crypt(1)
.xx "" "crypt, setkey," "encrypt: generate DES encryption." "" crypt(3C)
.xx "" "crypt, setkey, encrypt: generate DES" "encryption." "" crypt(3C)
.xx "" "makekey: generate" "encryption key." "" makekey(1)
.xx "" "" "end, etext, edata: last locations in program." "" end(3C)
.xx "" "getgrent, getgrgid, getgrnam, setgrent," "endgrent: obtain." "" getgrent(3C)
.xx "" "getpwent, getpwuid, getpwnam, setpwent," "endpwent: get password file entry." "" getpwent(3C)
.xx "" "getutent, getutid, getutline, pututline, setutent," "endutent, utmpname: access utmp file entry." "" getut(3C)
.xx "" "nlist: get" "entries from name list." "" nlist(3C)
.xx "" "linenum: line number" "entries in a common object file." "" linenum(4)
.xx "" "man, manprog: print" "entries in this manual." "" man(1)
.xx "" "man: macros for formatting" "entries in this manual." "" man(5)
.xx "" "ldlread, ldlinit, ldlitem: manipulate line number" "entries of a common object file function." "" ldlread(3X)
.xx "" "ldlseek, ldnlseek: seek to line number" "entries of a section of a common object file." "" ldlseek(3X)
.xx "" "ldrseek, ldnrseek: seek to relocation" "entries of a section of a common object file." "" ldrseek(3X)
.xx "" "utmp, wtmp: utmp and wtmp" "entry formats." "" utmp(4)
.xx "" "getpwnam, setpwent, endpwent: get password file" "entry." "getpwent, getpwuid," getpwent(3C)
.xx "" "setutent, endutent, utmpname: access utmp file" "entry." "getutent, getutid, getutline, pututline," getut(3C)
.xx "" "ldtbindex: compute the index of a symbol table" "entry of a common object file." "" ldtbindex(3X)
.xx "" "ldtbread: read an indexed symbol table" "entry of a common object file." "" ldtbread(3X)
.xx "" "putpwent: write password file" "entry." "" putpwent(3C)
.xx "" "unlink: remove directory" "entry." "" unlink(2)
.xx "" "" "env: set environment for command execution." "" env(1)
.xx "" "" "environ: user environment." "" environ(5)
.xx "" "profile: setting up an" "environment at login time." "" profile(4)
.xx "" "environ: user" "environment." "" environ(5)
.xx "" "env: set" "environment for command execution." "" env(1)
.xx "" "getenv: return value for" "environment name." "" getenv(3C)
.xx "" "getenv: return Fortran" "environment variable." "" getenv(3F)
.xx "" "sky: obtain" "ephemerides." "" sky(6)
.xx "" "eqnchar: special character definitions for" "eqn and neqn." "" eqnchar(5)
.xx "" "deroff: remove nroff/troff, tbl, and" "eqn constructs." "" deroff(1)
.xx "nroff or troff." "" "eqn, neqn, checkeq: format mathematical text for" "" eqn(1)
.xx "neqn." "" "eqnchar: special character definitions for eqn and" "" eqnchar(5)
.xx "srand48, seed48, lcong48: generate/" "drand48," "erand48, lrand48, nrand48, mrand48, jrand48," "" drand48(3C)
.xx "routines and filters." "hpd," "erase, hardcopy, tekset, td: graphical device" "" gdev(1G)
.xx "function." "" "erf, erfc: error function and complementary error" "" erf(3M)
.xx "function." "erf," "erfc: error function and complementary error" "" erf(3M)
.xx "" "" "err: error-logging interface." "" err(7)
.xx "" "" "errdead: extract error records from dump." "" errdead(1M)
.xx "" "" "errdemon: error-logging daemon." "" errdemon(1M)
.xx "" "" "errfile: error-log file format." "" errfile(4)
.xx "messages." "perror," "errno, sys errlist, sys nerr: system error" "" perror(3C)
.xx "" "erf, erfc:" "error function and complementary error function." "" erf(3M)
.xx "" "erf, erfc: error function and complementary" "error function." "" erf(3M)
.xx "" "perror, errno, sys errlist, sys nerr: system" "error messages." "" perror(3C)
.xx "" "intro: introduction to system calls and" "error numbers." "" intro(2)
.xx "" "errdead: extract" "error records from dump." "" errdead(1M)
.xx "" "matherr:" "error-handling function." "" matherr(3M)
.xx "" "errfile:" "error-log file format." "" errfile(4)
.xx "" "errdemon:" "error-logging daemon." "" errdemon(1M)
.xx "" "errstop: terminate the" "error-logging daemon." "" errstop(1M)
.xx "" "err:" "error-logging interface." "" err(7)
.xx "" "errpt: process a report of logged" "errors." "" errpt(1M)
.xx "" "spell, hashmake, spellin, hashcheck: find spelling" "errors." "" spell(1)
.xx "" "" "errpt: process a report of logged errors." "" errpt(1M)
.xx "" "" "errstop: terminate the error-logging daemon." "" errstop(1M)
.xx "" "dial:" "establish an out-going terminal line connection." "" dial(3C)
.xx "" "setmnt:" "establish mount table." "" setmnt(1M)
.xx "" "end," "etext, edata: last locations in program." "" end(3C)
.xx "" "hypot:" "Euclidean distance function." "" hypot(3M)
.xx "" "expr:" "evaluate arguments as an expression." "" expr(1)
.xx "" "test: condition" "evaluation command." "" test(1)
.xx "" "edit: text editor (variant of" "ex for casual users)." "" edit(1)
.xx "" "" "ex: text editor." "" ex(1)
.xx "" "screen oriented (visual) display editor based on" "ex." "vi:" vi(1)
.xx "" "crash:" "examine system images." "" crash(1M)
.xx "execute a file." "" "execl, execv, execle, execve, execlp, execvp:" "" exec(2)
.xx "" "execl, execv," "execle, execve, execlp, execvp: execute a file." "" exec(2)
.xx "" "execl, execv, execle, execve," "execlp, execvp: execute a file." "" exec(2)
.xx "" "execl, execv, execle, execve, execlp, execvp:" "execute a file." "" exec(2)
.xx "" "regcmp, regex: compile and" "execute a regular expression." "" regcmp(3X)
.xx "" "xargs: construct argument list(s) and" "execute command." "" xargs(1)
.xx "" "env: set environment for command" "execution." "" env(1)
.xx "" "sleep: suspend" "execution for an interval." "" sleep(1)
.xx "" "sleep: suspend" "execution for interval." "" sleep(3C)
.xx "" "monitor: prepare" "execution profile." "" monitor(3C)
.xx "" "profil:" "execution time profile." "" profil(2)
.xx "" "uux: unix to unix command" "execution." "" uux(1C)
.xx "file." "execl," "execv, execle, execve, execlp, execvp: execute a" "" exec(2)
.xx "" "execl, execv, execle," "execve, execlp, execvp: execute a file." "" exec(2)
.xx "" "execl, execv, execle, execve, execlp," "execvp: execute a file." "" exec(2)
.xx "" "link, unlink:" "exercise link and unlink system calls." "" link(1M)
.xx "" "creat: create a new file or rewrite an" "existing one." "" creat(2)
.xx "" "" "exit,  exit: terminate process." "" exit(2)
.xx "" "exit," " exit: terminate process." "" exit(2)
.xx "" "m68kops" "\-EXORmacs operations." "" m68kops(8)
.xx "function." "" "exp, dexp, cexp: Fortran exponential intrinsic" "" exp(3F)
.xx "power, square root functions." "" "exp, log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "" "pack, pcat, unpack: compress and" "expand files." "" pack(1)
.xx "" "float, sngl, dble, cmplx, dcmplx, ichar, char:" "explicit Fortran type conversion." "/idint, real," ftype(3F)
.xx "" "exp, dexp, cexp: Fortran" "exponential intrinsic function." "" exp(3F)
.xx "functions." "exp, log, log10, pow, sqrt:" "exponential, logarithm, power, square root" "" exp(3M)
.xx "" "" "expr: evaluate arguments as an expression." "" expr(1)
.xx "" "regexp: regular" "expression compile and match routines." "" regexp(5)
.xx "" "regcmp: regular" "expression compile." "" regcmp(1)
.xx "" "expr: evaluate arguments as an" "expression." "" expr(1)
.xx "" "regcmp, regex: compile and execute a regular" "expression." "" regcmp(3X)
.xx "" "ef\&l:" "Extended Fortran Language." "" efl(1)
.xx "" "greek: graphics for the" "extended TTY-37 type-box." "" greek(5)
.xx "" "errdead:" "extract error records from dump." "" errdead(1M)
.xx "" "" "f77: Fortran 77 compiler." "" f77(1)
.xx "" "fsplit: split" "f77, ratfor, or ef\&l files." "" fsplit(1)
.xx "functions." "floor, ceil, fmod," "fabs: floor, ceiling, remainder, absolute value" "" floor(3M)
.xx "" "factor:" "factor a number." "" factor(1)
.xx "" "" "factor: factor a number." "" factor(1)
.xx "" "true," "false: provide truth values." "" true(1)
.xx "" "access long integer data in a machine independent" "fashion.." "sputl, sgetl:" sputl(3X)
.xx "" "finc:" "fast incremental backup." "" finc(1M)
.xx "" "checkall:" "faster file system checking procedure." "" checkall(1M)
.xx "" "abort: generate an IOT" "fault." "" abort(3C)
.xx "" "" "fclose, fflush: close or flush a stream." "" fclose(3S)
.xx "" "" "fcntl: file control." "" fcntl(2)
.xx "" "" "fcntl: file control options." "" fcntl(5)
.xx "string." "ecvt," "fcvt, gcvt: convert floating-point number to" "" ecvt(3C)
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)
.xx "" "ferror," "feof, clearerr, fileno: stream status inquiries." "" ferror(3S)
.xx "inquiries." "" "ferror, feof, clearerr, fileno: stream status" "" ferror(3S)
.xx "system." "" "f\&f: list filenames and statistics for a file" "" ff(1M)
.xx "" "fclose," "fflush: close or flush a stream." "" fclose(3S)
.xx "" "getc, getchar," "fgetc, getw: get character or word from stream." "" getc(3S)
.xx "" "gets," "fgets: get a string from a stream." "" gets(3S)
.xx "" "grep, egrep," "fgrep: search a file for a pattern." "" grep(1)
.xx "" "utime: set" "file access and modification times." "" utime(2)
.xx "" "ldfcn: common object" "file access routines." "" ldfcn(4)
.xx "" "access: determine accessibility of a" "file." "" access(2)
.xx "" "tar: tape" "file archiver." "" tar(1)
.xx "" "cpio: copy" "file archives in and out." "" cpio(1)
.xx "" "pwck, grpck: password/group" "file checkers." "" pwck(1M)
.xx "" "chmod: change mode of" "file." "" chmod(2)
.xx "" "chown: change owner and group of a" "file." "" chown(2)
.xx "" "diff: differential" "file comparator." "" diff(1)
.xx "" "bdiff:" "file comparator for large files." "" bdiff(1)
.xx "" "diff3: 3-way differential" "file comparison." "" diff3(1)
.xx "" "fcntl:" "file control." "" fcntl(2)
.xx "" "fcntl:" "file control options." "" fcntl(5)
.xx "" "conv: object" "file converter." "" conv(1)
.xx "" "uuto, uupick: public UNIX System-to-UNIX System" "file copy." "" uuto(1C)
.xx "" "core: format of core image" "file." "" core(4)
.xx "" "umask: set and get" "file creation mask." "" umask(2)
.xx "" "cut: cut out selected fields of each line of a" "file." "" cut(1)
.xx "" "dd: convert and copy a" "file." "" dd(1)
.xx "" "delta: make a delta (change) to an SCCS" "file." "" delta(1)
.xx "" "close: close a" "file descriptor." "" close(2)
.xx "" "dup: duplicate an open" "file descriptor." "" dup(2)
.xx "" "" "file: determine file type." "" file(1)
.xx "" "dump: dump selected parts of an object" "file." "" dump(1)
.xx "" "sact: print current SCCS" "file editing activity." "" sact(1)
.xx "" "getpwnam, setpwent, endpwent: get password" "file entry." "getpwent, getpwuid," getpwent(3C)
.xx "" "setutent, endutent, utmpname: access utmp" "file entry." "/getutid, getutline, pututline," getut(3C)
.xx "" "putpwent: write password" "file entry." "" putpwent(3C)
.xx "" "execv, execle, execve, execlp, execvp: execute a" "file." "execl," exec(2)
.xx "" "grep, egrep, fgrep: search a" "file for a pattern." "" grep(1)
.xx "" "ldopen, ldaopen: open a common object" "file for reading." "" ldopen(3X)
.xx "" "acct: per-process accounting" "file format." "" acct(4)
.xx "" "ar: common archive" "file format." "" ar(4)
.xx "" "errfile: error-log" "file format." "" errfile(4)
.xx "" "pnch:" "file format for card images." "" pnch(4)
.xx "" "intro: introduction to" "file formats." "" intro(4)
.xx "" "manipulate line number entries of a common object" "file function." "ldlread, ldlinit, ldlitem:" ldlread(3X)
.xx "" "get: get a version of an SCCS" "file." "" get(1)
.xx "" "group: group" "file." "" group(4)
.xx "" "filehdr:" "file header for common object files." "" filehdr(4)
.xx "" "ldfhread: read the" "file header of a common object file." "" ldfhread(3X)
.xx "" "ldohseek: seek to the optional" "file header of a common object file." "" ldohseek(3X)
.xx "" "split: split a" "file into pieces." "" split(1)
.xx "" "issue: issue identification" "file." "" issue(4)
.xx "" "read the archive header of a member of an archive" "file." "ldahread:" ldahread(3X)
.xx "" "ldclose, ldaclose: close a common object" "file." "" ldclose(3X)
.xx "" "ldfhread: read the file header of a common object" "file." "" ldfhread(3X)
.xx "" "ldgetname: retrieve symbol name for object" "file." "" ldgetname(3X)
.xx "" "line number entries of a section of a common object" "file." "ldlseek, ldnlseek: seek to" ldlseek(3X)
.xx "" "seek to the optional file header of a common object" "file." "ldohseek:" ldohseek(3X)
.xx "" "relocation entries of a section of a common object" "file." "ldrseek, ldnrseek: seek to" ldrseek(3X)
.xx "" "an indexed\/named section header of a common object" "file." "ldshread, ldnshread: read" ldshread(3X)
.xx "" "to an indexed\/named section of a common object" "file." "ldsseek, ldnsseek: seek" ldsseek(3X)
.xx "" "index of a symbol table entry of a common object" "file." "ldtbindex: compute the" ldtbindex(3X)
.xx "" "an indexed symbol table entry of a common object" "file." "ldtbread: read" ldtbread(3X)
.xx "" "seek to the symbol table of a common object" "file." "ldtbseek:" ldtbseek(3X)
.xx "" "linenum: line number entries in a common object" "file." "" linenum(4)
.xx "" "link: link to a" "file." "" link(2)
.xx "" "mknod: build special" "file." "" mknod(1M)
.xx "" "mknod: make a directory, or a special or ordinary" "file." "" mknod(2)
.xx "" "newform: change the format of a text" "file." "" newform(1)
.xx "" "nm: print name list of common object" "file." "" nm(1)
.xx "" "null: the null" "file." "" null(7)
.xx "" "ttyslot: find the slot in the utmp" "file of the current user." "" ttyslot(3C)
.xx "" "fuser: identify processes using a" "file or file structure." "" fuser(1M)
.xx "" "creat: create a new" "file or rewrite an existing one." "" creat(2)
.xx "" "passwd: password" "file." "" passwd(4)
.xx "" "lines of several files or subsequent lines of one" "file." "paste: merge same" paste(1)
.xx "" "fseek, rewind, ftell: reposition a" "file pointer in a stream." "" fseek(3S)
.xx "" "lseek: move read/write" "file pointer." "" lseek(2)
.xx "" "prs: print an SCCS" "file." "" prs(1)
.xx "" "read: read from" "file." "" read(2)
.xx "" "reloc: relocation information for a common object" "file." "" reloc(4)
.xx "" "rmdel: remove a delta from an SCCS" "file." "" rmdel(1)
.xx "" "bfs: big" "file scanner." "" bfs(1)
.xx "" "sccsdiff: compare two versions of an SCCS" "file." "" sccsdiff(1)
.xx "" "sccsfile: format of SCCS" "file." "" sccsfile(4)
.xx "" "scnhdr: section header for a common object" "file." "" scnhdr(4)
.xx "" "stat, fstat: get" "file status." "" stat(2)
.xx "" "symbol and line number information from an object" "file." "strip: strip" strip(1)
.xx "" "fuser: identify processes using a file or" "file structure." "" fuser(1M)
.xx "" "sum: print checksum and block count of a" "file." "" sum(1)
.xx "" "syms: common object" "file symbol table format." "" syms(4)
.xx "" "filesave, tapesave: daily/weekly 5)" "file system backup." "" filesave(1M)
.xx "" "fsba:" "file system block analyzer." "" fsba(1M)
.xx "" "checkall: faster" "file system checking procedure." "" checkall(1M)
.xx "repair." "fsck, fsck1b, dfsck:" "file system consistency check and interactive" "" fsck(1M)
.xx "" "fsdb, fsdb1b:" "file system debugger." "" fsdb(1M)
.xx "" "f\&f: list filenames and statistics for a" "file system." "" ff(1M)
.xx "" "" "file system: format of system volume." "" fs(4)
.xx "" "mkfs, omkfs: construct a" "file system." "" mkfs(1M)
.xx "" "mount, umount: mount and dismount" "file system." "" mount(1M)
.xx "" "mount: mount a" "file system." "" mount(2)
.xx "" "ustat: get" "file system statistics." "" ustat(2)
.xx "" "mnttab: mounted" "file system table." "" mnttab(4)
.xx "" "umount: unmount a" "file system." "" umount(2)
.xx "" "dcopy: copy" "file systems for optimal access time." "" dcopy(1M)
.xx "" "checklist: list of" "file systems processed by fsck." "" checklist(4)
.xx "" "volcopy, labelit: copy" "file systems with label checking." "" volcopy(1M)
.xx "" "tail: deliver the last part of a" "file." "" tail(1)
.xx "" "tmpfile: create a temporary" "file." "" tmpfile(3S)
.xx "" "tmpnam, tempnam: create a name for a temporary" "file." "" tmpnam(3S)
.xx "" "touch: update access and modification times of a" "file." "" touch(1)
.xx "" "ftw: walk a" "file tree." "" ftw(3C)
.xx "" "file: determine" "file type." "" file(1)
.xx "" "unget: undo a previous get of an SCCS" "file." "" unget(1)
.xx "" "uniq: report repeated lines in a" "file." "" uniq(1)
.xx "" "val: validate SCCS" "file." "" val(1)
.xx "" "write: write on a" "file." "" write(2)
.xx "" "umask: set" "file-creation mode mask." "" umask(1)
.xx "" "" "filehdr: file header for common object files." "" filehdr(4)
.xx "" "ctermid: generate" "filename for terminal." "" ctermid(3S)
.xx "" "mktemp: make a unique" "filename." "" mktemp(3C)
.xx "" "f\&f: list" "filenames and statistics for a file system." "" ff(1M)
.xx "" "ferror, feof, clearerr," "fileno: stream status inquiries." "" ferror(3S)
.xx "" "acctcom: search and print process accounting" "file(s)." "" acctcom(1)
.xx "" "acctmerg: merge or add total accounting" "files." "" acctmerg(1M)
.xx "" "admin: create and administer SCCS" "files." "" admin(1)
.xx "" "bdiff: file comparator for large" "files." "" bdiff(1)
.xx "" "fscv: convert" "files between M68000 and VAX-11/780 processors." "" fscv(1M)
.xx "" "cat: concatenate and print" "files." "" cat(1)
.xx "" "cmp: compare two" "files." "" cmp(1)
.xx "" "comm: select or reject lines common to two sorted" "files." "" comm(1)
.xx "" "cp, ln, mv: copy, link or move" "files." "" cp(1)
.xx "" "diffmk: mark differences between" "files." "" diffmk(1)
.xx "" "dk: disk device special" "files." "" dk(7)
.xx "" "filehdr: file header for common object" "files." "" filehdr(4)
.xx "" "find: find" "files." "" find(1)
.xx "" "frec: recover" "files from a backup tape." "" frec(1M)
.xx "" "fspec: format specification in text" "files." "" fspec(4)
.xx "" "fsplit: split f77, ratfor, or ef\&l" "files." "" fsplit(1)
.xx "" "graphical primitive string, format of graphical" "files." "gps:" gps(4)
.xx "" "intro: introduction to special" "files." "" intro(7)
.xx "" "ld: link editor for common object" "files." "" ld(1)
.xx "" "scat: concatenate and print" "files on synchronous printer." "" scat(1)
.xx "" "rm, rmdir: remove" "files or directories." "" rm(1)
.xx "" "paste: merge same lines of several" "files or subsequent lines of one file." "" paste(1)
.xx "" "pack, pcat, unpack: compress and expand" "files." "" pack(1)
.xx "" "pr: print" "files." "" pr(1)
.xx "" "size: print section sizes of common object" "files." "" size(1)
.xx "" "sort: sort and/or merge" "files." "" sort(1)
.xx "" "what: identify SCCS" "files." "" what(1)
.xx "backup." "" "filesave, tapesave: daily/weekly 5) file system" "" filesave(1M)
.xx "" "greek: select terminal" "filter." "" greek(1)
.xx "" "nl: line numbering" "filter." "" nl(1)
.xx "" "col:" "filter reverse line-feeds." "" col(1)
.xx "" "hardcopy, tekset, td: graphical device routines and" "filters." "hpd, erase," gdev(1G)
.xx "" "tplot: graphics" "filters." "" tplot(1G)
.xx "" "" "finc: fast incremental backup." "" finc(1M)
.xx "" "find:" "find files." "" find(1)
.xx "" "" "find: find files." "" find(1)
.xx "" "hyphen:" "find hyphenated words." "" hyphen(1)
.xx "" "ttyname, isatty:" "find name of a terminal." "" ttyname(3C)
.xx "" "lorder:" "find ordering relation for an object library." "" lorder(1)
.xx "" "spell, hashmake, spellin, hashcheck:" "find spelling errors." "" spell(1)
.xx "" "ttyslot:" "find the slot in the utmp file of the current user." "" ttyslot(3C)
.xx "" "tee: pipe" "fitting." "" tee(1)
.xx "" "" "fl8: 8 inch Floppy Disk Drive." "" fl8(7)
.xx "explicit Fortran type/" "int, ifix, idint, real," "float, sngl, dble, cmplx, dcmplx, ichar, char:" "" ftype(3F)
.xx "" "atof: convert ASCII string to" "floating-point number." "" atof(3C)
.xx "" "ecvt, fcvt, gcvt: convert" "floating-point number to string." "" ecvt(3C)
.xx "" "frexp, ldexp, modf: manipulate parts of" "floating-point numbers." "" frexp(3C)
.xx "absolute value functions." "" "floor, ceil, fmod, fabs: floor, ceiling, remainder," "" floor(3M)
.xx "functions." "floor, ceil, fmod, fabs:" "floor, ceiling, remainder, absolute value" "" floor(3M)
.xx "" "fl8: 8 inch" "Floppy Disk Drive." "" fl8(7)
.xx "" "cflow: generate C" "flow graph." "" cflow(1)
.xx "" "fclose, fflush: close or" "flush a stream." "" fclose(3S)
.xx "value functions." "floor, ceil," "fmod, fabs: floor, ceiling, remainder, absolute" "" floor(3M)
.xx "" "" "fopen, freopen, fdopen: open a stream." "" fopen(3S)
.xx "" "" "fork: create a new process." "" fork(2)
.xx "" "acct: per-process accounting file" "format." "" acct(4)
.xx "" "ar: common archive file" "format." "" ar(4)
.xx "" "errfile: error-log file" "format." "" errfile(4)
.xx "" "pnch: file" "format for card images." "" pnch(4)
.xx "" "eqn, neqn, checkeq:" "format mathematical text for nroff or troff." "" eqn(1)
.xx "" "newform: change the" "format of a text file." "" newform(1)
.xx "" "inode:" "format of an inode." "" inode(4)
.xx "" "core:" "format of core image file." "" core(4)
.xx "" "cpio:" "format of cpio archive." "" cpio(4)
.xx "" "dir:" "format of directories." "" dir(4)
.xx "" "gps: graphical primitive string," "format of graphical files." "" gps(4)
.xx "" "sccsfile:" "format of SCCS file." "" sccsfile(4)
.xx "" "file system:" "format of system volume." "" fs(4)
.xx "" "fspec:" "format specification in text files." "" fspec(4)
.xx "" "syms: common object file symbol table" "format." "" syms(4)
.xx "" "tbl:" "format tables for nroff or troff." "" tbl(1)
.xx "" "nroff:" "format text." "" nroff(1)
.xx "" "intro: introduction to file" "formats." "" intro(4)
.xx "" "utmp, wtmp: utmp and wtmp entry" "formats." "" utmp(4)
.xx "" "scanf, fscanf, sscanf: convert" "formatted input." "" scanf(3S)
.xx "" "printf, fprintf, sprintf: print" "formatted output." "" printf(3S)
.xx "" "mm, osdd, checkmm: print/check documents" "formatted with the MM macros." "" mm(1)
.xx "" "mptx: the macro package for" "formatting a permuted index." "" mptx(5)
.xx "" "mm: the MM macro package for" "formatting documents." "" mm(5)
.xx "" "mosd: the OSDD adapter macro package for" "formatting documents." "" mosd(5)
.xx "" "man: macros for" "formatting entries in this manual." "" man(5)
.xx "" "f77:" "Fortran 77 compiler." "" f77(1)
.xx "" "abs, iabs, dabs, cabs, zabs:" "Fortran absolute value." "" abs(3F)
.xx "" "signal: specify" "Fortran action on receipt of a system signal." "" signal(3F)
.xx "" "acos, dacos:" "Fortran arccosine intrinsic function." "" acos(3F)
.xx "" "asin, dasin:" "Fortran arcsine intrinsic function." "" asin(3F)
.xx "" "atan2, datan2:" "Fortran arctangent intrinsic function." "" atan2(3F)
.xx "" "atan, datan:" "Fortran arctangent intrinsic function." "" atan(3F)
.xx "" "and, or, xor, not, lshift, rshift:" "Fortran bitwise boolean functions." "" bool(3F)
.xx "" "getarg: return" "Fortran command-line argument." "" getarg(3F)
.xx "" "log10, alog10, dlog10:" "Fortran common logarithm intrinsic function." "" log10(3F)
.xx "" "conjg, dconjg:" "Fortran complex conjugate intrinsic function." "" conjg(3F)
.xx "" "cos, dcos, ccos:" "Fortran cosine intrinsic function." "" cos(3F)
.xx "" "ratfor: rational" "Fortran dialect." "" ratfor(1)
.xx "" "getenv: return" "Fortran environment variable." "" getenv(3F)
.xx "" "exp, dexp, cexp:" "Fortran exponential intrinsic function." "" exp(3F)
.xx "" "cosh, dcosh:" "Fortran hyperbolic cosine intrinsic function." "" cosh(3F)
.xx "" "sinh, dsinh:" "Fortran hyperbolic sine intrinsic function." "" sinh(3F)
.xx "" "tanh, dtanh:" "Fortran hyperbolic tangent intrinsic function." "" tanh(3F)
.xx "" "aimag, dimag:" "Fortran imaginary part of complex argument." "" aimag(3F)
.xx "" "aint, dint:" "Fortran integer part intrinsic function." "" aint(3F)
.xx "" "ef\&l: Extended" "Fortran Language." "" efl(1)
.xx "" "max, max0, amax0, max1, amax1, dmax1:" "Fortran maximum-value functions." "" max(3F)
.xx "" "min, min0, amin0, min1, amin1, dmin1:" "Fortran minimum-value functions." "" min(3F)
.xx "" "log, alog, dlog, clog:" "Fortran natural logarithm intrinsic function." "" log(3F)
.xx "" "anint, dnint, nint, idnint:" "Fortran nearest integer functions." "" round(3F)
.xx "" "abort: terminate" "Fortran program." "" abort(3F)
.xx "" "mod, amod, dmod:" "Fortran remaindering intrinsic functions." "" mod(3F)
.xx "" "sin, dsin, csin:" "Fortran sine intrinsic function." "" sin(3F)
.xx "" "sqrt, dsqrt, csqrt:" "Fortran square root intrinsic function." "" sqrt(3F)
.xx "" "len: return length of" "Fortran string." "" len(3F)
.xx "" "index: return location of" "Fortran substring." "" index(3F)
.xx "" "system: issue a shell command from" "Fortran." "" system(3F)
.xx "" "tan, dtan:" "Fortran tangent intrinsic function." "" tan(3F)
.xx "" "mclock: return" "Fortran time accounting." "" mclock(3F)
.xx "" "sign, isign, dsign:" "Fortran transfer-of-sign intrinsic function." "" sign(3F)
.xx "" "sngl, dble, cmplx, dcmplx, ichar, char: explicit" "Fortran type conversion." "/ifix, idint, real, float," ftype(3F)
.xx "" "srand, rand:" "Fortran uniform random-number generator." "" rand(3F)
.xx "" "printf," "fprintf, sprintf: print formatted output." "" printf(3S)
.xx "" "putc, putchar," "fputc, putw: put character or word on a stream." "" putc(3S)
.xx "" "puts," "fputs: put a string on a stream." "" puts(3S)
.xx "" "" "fread, fwrite: binary input/output." "" fread(3S)
.xx "" "" "frec: recover files from a backup tape." "" frec(1M)
.xx "" "df: report number of" "free disk blocks." "" df(1M)
.xx "" "malloc," "free, realloc, calloc: main memory allocator." "" malloc(3C)
.xx "" "fopen," "freopen, fdopen: open a stream." "" fopen(3S)
.xx "floating-point numbers." "" "frexp, ldexp, modf: manipulate parts of" "" frexp(3C)
.xx "" "frec: recover files" "from a backup tape." "" frec(1M)
.xx "" "gets, fgets: get a string" "from a stream." "" gets(3S)
.xx "" "strip: strip symbol and line number information" "from an object file." "" strip(1)
.xx "" "rmdel: remove a delta" "from an SCCS file." "" rmdel(1)
.xx "" "getopt: get option letter" "from argument vector." "" getopt(3C)
.xx "" "errdead: extract error records" "from dump." "" errdead(1M)
.xx "" "read: read" "from file." "" read(2)
.xx "" "system: issue a shell command" "from Fortran." "" system(3F)
.xx "" "ncheck: generate names" "from i-numbers." "" ncheck(1M)
.xx "" "nlist: get entries" "from name list." "" nlist(3C)
.xx "" "acctcms: command summary" "from per-process accounting records." "" acctcms(1M)
.xx "" "getc, getchar, fgetc, getw: get character or word" "from stream." "" getc(3S)
.xx "" "getpw: get name" "from UID." "" getpw(3C)
.xx "" "" "fsba: file system block analyzer." "" fsba(1M)
.xx "" "scanf," "fscanf, sscanf: convert formatted input." "" scanf(3S)
.xx "" "checklist: list of file systems processed by" "fsck." "" checklist(4)
.xx "and interactive repair." "" "fsck, fsck1b, dfsck: file system consistency check" "" fsck(1M)
.xx "interactive repair." "fsck," "fsck1b, dfsck: file system consistency check and" "" fsck(1M)
.xx "processors." "" "fscv: convert files between M68000 and VAX-11/780" "" fscv(1M)
.xx "" "" "fsdb, fsdb1b: file system debugger." "" fsdb(1M)
.xx "" "fsdb," "fsdb1b: file system debugger." "" fsdb(1M)
.xx "a stream." "" "fseek, rewind, ftell: reposition a file pointer in" "" fseek(3S)
.xx "" "" "fspec: format specification in text files." "" fspec(4)
.xx "" "" "fsplit: split f77, ratfor, or ef\&l files." "" fsplit(1)
.xx "" "stat," "fstat: get file status." "" stat(2)
.xx "" "fseek, rewind," "ftell: reposition a file pointer in a stream." "" fseek(3S)
.xx "" "" "ftw: walk a file tree." "" ftw(3C)
.xx "" "acos, dacos: Fortran arccosine intrinsic" "function." "" acos(3F)
.xx "" "aint, dint: Fortran integer part intrinsic" "function." "" aint(3F)
.xx "" "erf, erfc: error" "function and complementary error function." "" erf(3M)
.xx "" "asin, dasin: Fortran arcsine intrinsic" "function." "" asin(3F)
.xx "" "atan2, datan2: Fortran arctangent intrinsic" "function." "" atan2(3F)
.xx "" "atan, datan: Fortran arctangent intrinsic" "function." "" atan(3F)
.xx "" "conjg, dconjg: Fortran complex conjugate intrinsic" "function." "" conjg(3F)
.xx "" "cos, dcos, ccos: Fortran cosine intrinsic" "function." "" cos(3F)
.xx "" "cosh, dcosh: Fortran hyperbolic cosine intrinsic" "function." "" cosh(3F)
.xx "" "erf, erfc: error function and complementary error" "function." "" erf(3M)
.xx "" "exp, dexp, cexp: Fortran exponential intrinsic" "function." "" exp(3F)
.xx "" "gamma: log gamma" "function." "" gamma(3M)
.xx "" "hypot: Euclidean distance" "function." "" hypot(3M)
.xx "" "line number entries of a common object file" "function." "ldlread, ldlinit, ldlitem: manipulate" ldlread(3X)
.xx "" "alog10, dlog10: Fortran common logarithm intrinsic" "function." "log10," log10(3F)
.xx "" "dlog, clog: Fortran natural logarithm intrinsic" "function." "log, alog," log(3F)
.xx "" "matherr: error-handling" "function." "" matherr(3M)
.xx "" "isign, dsign: Fortran transfer-of-sign intrinsic" "function." "sign," sign(3F)
.xx "" "sin, dsin, csin: Fortran sine intrinsic" "function." "" sin(3F)
.xx "" "sinh, dsinh: Fortran hyperbolic sine intrinsic" "function." "" sinh(3F)
.xx "" "sqrt, dsqrt, csqrt: Fortran square root intrinsic" "function." "" sqrt(3F)
.xx "" "tan, dtan: Fortran tangent intrinsic" "function." "" tan(3F)
.xx "" "tanh, dtanh: Fortran hyperbolic tangent intrinsic" "function." "" tanh(3F)
.xx "" "j0, j1, jn, y0, y1, yn: Bessel" "functions." "" bessel(3M)
.xx "" "xor, not, lshift, rshift: Fortran bitwise boolean" "functions." "and, or," bool(3F)
.xx "" "sqrt: exponential, logarithm, power, square root" "functions." "exp, log, log10, pow," exp(3M)
.xx "" "fabs: floor, ceiling, remainder, absolute value" "functions." "floor, ceil, fmod," floor(3M)
.xx "" "amax0, max1, amax1, dmax1: Fortran maximum-value" "functions." "max, max0," max(3F)
.xx "" "amin0, min1, amin1, dmin1: Fortran minimum-value" "functions." "min, min0," min(3F)
.xx "" "mod, amod, dmod: Fortran remaindering intrinsic" "functions." "" mod(3F)
.xx "" "300, 300s: handle special" "functions of DASI 300 and 300s terminals." "" 300(1)
.xx "" "hp: handle special" "functions of HP 2640 and 2621-series terminals." "" hp(1)
.xx "" "450: handle special" "functions of the DASI 450 terminal." "" 450(1)
.xx "" "anint, dnint, nint, idnint: Fortran nearest integer" "functions." "" round(3F)
.xx "" "sinh, cosh, tanh: hyperbolic" "functions." "" sinh(3M)
.xx "" "cos, tan, asin, acos, atan, atan2: trigonometric" "functions." "sin," trig(3M)
.xx "structure." "" "fuser: identify processes using a file or file" "" fuser(1M)
.xx "" "fread," "fwrite: binary input/output." "" fread(3S)
.xx "records." "" "fwtmp, wtmpfix: manipulate connect accounting" "" fwtmp(1M)
.xx "" "jotto: secret word" "game." "" jotto(6)
.xx "" "moo: guessing" "game." "" moo(6)
.xx "" "back: the" "game of backgammon." "" back(6)
.xx "" "bj: the" "game of black jack." "" bj(6)
.xx "" "chess: the" "game of chess." "" chess(6)
.xx "" "craps: the" "game of craps." "" craps(6)
.xx "" "reversi: a" "game of dramatic reversals." "" reversi(6)
.xx "" "wump: the" "game of hunt-the-wumpus." "" wump(6)
.xx "" "intro: introduction to" "games." "" intro(6)
.xx "" "gamma: log" "gamma function." "" gamma(3M)
.xx "" "" "gamma: log gamma function." "" gamma(3M)
.xx "" "ecvt, fcvt," "gcvt: convert floating-point number to string." "" ecvt(3C)
.xx "" "" "ged: graphical editor." "" ged(1G)
.xx "" "maze:" "generate a maze." "" maze(6)
.xx "" "abort:" "generate an IOT fault." "" abort(3C)
.xx "" "cflow:" "generate C flow graph." "" cflow(1)
.xx "" "cxref:" "generate C program cross-reference." "" cxref(1)
.xx "" "crypt, setkey, encrypt:" "generate DES encryption." "" crypt(3C)
.xx "" "makekey:" "generate encryption key." "" makekey(1)
.xx "" "ctermid:" "generate filename for terminal." "" ctermid(3S)
.xx "" "ncheck:" "generate names from i-numbers." "" ncheck(1M)
.xx "" "lex:" "generate programs for simple lexical tasks." "" lex(1)
.xx "" "/mrand48, jrand48, srand48, seed48, lcong48:" "generate uniformly distributed pseudo-random/" "" drand48(3C)
.xx "" "rand, srand: simple random-number" "generator." "" rand(3C)
.xx "" "srand, rand: Fortran uniform random-number" "generator." "" rand(3F)
.xx "" "gets, fgets:" "get a string from a stream." "" gets(3S)
.xx "" "get:" "get a version of an SCCS file." "" get(1)
.xx "" "ulimit:" "get and set user limits." "" ulimit(2)
.xx "" "cuserid:" "get character login name of the user." "" cuserid(3S)
.xx "" "getc, getchar, fgetc, getw:" "get character or word from stream." "" getc(3S)
.xx "" "nlist:" "get entries from name list." "" nlist(3C)
.xx "" "umask: set and" "get file creation mask." "" umask(2)
.xx "" "stat, fstat:" "get file status." "" stat(2)
.xx "" "ustat:" "get file system statistics." "" ustat(2)
.xx "" "" "get: get a version of an SCCS file." "" get(1)
.xx "" "getlogin:" "get login name." "" getlogin(3C)
.xx "" "logname:" "get login name." "" logname(1)
.xx "" "msgget:" "get message queue." "" msgget(2)
.xx "" "getpw:" "get name from UID." "" getpw(3C)
.xx "" "uname:" "get name of current operating system." "" uname(2)
.xx "" "unget: undo a previous" "get of an SCCS file." "" unget(1)
.xx "" "getopt:" "get option letter from argument vector." "" getopt(3C)
.xx "" "getpwent, getpwuid, getpwnam, setpwent, endpwent:" "get password file entry." "" getpwent(3C)
.xx "" "getcwd:" "get pathname of current working directory." "" getcwd(3C)
.xx "" "times:" "get process and child process times." "" times(2)
.xx "" "getpid, getpgrp, getppid:" "get process, process group, and parent process IDs." "" getpid(2)
.xx "effective group/" "getuid, geteuid, getgid, getegid:" "get real user, effective user, real group, and" "" getuid(2)
.xx "" "semget:" "get set of semaphores." "" semget(2)
.xx "" "shmget:" "get shared memory segment." "" shmget(2)
.xx "" "tty:" "get the terminal's name." "" tty(1)
.xx "" "time:" "get time." "" time(2)
.xx "" "" "getarg: return Fortran command-line argument." "" getarg(3F)
.xx "from stream." "" "getc, getchar, fgetc, getw: get character or word" "" getc(3S)
.xx "stream." "getc," "getchar, fgetc, getw: get character or word from" "" getc(3S)
.xx "" "" "getcwd: get pathname of current working directory." "" getcwd(3C)
.xx "and effective group IDs." "getuid, geteuid, getgid," "getegid: get real user, effective user, real group," "" getuid(2)
.xx "" "" "getenv: return Fortran environment variable." "" getenv(3F)
.xx "" "" "getenv: return value for environment name." "" getenv(3C)
.xx "user, real group, and effective group IDs." "getuid," "geteuid, getgid, getegid: get real user, effective" "" getuid(2)
.xx "real group, and effective group/" "getuid, geteuid," "getgid, getegid: get real user, effective user," "" getuid(2)
.xx "obtain." "" "getgrent, getgrgid, getgrnam, setgrent, endgrent:" "" getgrent(3C)
.xx "" "getgrent," "getgrgid, getgrnam, setgrent, endgrent: obtain." "" getgrent(3C)
.xx "" "getgrent, getgrgid," "getgrnam, setgrent, endgrent: obtain." "" getgrent(3C)
.xx "" "" "getlogin: get login name." "" getlogin(3C)
.xx "" "" "getopt: get option letter from argument vector." "" getopt(3C)
.xx "" "" "getopt: parse command options." "" getopt(1)
.xx "" "" "getpass: read a password." "" getpass(3C)
.xx "parent process IDs." "getpid," "getpgrp, getppid: get process, process group, and" "" getpid(2)
.xx "group, and parent process IDs." "" "getpid, getpgrp, getppid: get process, process" "" getpid(2)
.xx "process IDs." "getpid, getpgrp," "getppid: get process, process group, and parent" "" getpid(2)
.xx "" "" "getpw: get name from UID." "" getpw(3C)
.xx "get password file entry." "" "getpwent, getpwuid, getpwnam, setpwent, endpwent:" "" getpwent(3C)
.xx "entry." "getpwent, getpwuid," "getpwnam, setpwent, endpwent: get password file" "" getpwent(3C)
.xx "password file entry." "getpwent," "getpwuid, getpwnam, setpwent, endpwent: get" "" getpwent(3C)
.xx "" "" "gets, fgets: get a string from a stream." "" gets(3S)
.xx "" "gettydefs: speed and terminal settings used by" "getty." "" gettydefs(4)
.xx "discipline." "" "getty: set terminal type, modes, speed, and line" "" getty(1M)
.xx "" "ct: spawn" "getty to a remote terminal." "" ct(1C)
.xx "getty." "" "gettydefs: speed and terminal settings used by" "" gettydefs(4)
.xx "effective user, real group, and effective group/" "" "getuid, geteuid, getgid, getegid: get real user," "" getuid(2)
.xx "endutent, utmpname: access utmp file entry." "" "getutent, getutid, getutline, pututline, setutent," "" getut(3C)
.xx "utmpname: access utmp file entry." "getutent," "getutid, getutline, pututline, setutent, endutent," "" getut(3C)
.xx "access utmp file entry." "getutent, getutid," "getutline, pututline, setutent, endutent, utmpname:" "" getut(3C)
.xx "" "getc, getchar, fgetc," "getw: get character or word from stream." "" getc(3S)
.xx "string." "ctime, localtime," "gmtime, asctime, tzset: convert date and time to" "" ctime(3C)
.xx "" "setjmp, longjmp: non-local" "goto." "" setjmp(3C)
.xx "graphical files." "" "gps: graphical primitive string, format of" "" gps(4)
.xx "" "cflow: generate C flow" "graph." "" cflow(1)
.xx "" "" "graph: draw a graph." "" graph(1G)
.xx "" "graph: draw a" "graph." "" graph(1G)
.xx "" "sag: system activity" "graph." "" sag(1G)
.xx "" "graphics: access" "graphical and numerical commands." "" graphics(1G)
.xx "" "stat: statistical network useful with" "graphical commands." "" stat(1G)
.xx "" "hpd, erase, hardcopy, tekset, td:" "graphical device routines and filters." "" gdev(1G)
.xx "" "ged:" "graphical editor." "" ged(1G)
.xx "" "gps: graphical primitive string, format of" "graphical files." "" gps(4)
.xx "files." "gps:" "graphical primitive string, format of graphical" "" gps(4)
.xx "" "toc:" "graphical table of contents routines." "" toc(1G)
.xx "" "gutil:" "graphical utilities." "" gutil(1G)
.xx "" "" "graphics: access graphical and numerical commands." "" graphics(1G)
.xx "" "tplot:" "graphics filters." "" tplot(1G)
.xx "" "greek:" "graphics for the extended TTY-37 type-box." "" greek(5)
.xx "" "plot:" "graphics interface." "" plot(4)
.xx "" "plot:" "graphics interface subroutines." "" plot(3X)
.xx "" "" "greek: graphics for the extended TTY-37 type-box." "" greek(5)
.xx "" "" "greek: select terminal filter." "" greek(1)
.xx "" "" "grep, egrep, fgrep: search a file for a pattern." "" grep(1)
.xx "" "getegid: get real user, effective user, real" "group, and effective group IDs." "/geteuid, getgid," getuid(2)
.xx "" "getpid, getpgrp, getppid: get process, process" "group, and parent process IDs." "" getpid(2)
.xx "" "chown, chgrp: change owner or" "group." "" chown(1)
.xx "" "group:" "group file." "" group(4)
.xx "" "" "group: group file." "" group(4)
.xx "" "setpgrp: set process" "group ID." "" setpgrp(2)
.xx "" "id: print user and" "group IDs and names." "" id(1)
.xx "" "user, effective user, real group, and effective" "group IDs." "/geteuid, getgid, getegid: get real" getuid(2)
.xx "" "setuid, setgid: set user and" "group IDs." "" setuid(2)
.xx "" "newgrp: log in to a new" "group." "" newgrp(1)
.xx "" "chown: change owner and" "group of a file." "" chown(2)
.xx "" "kill: send a signal to a process or a" "group of processes." "" kill(2)
.xx "" "make: maintain, update, and regenerate" "groups of programs." "" make(1)
.xx "" "pwck," "grpck: password/group file checkers." "" pwck(1M)
.xx "" "ssignal," "gsignal: software signals." "" ssignal(3C)
.xx "" "hangman:" "guess the word." "" hangman(6)
.xx "" "moo:" "guessing game." "" moo(6)
.xx "" "" "gutil: graphical utilities." "" gutil(1G)
.xx "terminals." "300, 300s:" "handle special functions of DASI 300 and 300s" "" 300(1)
.xx "terminals." "hp:" "handle special functions of HP 2640 and 2621-series" "" hp(1)
.xx "" "450:" "handle special functions of the DASI 450 terminal." "" 450(1)
.xx "" "" "hangman: guess the word." "" hangman(6)
.xx "" "nohup: run a command immune to" "hangups and quits." "" nohup(1)
.xx "filters." "hpd, erase," "hardcopy, tekset, td: graphical device routines and" "" gdev(1G)
.xx "" "hsearch, hcreate, hdestroy: manage" "hash search tables." "" hsearch(3C)
.xx "" "spell, hashmake, spellin," "hashcheck: find spelling errors." "" spell(1)
.xx "" "spell," "hashmake, spellin, hashcheck: find spelling errors." "" spell(1)
.xx "" "hsearch," "hcreate, hdestroy: manage hash search tables." "" hsearch(3C)
.xx "" "hsearch, hcreate," "hdestroy: manage hash search tables." "" hsearch(3C)
.xx "" "aouthdr: optional aout" "header." "" aouthdr(4)
.xx "" "scnhdr: section" "header for a common object file." "" scnhdr(4)
.xx "" "filehdr: file" "header for common object files." "" filehdr(4)
.xx "" "ldfhread: read the file" "header of a common object file." "" ldfhread(3X)
.xx "" "ldohseek: seek to the optional file" "header of a common object file." "" ldohseek(3X)
.xx "" "ldshread, ldnshread: read an indexed\/named section" "header of a common object file." "" ldshread(3X)
.xx "" "ldahread: read the archive" "header of a member of an archive file." "" ldahread(3X)
.xx "" "" "help: ask for help." "" help(1)
.xx "" "help: ask for" "help." "" help(1)
.xx "" "hp: handle special functions of" "HP 2640 and 2621-series terminals." "" hp(1)
.xx "2621-series terminals." "" "hp: handle special functions of HP 2640 and" "" hp(1)
.xx "routines and filters." "" "hpd, erase, hardcopy, tekset, td: graphical device" "" gdev(1G)
.xx "tables." "" "hsearch, hcreate, hdestroy: manage hash search" "" hsearch(3C)
.xx "" "wump: the game of" "hunt-the-wumpus." "" wump(6)
.xx "" "cosh, dcosh: Fortran" "hyperbolic cosine intrinsic function." "" cosh(3F)
.xx "" "sinh, cosh, tanh:" "hyperbolic functions." "" sinh(3M)
.xx "" "sinh, dsinh: Fortran" "hyperbolic sine intrinsic function." "" sinh(3F)
.xx "" "tanh, dtanh: Fortran" "hyperbolic tangent intrinsic function." "" tanh(3F)
.xx "" "" "hyphen: find hyphenated words." "" hyphen(1)
.xx "" "hyphen: find" "hyphenated words." "" hyphen(1)
.xx "" "" "hypot: Euclidean distance function." "" hypot(3M)
.xx "" "abs," "iabs, dabs, cabs, zabs: Fortran absolute value." "" abs(3F)
.xx "" "/idint, real, float, sngl, dble, cmplx, dcmplx," "ichar, char: explicit Fortran type conversion." "" ftype(3F)
.xx "" "a message queue, semaphore set or shared memory" "id." "ipcrm: remove" ipcrm(1)
.xx "" "" "id: print user and group IDs and names." "" id(1)
.xx "" "setpgrp: set process group" "ID." "" setpgrp(2)
.xx "" "issue: issue" "identification file." "" issue(4)
.xx "" "fuser:" "identify processes using a file or file structure." "" fuser(1M)
.xx "" "what:" "identify SCCS files." "" what(1)
.xx "ichar, char: explicit Fortran type/" "int, ifix," "idint, real, float, sngl, dble, cmplx, dcmplx," "" ftype(3F)
.xx "" "anint, dnint, nint," "idnint: Fortran nearest integer functions." "" round(3F)
.xx "" "id: print user and group" "IDs and names." "" id(1)
.xx "" "get process, process group, and parent process" "IDs." "getpid, getpgrp, getppid:" getpid(2)
.xx "" "effective user, real group, and effective group" "IDs." "/geteuid, getgid, getegid: get real user," getuid(2)
.xx "" "setuid, setgid: set user and group" "IDs." "" setuid(2)
.xx "dcmplx, ichar, char: explicit Fortran type/" "int," "ifix, idint, real, float, sngl, dble, cmplx," "" ftype(3F)
.xx "" "core: format of core" "image file." "" core(4)
.xx "" "crash: examine system" "images." "" crash(1M)
.xx "" "pnch: file format for card" "images." "" pnch(4)
.xx "" "aimag, dimag: Fortran" "imaginary part of complex argument." "" aimag(3F)
.xx "" "nohup: run a command" "immune to hangups and quits." "" nohup(1)
.xx "" "fl8: 8" "inch Floppy Disk Drive." "" fl8(7)
.xx "" "finc: fast" "incremental backup." "" finc(1M)
.xx "" "sputl, sgetl: access long integer data in a machine" "independent fashion.." "" sputl(3X)
.xx "" "tgetnum, tgetflag, tgetstr, tgoto, tputs: terminal" "independent operation routines." "tgetent," termcap(3)
.xx "" "mptx: the macro package for formatting a permuted" "index." "" mptx(5)
.xx "file." "ldtbindex: compute the" "index of a symbol table entry of a common object" "" ldtbindex(3X)
.xx "" "ptx: permuted" "index." "" ptx(1)
.xx "" "" "index: return location of Fortran substring." "" index(3F)
.xx "" "ldtbread: read an" "indexed symbol table entry of a common object file." "" ldtbread(3X)
.xx "file." "ldshread, ldnshread: read an" "indexed\/named section header of a common object" "" ldshread(3X)
.xx "" "ldsseek, ldnsseek: seek to an" "indexed\/named section of a common object file." "" ldsseek(3X)
.xx "" "inittab: script for the" "init process." "" inittab(4)
.xx "" "" "init, telinit: process control initialization." "" init(1M)
.xx "" "init, telinit: process control" "initialization." "" init(1M)
.xx "" "brc, bcheckrc, rc, powerfail: system" "initialization shell scripts." "" brc(1M)
.xx "" "popen, pclose:" "initiate pipe to/from a process." "" popen(3S)
.xx "" "" "inittab: script for the init process." "" inittab(4)
.xx "" "clri: clear" "inode." "" clri(1M)
.xx "" "" "inode: format of an inode." "" inode(4)
.xx "" "inode: format of an" "inode." "" inode(4)
.xx "" "scanf, fscanf, sscanf: convert formatted" "input." "" scanf(3S)
.xx "" "ungetc: push character back into" "input stream." "" ungetc(3S)
.xx "" "fread, fwrite: binary" "input/output." "" fread(3S)
.xx "" "stdio: standard buffered" "input/output package." "" stdio(3S)
.xx "" "ferror, feof, clearerr, fileno: stream status" "inquiries." "" ferror(3S)
.xx "" "uustat: uucp status" "inquiry and job control." "" uustat(1C)
.xx "" "install:" "install commands." "" install(1M)
.xx "" "" "install: install commands." "" install(1M)
.xx "dcmplx, ichar, char: explicit Fortran type/" "" "int, ifix, idint, real, float, sngl, dble, cmplx," "" ftype(3F)
.xx "" "abs: return" "integer absolute value." "" abs(3C)
.xx "" "a64l, l64a: convert between long" "integer and base-64 ASCII string." "" a64l(3C)
.xx "" "sputl, sgetl: access long" "integer data in a machine independent fashion.." "" sputl(3X)
.xx "" "anint, dnint, nint, idnint: Fortran nearest" "integer functions." "" round(3F)
.xx "" "aint, dint: Fortran" "integer part intrinsic function." "" aint(3F)
.xx "" "strtol, atol, atoi: convert string to" "integer." "" strtol(3C)
.xx "" "l3tol, ltol3: convert between 3-byte" "integers and long integers." "" l3tol(3C)
.xx "" "ltol3: convert between 3-byte integers and long" "integers." "l3tol," l3tol(3C)
.xx "" "bcopy:" "interactive block copy." "" bcopy(1M)
.xx "" "fsck1b, dfsck: file system consistency check and" "interactive repair." "fsck," fsck(1M)
.xx "" "rjestat: RJE status report and" "interactive status console." "" rjestat(1C)
.xx "" "acia: Asynchronous Communications" "Interface Adapter." "" acia(7)
.xx "" "err: error-logging" "interface." "" err(7)
.xx "" "plot: graphics" "interface." "" plot(4)
.xx "" "plot: graphics" "interface subroutines." "" plot(3X)
.xx "" "termio: general terminal" "interface." "" termio(7)
.xx "" "tty: controlling terminal" "interface." "" tty(7)
.xx "" "spline:" "interpolate smooth curve." "" spline(1G)
.xx "" "asa:" "interpret ASA carriage control characters." "" asa(1)
.xx "" "sno: SNOBOL" "interpreter." "" sno(1)
.xx "" "pipe: create an" "interprocess channel." "" pipe(2)
.xx "" "ipcs: report" "inter-process communication facilities status." "" ipcs(1)
.xx "" "stdipc: standard" "interprocess communication package." "" stdipc(3C)
.xx "" "sleep: suspend execution for an" "interval." "" sleep(1)
.xx "" "sleep: suspend execution for" "interval." "" sleep(3C)
.xx "" "acos, dacos: Fortran arccosine" "intrinsic function." "" acos(3F)
.xx "" "aint, dint: Fortran integer part" "intrinsic function." "" aint(3F)
.xx "" "asin, dasin: Fortran arcsine" "intrinsic function." "" asin(3F)
.xx "" "atan2, datan2: Fortran arctangent" "intrinsic function." "" atan2(3F)
.xx "" "atan, datan: Fortran arctangent" "intrinsic function." "" atan(3F)
.xx "" "conjg, dconjg: Fortran complex conjugate" "intrinsic function." "" conjg(3F)
.xx "" "cos, dcos, ccos: Fortran cosine" "intrinsic function." "" cos(3F)
.xx "" "cosh, dcosh: Fortran hyperbolic cosine" "intrinsic function." "" cosh(3F)
.xx "" "exp, dexp, cexp: Fortran exponential" "intrinsic function." "" exp(3F)
.xx "" "log10, alog10, dlog10: Fortran common logarithm" "intrinsic function." "" log10(3F)
.xx "" "log, alog, dlog, clog: Fortran natural logarithm" "intrinsic function." "" log(3F)
.xx "" "sign, isign, dsign: Fortran transfer-of-sign" "intrinsic function." "" sign(3F)
.xx "" "sin, dsin, csin: Fortran sine" "intrinsic function." "" sin(3F)
.xx "" "sinh, dsinh: Fortran hyperbolic sine" "intrinsic function." "" sinh(3F)
.xx "" "sqrt, dsqrt, csqrt: Fortran square root" "intrinsic function." "" sqrt(3F)
.xx "" "tan, dtan: Fortran tangent" "intrinsic function." "" tan(3F)
.xx "" "tanh, dtanh: Fortran hyperbolic tangent" "intrinsic function." "" tanh(3F)
.xx "" "mod, amod, dmod: Fortran remaindering" "intrinsic functions." "" mod(3F)
.xx "programs." "" "intro: introduction to commands and application" "" intro(1)
.xx "" "" "intro: introduction to file formats." "" intro(4)
.xx "" "" "intro: introduction to games." "" intro(6)
.xx "" "" "intro: introduction to miscellaneous facilities." "" intro(5)
.xx "" "" "intro: introduction to special files." "" intro(7)
.xx "" "" "intro: introduction to subroutines and libraries." "" intro(3)
.xx "numbers." "" "intro: introduction to system calls and error" "" intro(2)
.xx "and application programs." "" "intro: introduction to system maintenance commands" "" intro(1M)
.xx "procedures." "" "intro: introduction to system maintenance" "" intro(8)
.xx "" "intro:" "introduction to commands and application programs." "" intro(1)
.xx "" "intro:" "introduction to file formats." "" intro(4)
.xx "" "intro:" "introduction to games." "" intro(6)
.xx "" "intro:" "introduction to miscellaneous facilities." "" intro(5)
.xx "" "intro:" "introduction to special files." "" intro(7)
.xx "" "intro:" "introduction to subroutines and libraries." "" intro(3)
.xx "" "intro:" "introduction to system calls and error numbers." "" intro(2)
.xx "application programs." "intro:" "introduction to system maintenance commands and" "" intro(1M)
.xx "" "intro:" "introduction to system maintenance procedures." "" intro(8)
.xx "" "ncheck: generate names from" "i-numbers." "" ncheck(1M)
.xx "" "" "ioctl: control device." "" ioctl(2)
.xx "" "abort: generate an" "IOT fault." "" abort(3C)
.xx "shared memory id." "" "ipcrm: remove a message queue, semaphore set or" "" ipcrm(1)
.xx "status." "" "ipcs: report inter-process communication facilities" "" ipcs(1)
.xx "" "isalpha, isupper, islower, isdigit, isxdigit," "isalnum, isspace, ispunct, isprint, isgraph,/" "" ctype(3C)
.xx "isalnum, isspace, ispunct, isprint, isgraph,/" "" "isalpha, isupper, islower, isdigit, isxdigit," "" ctype(3C)
.xx "" "isspace, ispunct, isprint, isgraph, iscntrl," "isascii: classify characters." "/isxdigit, isalnum," ctype(3C)
.xx "" "ttyname," "isatty: find name of a terminal." "" ttyname(3C)
.xx "" "isalnum, isspace, ispunct, isprint, isgraph," "iscntrl, isascii: classify characters." "/isxdigit," ctype(3C)
.xx "isprint, isgraph,/" "isalpha, isupper, islower," "isdigit, isxdigit, isalnum, isspace, ispunct," "" ctype(3C)
.xx "" "/isxdigit, isalnum, isspace, ispunct, isprint," "isgraph, iscntrl, isascii: classify characters." "" ctype(3C)
.xx "function." "sign," "isign, dsign: Fortran transfer-of-sign intrinsic" "" sign(3F)
.xx "ispunct, isprint, isgraph,/" "isalpha, isupper," "islower, isdigit, isxdigit, isalnum, isspace," "" ctype(3C)
.xx "" "/isdigit, isxdigit, isalnum, isspace, ispunct," "isprint, isgraph, iscntrl, isascii: classify/" "" ctype(3C)
.xx "" "/islower, isdigit, isxdigit, isalnum, isspace," "ispunct, isprint, isgraph, iscntrl, isascii:/" "" ctype(3C)
.xx "" "/isupper, islower, isdigit, isxdigit, isalnum," "isspace, ispunct, isprint, isgraph, iscntrl,/" "" ctype(3C)
.xx "" "system:" "issue a shell command from Fortran." "" system(3F)
.xx "" "system:" "issue a shell command." "" system(3S)
.xx "" "issue:" "issue identification file." "" issue(4)
.xx "" "" "issue: issue identification file." "" issue(4)
.xx "isspace, ispunct, isprint, isgraph,/" "isalpha," "isupper, islower, isdigit, isxdigit, isalnum," "" ctype(3C)
.xx "isgraph,/" "isalpha, isupper, islower, isdigit," "isxdigit, isalnum, isspace, ispunct, isprint," "" ctype(3C)
.xx "" "news: print news" "items." "" news(1)
.xx "" "" "j0, j1, jn, y0, y1, yn: Bessel functions." "" bessel(3M)
.xx "" "j0," "j1, jn, y0, y1, yn: Bessel functions." "" bessel(3M)
.xx "" "bj: the game of black" "jack." "" bj(6)
.xx "" "j0, j1," "jn, y0, y1, yn: Bessel functions." "" bessel(3M)
.xx "" "" "join: relational database operator." "" join(1)
.xx "" "" "jotto: secret word game." "" jotto(6)
.xx "" "drand48, erand48, lrand48, nrand48, mrand48," "jrand48, srand48, seed48, lcong48: generate/" "" drand48(3C)
.xx "" "makekey: generate encryption" "key." "" makekey(1)
.xx "" "killall:" "kill all active processes." "" killall(1M)
.xx "processes." "" "kill: send a signal to a process or a group of" "" kill(2)
.xx "" "" "kill: terminate a process." "" kill(1)
.xx "" "" "killall: kill all active processes." "" killall(1M)
.xx "" "mem," "kmem: core memory." "" mem(7)
.xx "" "quiz: test your" "knowledge." "" quiz(6)
.xx "long integers." "" "l3tol, ltol3: convert between 3-byte integers and" "" l3tol(3C)
.xx "ASCII string." "a64l," "l64a: convert between long integer and base-64" "" a64l(3C)
.xx "" "volcopy, labelit: copy file systems with" "label checking." "" volcopy(1M)
.xx "" "volcopy," "labelit: copy file systems with label checking." "" volcopy(1M)
.xx "" "awk: pattern scanning and processing" "language." "" awk(1)
.xx "" "bc: arbitrary-precision arithmetic" "language." "" bc(1)
.xx "" "ef\&l: Extended Fortran" "Language." "" efl(1)
.xx "" "cpp: the C" "language preprocessor." "" cpp(1)
.xx "" "shell, the standard/restricted command programming" "language." "sh, rsh:" sh(1)
.xx "" "lrk25: 25Mb" "Lark Module Drive." "" lrk25(7)
.xx "prtacct, remove,/" "chargefee, ckpacct, dodisk," "lastlogin, monacct, nulladm, prctmp, prdaily," "" acctsh(1M)
.xx "" "nrand48, mrand48, jrand48, srand48, seed48," "lcong48: generate uniformly distributed/" "/lrand48," drand48(3C)
.xx "" "" "ld: link editor for common object files." "" ld(1)
.xx "" "ldclose," "ldaclose: close a common object file." "" ldclose(3X)
.xx "archive file." "" "ldahread: read the archive header of a member of an" "" ldahread(3X)
.xx "" "ldopen," "ldaopen: open a common object file for reading." "" ldopen(3X)
.xx "" "" "ldclose, ldaclose: close a common object file." "" ldclose(3X)
.xx "numbers." "frexp," "ldexp, modf: manipulate parts of floating-point" "" frexp(3C)
.xx "" "" "ldfcn: common object file access routines." "" ldfcn(4)
.xx "file." "" "ldfhread: read the file header of a common object" "" ldfhread(3X)
.xx "" "" "ldgetname: retrieve symbol name for object file." "" ldgetname(3X)
.xx "a common object file function." "ldlread," "ldlinit, ldlitem: manipulate line number entries of" "" ldlread(3X)
.xx "object file function." "ldlread, ldlinit," "ldlitem: manipulate line number entries of a common" "" ldlread(3X)
.xx "entries of a common object file function." "" "ldlread, ldlinit, ldlitem: manipulate line number" "" ldlread(3X)
.xx "section of a common object file." "" "ldlseek, ldnlseek: seek to line number entries of a" "" ldlseek(3X)
.xx "of a common object file." "ldlseek," "ldnlseek: seek to line number entries of a section" "" ldlseek(3X)
.xx "of a common object file." "ldrseek," "ldnrseek: seek to relocation entries of a section" "" ldrseek(3X)
.xx "a common object file." "ldshread," "ldnshread: read an indexed\/named section header of" "" ldshread(3X)
.xx "common object file." "ldsseek," "ldnsseek: seek to an indexed\/named section of a" "" ldsseek(3X)
.xx "common object file." "" "ldohseek: seek to the optional file header of a" "" ldohseek(3X)
.xx "reading." "" "ldopen, ldaopen: open a common object file for" "" ldopen(3X)
.xx "section of a common object file." "" "ldrseek, ldnrseek: seek to relocation entries of a" "" ldrseek(3X)
.xx "header of a common object file." "" "ldshread, ldnshread: read an indexed\/named section" "" ldshread(3X)
.xx "section of a common object file." "" "ldsseek, ldnsseek: seek to an indexed\/named" "" ldsseek(3X)
.xx "entry of a common object file." "" "ldtbindex: compute the index of a symbol table" "" ldtbindex(3X)
.xx "common object file." "" "ldtbread: read an indexed symbol table entry of a" "" ldtbread(3X)
.xx "object file." "" "ldtbseek: seek to the symbol table of a common" "" ldtbseek(3X)
.xx "" "" "len: return length of Fortran string." "" len(3F)
.xx "" "len: return" "length of Fortran string." "" len(3F)
.xx "" "getopt: get option" "letter from argument vector." "" getopt(3C)
.xx "" "" "lex: generate programs for simple lexical tasks." "" lex(1)
.xx "" "lex: generate programs for simple" "lexical tasks." "" lex(1)
.xx "" "intro: introduction to subroutines and" "libraries." "" intro(3)
.xx "" "lorder: find ordering relation for an object" "library." "" lorder(1)
.xx "" "ar: archive and" "library maintainer for portable archives." "" ar(1)
.xx "" "ulimit: get and set user" "limits." "" ulimit(2)
.xx "" "dial: establish an out-going terminal" "line connection." "" dial(3C)
.xx "" "getty: set terminal type, modes, speed, and" "line discipline." "" getty(1M)
.xx "" "line: read one" "line." "" line(1)
.xx "" "linenum:" "line number entries in a common object file." "" linenum(4)
.xx "function." "ldlread, ldlinit, ldlitem: manipulate" "line number entries of a common object file" "" ldlread(3X)
.xx "file." "ldlseek, ldnlseek: seek to" "line number entries of a section of a common object" "" ldlseek(3X)
.xx "" "strip: strip symbol and" "line number information from an object file." "" strip(1)
.xx "" "nl:" "line numbering filter." "" nl(1)
.xx "" "cut: cut out selected fields of each" "line of a file." "" cut(1)
.xx "" "lpd:" "line printer daemon." "" lpd(1C)
.xx "" "lp, cancel: send/cancel requests to an LP" "line printer." "" lp(1)
.xx "" "lp, lpc:" "line printer." "" lp(7)
.xx "" "lpr:" "line printer spooler." "" lpr(1)
.xx "" "" "line: read one line." "" line(1)
.xx "" "lsearch:" "linear search and update." "" lsearch(3C)
.xx "" "col: filter reverse" "line-feeds." "" col(1)
.xx "file." "" "linenum: line number entries in a common object" "" linenum(4)
.xx "" "comm: select or reject" "lines common to two sorted files." "" comm(1)
.xx "" "uniq: report repeated" "lines in a file." "" uniq(1)
.xx "" "merge same lines of several files or subsequent" "lines of one file." "paste:" paste(1)
.xx "file." "paste: merge same" "lines of several files or subsequent lines of one" "" paste(1)
.xx "" "link, unlink: exercise" "link and unlink system calls." "" link(1M)
.xx "" "ld:" "link editor for common object files." "" ld(1)
.xx "" "a.out: common assembler and" "link editor output." "" a.out(4)
.xx "" "" "link: link to a file." "" link(2)
.xx "" "cp, ln, mv: copy," "link or move files." "" cp(1)
.xx "" "link:" "link to a file." "" link(2)
.xx "calls." "" "link, unlink: exercise link and unlink system" "" link(1M)
.xx "" "" "lint: a C program checker." "" lint(1)
.xx "" "ls:" "list contents of directories." "" ls(1)
.xx "" "f\&f:" "list filenames and statistics for a file system." "" ff(1M)
.xx "" "nlist: get entries from name" "list." "" nlist(3C)
.xx "" "nm: print name" "list of common object file." "" nm(1)
.xx "" "checklist:" "list of file systems processed by fsck." "" checklist(4)
.xx "" "xargs: construct argument" "list(s) and execute command." "" xargs(1)
.xx "" "as," "ljas: common assembler." "" as(1)
.xx "" "cp," "ln, mv: copy, link or move files." "" cp(1)
.xx "time to string." "ctime," "localtime, gmtime, asctime, tzset: convert date and" "" ctime(3C)
.xx "" "index: return" "location of Fortran substring." "" index(3F)
.xx "" "end, etext, edata: last" "locations in program." "" end(3C)
.xx "" "plock:" "lock process, text, or data in memory." "" plock(2)
.xx "intrinsic function." "" "log, alog, dlog, clog: Fortran natural logarithm" "" log(3F)
.xx "" "gamma:" "log gamma function." "" gamma(3M)
.xx "" "newgrp:" "log in to a new group." "" newgrp(1)
.xx "power, square root functions." "exp," "log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "intrinsic function." "" "log10, alog10, dlog10: Fortran common logarithm" "" log10(3F)
.xx "square root functions." "exp, log," "log10, pow, sqrt: exponential, logarithm, power," "" exp(3M)
.xx "" "log10, alog10, dlog10: Fortran common" "logarithm intrinsic function." "" log10(3F)
.xx "" "log, alog, dlog, clog: Fortran natural" "logarithm intrinsic function." "" log(3F)
.xx "" "exp, log, log10, pow, sqrt: exponential," "logarithm, power, square root functions." "" exp(3M)
.xx "" "errpt: process a report of" "logged errors." "" errpt(1M)
.xx "" "getlogin: get" "login name." "" getlogin(3C)
.xx "" "logname: get" "login name." "" logname(1)
.xx "" "cuserid: get character" "login name of the user." "" cuserid(3S)
.xx "" "logname: return" "login name of user." "" logname(3X)
.xx "" "passwd: change" "login password." "" passwd(1)
.xx "" "" "login: sign on." "" login(1)
.xx "" "profile: setting up an environment at" "login time." "" profile(4)
.xx "" "" "logname: get login name." "" logname(1)
.xx "" "" "logname: return login name of user." "" logname(3X)
.xx "" "a64l, l64a: convert between" "long integer and base-64 ASCII string." "" a64l(3C)
.xx "fashion.." "sputl, sgetl: access" "long integer data in a machine independent" "" sputl(3X)
.xx "" "l3tol, ltol3: convert between 3-byte integers and" "long integers." "" l3tol(3C)
.xx "" "setjmp," "longjmp: non-local goto." "" setjmp(3C)
.xx "library." "" "lorder: find ordering relation for an object" "" lorder(1)
.xx "" "nice: run a command at" "low priority." "" nice(1)
.xx "printer." "" "lp, cancel: send/cancel requests to an LP line" "" lp(1)
.xx "" "lp, cancel: send/cancel requests to an" "LP line printer." "" lp(1)
.xx "" "" "lp, lpc: line printer." "" lp(7)
.xx "" "enable, disable: enable/disable" "LP printers." "" enable(1)
.xx "" "lpsched, lpshut, lpmove: start/stop the" "LP request scheduler and move requests." "" lpsched(1M)
.xx "" "accept, reject: allow/prevent" "LP requests." "" accept(1M)
.xx "" "lpadmin: configure the" "LP spooling system." "" lpadmin(1M)
.xx "" "lpstat: print" "LP status information." "" lpstat(1)
.xx "" "" "lpadmin: configure the LP spooling system." "" lpadmin(1M)
.xx "" "lp," "lpc: line printer." "" lp(7)
.xx "" "" "lpd: line printer daemon." "" lpd(1C)
.xx "move requests." "lpsched, lpshut," "lpmove: start/stop the LP request scheduler and" "" lpsched(1M)
.xx "" "" "lpr: line printer spooler." "" lpr(1)
.xx "scheduler and move requests." "" "lpsched, lpshut, lpmove: start/stop the LP request" "" lpsched(1M)
.xx "and move requests." "lpsched," "lpshut, lpmove: start/stop the LP request scheduler" "" lpsched(1M)
.xx "" "" "lpstat: print LP status information." "" lpstat(1)
.xx "seed48, lcong48: generate/" "drand48, erand48," "lrand48, nrand48, mrand48, jrand48, srand48," "" drand48(3C)
.xx "" "" "lrk25: 25Mb Lark Module Drive." "" lrk25(7)
.xx "" "" "ls: list contents of directories." "" ls(1)
.xx "" "" "lsearch: linear search and update." "" lsearch(3C)
.xx "" "" "lseek: move read/write file pointer." "" lseek(2)
.xx "" "and, or, xor, not," "lshift, rshift: Fortran bitwise boolean functions." "" bool(3F)
.xx "integers." "l3tol," "ltol3: convert between 3-byte integers and long" "" l3tol(3C)
.xx "" "" "m4: macro processor." "" m4(1)
.xx "" "fscv: convert files between" "M68000 and VAX-11/780 processors." "" fscv(1M)
.xx "type." "pdp11, u3b, vax," "m68k: provide truth value about your processor" "" machid(1)
.xx "" "" "m68kops \-EXORmacs operations." "" m68kops(8)
.xx "" "general driver for all disk units supported by the" "M68KVM21 disk controller." "ud:" ud(7)
.xx "" "sputl, sgetl: access long integer data in a" "machine independent fashion.." "" sputl(3X)
.xx "" "mptx: the" "macro package for formatting a permuted index." "" mptx(5)
.xx "" "mm: the MM" "macro package for formatting documents." "" mm(5)
.xx "" "mosd: the OSDD adapter" "macro package for formatting documents." "" mosd(5)
.xx "slides." "mv: a troff" "macro package for typesetting viewgraphs and" "" mv(5)
.xx "" "m4:" "macro processor." "" m4(1)
.xx "" "man:" "macros for formatting entries in this manual." "" man(5)
.xx "" "print/check documents formatted with the MM" "macros." "mm, osdd, checkmm:" mm(1)
.xx "" "mail, rmail: send mail to users or read" "mail." "" mail(1)
.xx "" "" "mail, rmail: send mail to users or read mail." "" mail(1)
.xx "" "mail, rmail: send" "mail to users or read mail." "" mail(1)
.xx "" "malloc, free, realloc, calloc:" "main memory allocator." "" malloc(3C)
.xx "programs." "make:" "maintain, update, and regenerate groups of" "" make(1)
.xx "" "ar: archive and library" "maintainer for portable archives." "" ar(1)
.xx "" "intro: introduction to system" "maintenance commands and application programs." "" intro(1M)
.xx "" "intro: introduction to system" "maintenance procedures." "" intro(8)
.xx "" "delta:" "make a delta (change) to an SCCS file." "" delta(1)
.xx "" "mkdir:" "make a directory." "" mkdir(1)
.xx "" "mknod:" "make a directory, or a special or ordinary file." "" mknod(2)
.xx "" "mktemp:" "make a unique filename." "" mktemp(3C)
.xx "programs." "" "make: maintain, update, and regenerate groups of" "" make(1)
.xx "" "banner:" "make posters." "" banner(1)
.xx "" "" "makekey: generate encryption key." "" makekey(1)
.xx "allocator." "" "malloc, free, realloc, calloc: main memory" "" malloc(3C)
.xx "" "" "man: macros for formatting entries in this manual." "" man(5)
.xx "" "" "man, manprog: print entries in this manual." "" man(1)
.xx "" "tsearch, tdelete, twalk:" "manage binary search trees." "" tsearch(3C)
.xx "" "hsearch, hcreate, hdestroy:" "manage hash search tables." "" hsearch(3C)
.xx "" "fwtmp, wtmpfix:" "manipulate connect accounting records." "" fwtmp(1M)
.xx "file function." "ldlread, ldlinit, ldlitem:" "manipulate line number entries of a common object" "" ldlread(3X)
.xx "" "frexp, ldexp, modf:" "manipulate parts of floating-point numbers." "" frexp(3C)
.xx "" "man," "manprog: print entries in this manual." "" man(1)
.xx "" "man, manprog: print entries in this" "manual." "" man(1)
.xx "" "man: macros for formatting entries in this" "manual." "" man(5)
.xx "" "ascii:" "map of ASCII character set." "" ascii(5)
.xx "" "diffmk:" "mark differences between files." "" diffmk(1)
.xx "" "umask: set file-creation mode" "mask." "" umask(1)
.xx "" "umask: set and get file creation" "mask." "" umask(2)
.xx "" "master:" "master device information table." "" master.dec(4)
.xx "" "" "master: master device information table." "" master.dec(4)
.xx "" "regexp: regular expression compile and" "match routines." "" regexp(5)
.xx "" "eqn, neqn, checkeq: format" "mathematical text for nroff or troff." "" eqn(1)
.xx "" "" "matherr: error-handling function." "" matherr(3M)
.xx "maximum-value functions." "" "max, max0, amax0, max1, amax1, dmax1: Fortran" "" max(3F)
.xx "maximum-value functions." "max," "max0, amax0, max1, amax1, dmax1: Fortran" "" max(3F)
.xx "functions." "max, max0, amax0," "max1, amax1, dmax1: Fortran maximum-value" "" max(3F)
.xx "" "max, max0, amax0, max1, amax1, dmax1: Fortran" "maximum-value functions." "" max(3F)
.xx "" "" "maze: generate a maze." "" maze(6)
.xx "" "maze: generate a" "maze." "" maze(6)
.xx "" "" "mclock: return Fortran time accounting." "" mclock(3F)
.xx "" "" "mem, kmem: core memory." "" mem(7)
.xx "operations." "" "memccpy, memchr, memcmp, memcpy, memset: memory" "" memory(3C)
.xx "" "memccpy," "memchr, memcmp, memcpy, memset: memory operations." "" memory(3C)
.xx "" "memccpy, memchr," "memcmp, memcpy, memset: memory operations." "" memory(3C)
.xx "" "memccpy, memchr, memcmp," "memcpy, memset: memory operations." "" memory(3C)
.xx "" "malloc, free, realloc, calloc: main" "memory allocator." "" malloc(3C)
.xx "" "shmctl: shared" "memory control operations." "" shmctl(2)
.xx "" "remove a message queue, semaphore set or shared" "memory id." "ipcrm:" ipcrm(1)
.xx "" "mem, kmem: core" "memory." "" mem(7)
.xx "" "memccpy, memchr, memcmp, memcpy, memset:" "memory operations." "" memory(3C)
.xx "" "shmat, shmdt: shared" "memory operations." "" shmop(2)
.xx "" "plock: lock process, text, or data in" "memory." "" plock(2)
.xx "" "shmget: get shared" "memory segment." "" shmget(2)
.xx "" "memccpy, memchr, memcmp, memcpy," "memset: memory operations." "" memory(3C)
.xx "" "sort: sort and/or" "merge files." "" sort(1)
.xx "" "acctmerg:" "merge or add total accounting files." "" acctmerg(1M)
.xx "lines of one file." "paste:" "merge same lines of several files or subsequent" "" paste(1)
.xx "" "" "mesg: permit or deny messages." "" mesg(1)
.xx "" "msgctl:" "message control operations." "" msgctl(2)
.xx "" "msgsnd, msgrcv:" "message operations." "" msgop(2)
.xx "" "msgget: get" "message queue." "" msgget(2)
.xx "" "ipcrm: remove a" "message queue, semaphore set or shared memory id." "" ipcrm(1)
.xx "" "mesg: permit or deny" "messages." "" mesg(1)
.xx "" "perror, errno, sys errlist, sys nerr: system error" "messages." "" perror(3C)
.xx "minimum-value functions." "" "min, min0, amin0, min1, amin1, dmin1: Fortran" "" min(3F)
.xx "minimum-value functions." "min," "min0, amin0, min1, amin1, dmin1: Fortran" "" min(3F)
.xx "functions." "min, min0, amin0," "min1, amin1, dmin1: Fortran minimum-value" "" min(3F)
.xx "" "min, min0, amin0, min1, amin1, dmin1: Fortran" "minimum-value functions." "" min(3F)
.xx "" "" "mk: how to remake the system and commands." "" mk(8)
.xx "" "" "mkdir: make a directory." "" mkdir(1)
.xx "" "" "mkfs, omkfs: construct a file system." "" mkfs(1M)
.xx "" "" "mknod: build special file." "" mknod(1M)
.xx "file." "" "mknod: make a directory, or a special or ordinary" "" mknod(2)
.xx "" "" "mktemp: make a unique filename." "" mktemp(3C)
.xx "" "mm: the" "MM macro package for formatting documents." "" mm(5)
.xx "" "checkmm: print/check documents formatted with the" "MM macros." "mm, osdd," mm(1)
.xx "with the MM macros." "" "mm, osdd, checkmm: print/check documents formatted" "" mm(1)
.xx "" "" "mm: the MM macro package for formatting documents." "" mm(5)
.xx "slides." "" "mmt, mvt: typeset documents, viewgraphs, and" "" mmt(1)
.xx "" "" "mnttab: mounted file system table." "" mnttab(4)
.xx "functions." "" "mod, amod, dmod: Fortran remaindering intrinsic" "" mod(3F)
.xx "" "chmod: change" "mode." "" chmod(1)
.xx "" "umask: set file-creation" "mode mask." "" umask(1)
.xx "" "chmod: change" "mode of file." "" chmod(2)
.xx "" "getty: set terminal type," "modes, speed, and line discipline." "" getty(1M)
.xx "" "bs: a compiler/interpreter for" "modest-sized programs." "" bs(1)
.xx "" "frexp, ldexp," "modf: manipulate parts of floating-point numbers." "" frexp(3C)
.xx "" "touch: update access and" "modification times of a file." "" touch(1)
.xx "" "utime: set file access and" "modification times." "" utime(2)
.xx "" "cm16: 16Mb Cartridge" "Module Drive." "" cm16(7)
.xx "" "cm80: 80Mb Cartridge" "Module Drive." "" cm80(7)
.xx "" "lrk25: 25Mb Lark" "Module Drive." "" lrk25(7)
.xx "runacct,/" "chargefee, ckpacct, dodisk, lastlogin," "monacct, nulladm, prctmp, prdaily, prtacct, remove," "" acctsh(1M)
.xx "" "" "monitor: prepare execution profile." "" monitor(3C)
.xx "" "uusub:" "monitor uucp network." "" uusub(1M)
.xx "" "" "moo: guessing game." "" moo(6)
.xx "documents." "" "mosd: the OSDD adapter macro package for formatting" "" mosd(5)
.xx "" "mount:" "mount a file system." "" mount(2)
.xx "" "mount, umount:" "mount and dismount file system." "" mount(1M)
.xx "" "" "mount: mount a file system." "" mount(2)
.xx "" "setmnt: establish" "mount table." "" setmnt(1M)
.xx "" "" "mount, umount: mount and dismount file system." "" mount(1M)
.xx "" "mnttab:" "mounted file system table." "" mnttab(4)
.xx "" "mvdir:" "move a directory." "" mvdir(1M)
.xx "" "cp, ln, mv: copy, link or" "move files." "" cp(1)
.xx "" "lseek:" "move read/write file pointer." "" lseek(2)
.xx "" "lpmove: start/stop the LP request scheduler and" "move requests." "lpsched, lpshut," lpsched(1M)
.xx "index." "" "mptx: the macro package for formatting a permuted" "" mptx(5)
.xx "generate/" "drand48, erand48, lrand48, nrand48," "mrand48, jrand48, srand48, seed48, lcong48:" "" drand48(3C)
.xx "" "" "msgctl: message control operations." "" msgctl(2)
.xx "" "" "msgget: get message queue." "" msgget(2)
.xx "" "msgsnd," "msgrcv: message operations." "" msgop(2)
.xx "" "" "msgsnd, msgrcv: message operations." "" msgop(2)
.xx "viewgraphs and slides." "" "mv: a troff macro package for typesetting" "" mv(5)
.xx "" "cp, ln," "mv: copy, link or move files." "" cp(1)
.xx "" "" "mvdir: move a directory." "" mvdir(1M)
.xx "" "mmt," "mvt: typeset documents, viewgraphs, and slides." "" mmt(1)
.xx "" "log, alog, dlog, clog: Fortran" "natural logarithm intrinsic function." "" log(3F)
.xx "" "" "ncheck: generate names from i-numbers." "" ncheck(1M)
.xx "" "anint, dnint, nint, idnint: Fortran" "nearest integer functions." "" round(3F)
.xx "or troff." "eqn," "neqn, checkeq: format mathematical text for nroff" "" eqn(1)
.xx "" "eqnchar: special character definitions for eqn and" "neqn." "" eqnchar(5)
.xx "" "stat: statistical" "network useful with graphical commands." "" stat(1G)
.xx "" "uusub: monitor uucp" "network." "" uusub(1M)
.xx "" "" "newform: change the format of a text file." "" newform(1)
.xx "" "" "newgrp: log in to a new group." "" newgrp(1)
.xx "" "news: print" "news items." "" news(1)
.xx "" "" "news: print news items." "" news(1)
.xx "" "" "nice: change priority of a process." "" nice(2)
.xx "" "" "nice: run a command at low priority." "" nice(1)
.xx "" "anint, dnint," "nint, idnint: Fortran nearest integer functions." "" round(3F)
.xx "" "" "nl: line numbering filter." "" nl(1)
.xx "" "" "nlist: get entries from name list." "" nlist(3C)
.xx "" "" "nm: print name list of common object file." "" nm(1)
.xx "" "" "nohup: run a command immune to hangups and quits." "" nohup(1)
.xx "" "setjmp, longjmp:" "non-local goto." "" setjmp(3C)
.xx "functions." "and, or, xor," "not, lshift, rshift: Fortran bitwise boolean" "" bool(3F)
.xx "lcong48: generate/" "drand48, erand48, lrand48," "nrand48, mrand48, jrand48, srand48, seed48," "" drand48(3C)
.xx "" "" "nroff: format text." "" nroff(1)
.xx "" "eqn, neqn, checkeq: format mathematical text for" "nroff or troff." "" eqn(1)
.xx "" "tbl: format tables for" "nroff or troff." "" tbl(1)
.xx "" "deroff: remove" "nroff/troff, tbl, and eqn constructs." "" deroff(1)
.xx "" "null: the" "null file." "" null(7)
.xx "" "" "null: the null file." "" null(7)
.xx "" "chargefee, ckpacct, dodisk, lastlogin, monacct," "nulladm, prctmp, prdaily, prtacct, remove, runacct,/" "" acctsh(1M)
.xx "" "nl: line" "numbering filter." "" nl(1)
.xx "" "graphics: access graphical and" "numerical commands." "" graphics(1G)
.xx "" "ldfcn: common" "object file access routines." "" ldfcn(4)
.xx "" "conv:" "object file converter." "" conv(1)
.xx "" "dump: dump selected parts of an" "object file." "" dump(1)
.xx "" "ldopen, ldaopen: open a common" "object file for reading." "" ldopen(3X)
.xx "" "ldlitem: manipulate line number entries of a common" "object file function." "ldlread, ldlinit," ldlread(3X)
.xx "" "ldclose, ldaclose: close a common" "object file." "" ldclose(3X)
.xx "" "ldfhread: read the file header of a common" "object file." "" ldfhread(3X)
.xx "" "ldgetname: retrieve symbol name for" "object file." "" ldgetname(3X)
.xx "" "to line number entries of a section of a common" "object file." "ldlseek, ldnlseek: seek" ldlseek(3X)
.xx "" "seek to the optional file header of a common" "object file." "ldohseek:" ldohseek(3X)
.xx "" "seek to relocation entries of a section of a common" "object file." "ldrseek, ldnrseek:" ldrseek(3X)
.xx "" "read an indexed\/named section header of a common" "object file." "ldshread, ldnshread:" ldshread(3X)
.xx "" "seek to an indexed\/named section of a common" "object file." "ldsseek, ldnsseek:" ldsseek(3X)
.xx "" "the index of a symbol table entry of a common" "object file." "ldtbindex: compute" ldtbindex(3X)
.xx "" "read an indexed symbol table entry of a common" "object file." "ldtbread:" ldtbread(3X)
.xx "" "ldtbseek: seek to the symbol table of a common" "object file." "" ldtbseek(3X)
.xx "" "linenum: line number entries in a common" "object file." "" linenum(4)
.xx "" "nm: print name list of common" "object file." "" nm(1)
.xx "" "reloc: relocation information for a common" "object file." "" reloc(4)
.xx "" "scnhdr: section header for a common" "object file." "" scnhdr(4)
.xx "" "strip symbol and line number information from an" "object file." "strip:" strip(1)
.xx "" "syms: common" "object file symbol table format." "" syms(4)
.xx "" "filehdr: file header for common" "object files." "" filehdr(4)
.xx "" "ld: link editor for common" "object files." "" ld(1)
.xx "" "size: print section sizes of common" "object files." "" size(1)
.xx "" "lorder: find ordering relation for an" "object library." "" lorder(1)
.xx "" "sky:" "obtain ephemerides." "" sky(6)
.xx "" "getgrent, getgrgid, getgrnam, setgrent, endgrent:" "obtain." "" getgrent(3C)
.xx "" "od:" "octal dump." "" od(1)
.xx "" "" "od: octal dump." "" od(1)
.xx "" "mkfs," "omkfs: construct a file system." "" mkfs(1M)
.xx "" "ldopen, ldaopen:" "open a common object file for reading." "" ldopen(3X)
.xx "" "fopen, freopen, fdopen:" "open a stream." "" fopen(3S)
.xx "" "dup: duplicate an" "open file descriptor." "" dup(2)
.xx "" "open:" "open for reading or writing." "" open(2)
.xx "" "" "open: open for reading or writing." "" open(2)
.xx "" "bo: bootstrap" "operating procedure for system restart." "" bo(8)
.xx "" "prf:" "operating system profiler." "" prf(7)
.xx "" "prfld, prfstat, prfdc, prfsnap, prfpr:" "operating system profiler." "" profiler(1M)
.xx "" "uname: get name of current" "operating system." "" uname(2)
.xx "" "tgetstr, tgoto, tputs: terminal independent" "operation routines." "tgetent, tgetnum, tgetflag," termcap(3)
.xx "" "m68kops \-EXORmacs" "operations." "" m68kops(8)
.xx "" "memccpy, memchr, memcmp, memcpy, memset: memory" "operations." "" memory(3C)
.xx "" "msgctl: message control" "operations." "" msgctl(2)
.xx "" "msgsnd, msgrcv: message" "operations." "" msgop(2)
.xx "" "semctl: semaphore control" "operations." "" semctl(2)
.xx "" "semop: semaphore" "operations." "" semop(2)
.xx "" "shmctl: shared memory control" "operations." "" shmctl(2)
.xx "" "shmat, shmdt: shared memory" "operations." "" shmop(2)
.xx "" "strrchr, strpbrk, strspn, strcspn, strtok: string" "operations." "/strcpy, strncpy, strlen, strchr," string(3C)
.xx "" "join: relational database" "operator." "" join(1)
.xx "" "dcopy: copy file systems for" "optimal access time." "" dcopy(1M)
.xx "" "getopt: get" "option letter from argument vector." "" getopt(3C)
.xx "" "aouthdr:" "optional aout header." "" aouthdr(4)
.xx "" "ldohseek: seek to the" "optional file header of a common object file." "" ldohseek(3X)
.xx "" "fcntl: file control" "options." "" fcntl(5)
.xx "" "stty: set the" "options for a terminal." "" stty(1)
.xx "" "getopt: parse command" "options." "" getopt(1)
.xx "boolean functions." "and," "or, xor, not, lshift, rshift: Fortran bitwise" "" bool(3F)
.xx "" "lorder: find" "ordering relation for an object library." "" lorder(1)
.xx "" "mknod: make a directory, or a special or" "ordinary file." "" mknod(2)
.xx "" "vi: screen" "oriented (visual) display editor based on ex." "" vi(1)
.xx "documents." "mosd: the" "OSDD adapter macro package for formatting" "" mosd(5)
.xx "the MM macros." "mm," "osdd, checkmm: print/check documents formatted with" "" mm(1)
.xx "" "dial: establish an" "out-going terminal line connection." "" dial(3C)
.xx "" "a.out: common assembler and link editor" "output." "" a.out(4)
.xx "" "printf, fprintf, sprintf: print formatted" "output." "" printf(3S)
.xx "commands." "acctdisk, acctdusg, accton, acctwtmp:" "overview of accounting and miscellaneous accounting" "" acct(1M)
.xx "" "chown: change" "owner and group of a file." "" chown(2)
.xx "" "chown, chgrp: change" "owner or group." "" chown(1)
.xx "" "" "pack, pcat, unpack: compress and expand files." "" pack(1)
.xx "" "mptx: the macro" "package for formatting a permuted index." "" mptx(5)
.xx "" "mm: the MM macro" "package for formatting documents." "" mm(5)
.xx "" "mosd: the OSDD adapter macro" "package for formatting documents." "" mosd(5)
.xx "" "mv: a troff macro" "package for typesetting viewgraphs and slides." "" mv(5)
.xx "" "sa1, sa2, sadc: system activity report" "package." "" sar(1M)
.xx "" "stdio: standard buffered input/output" "package." "" stdio(3S)
.xx "" "stdipc: standard interprocess communication" "package." "" stdipc(3C)
.xx "" "4014:" "paginator for the Tektronix 4014 terminal." "" 4014(1)
.xx "" "getpgrp, getppid: get process, process group, and" "parent process IDs." "getpid," getpid(2)
.xx "" "getopt:" "parse command options." "" getopt(1)
.xx "" "" "passwd: change login password." "" passwd(1)
.xx "" "" "passwd: password file." "" passwd(4)
.xx "" "getpwuid, getpwnam, setpwent, endpwent: get" "password file entry." "getpwent," getpwent(3C)
.xx "" "putpwent: write" "password file entry." "" putpwent(3C)
.xx "" "passwd:" "password file." "" passwd(4)
.xx "" "getpass: read a" "password." "" getpass(3C)
.xx "" "passwd: change login" "password." "" passwd(1)
.xx "" "pwck, grpck:" "password/group file checkers." "" pwck(1M)
.xx "subsequent lines of one file." "" "paste: merge same lines of several files or" "" paste(1)
.xx "" "getcwd: get" "pathname of current working directory." "" getcwd(3C)
.xx "" "basename, dirname: deliver portions of" "pathnames." "" basename(1)
.xx "" "grep, egrep, fgrep: search a file for a" "pattern." "" grep(1)
.xx "" "awk:" "pattern scanning and processing language." "" awk(1)
.xx "" "" "pause: suspend process until signal." "" pause(2)
.xx "" "pack," "pcat, unpack: compress and expand files." "" pack(1)
.xx "" "popen," "pclose: initiate pipe to/from a process." "" popen(3S)
.xx "your processor type." "" "pdp11, u3b, vax, m68k: provide truth value about" "" machid(1)
.xx "" "mesg:" "permit or deny messages." "" mesg(1)
.xx "" "mptx: the macro package for formatting a" "permuted index." "" mptx(5)
.xx "" "ptx:" "permuted index." "" ptx(1)
.xx "" "acct:" "per-process accounting file format." "" acct(4)
.xx "" "acctcms: command summary from" "per-process accounting records." "" acctcms(1M)
.xx "messages." "" "perror, errno, sys errlist, sys nerr: system error" "" perror(3C)
.xx "" "tc:" "phototypesetter simulator." "" tc(1)
.xx "" "split: split a file into" "pieces." "" split(1)
.xx "" "" "pipe: create an interprocess channel." "" pipe(2)
.xx "" "tee:" "pipe fitting." "" tee(1)
.xx "" "popen, pclose: initiate" "pipe to/from a process." "" popen(3S)
.xx "" "" "plock: lock process, text, or data in memory." "" plock(2)
.xx "" "" "plot: graphics interface." "" plot(4)
.xx "" "" "plot: graphics interface subroutines." "" plot(3X)
.xx "" "" "pnch: file format for card images." "" pnch(4)
.xx "" "fseek, rewind, ftell: reposition a file" "pointer in a stream." "" fseek(3S)
.xx "" "lseek: move read/write file" "pointer." "" lseek(2)
.xx "" "" "popen, pclose: initiate pipe to/from a process." "" popen(3S)
.xx "" "ar: archive and library maintainer for" "portable archives." "" ar(1)
.xx "" "basename, dirname: deliver" "portions of pathnames." "" basename(1)
.xx "" "banner: make" "posters." "" banner(1)
.xx "root functions." "exp, log, log10," "pow, sqrt: exponential, logarithm, power, square" "" exp(3M)
.xx "" "exp, log, log10, pow, sqrt: exponential, logarithm," "power, square root functions." "" exp(3M)
.xx "" "brc, bcheckrc, rc," "powerfail: system initialization shell scripts." "" brc(1M)
.xx "" "" "pr: print files." "" pr(1)
.xx "" "/ckpacct, dodisk, lastlogin, monacct, nulladm," "prctmp, prdaily, prtacct, remove, runacct,/" "" acctsh(1M)
.xx "" "/dodisk, lastlogin, monacct, nulladm, prctmp," "prdaily, prtacct, remove, runacct, shutacct,/" "" acctsh(1M)
.xx "" "cw, checkcw:" "prepare constant-width text for troff." "" cw(1)
.xx "" "monitor:" "prepare execution profile." "" monitor(3C)
.xx "" "cpp: the C language" "preprocessor." "" cpp(1)
.xx "" "unget: undo a" "previous get of an SCCS file." "" unget(1)
.xx "" "" "prf: operating system profiler." "" prf(7)
.xx "" "prfld, prfstat," "prfdc, prfsnap, prfpr: operating system profiler." "" profiler(1M)
.xx "system profiler." "" "prfld, prfstat, prfdc, prfsnap, prfpr: operating" "" profiler(1M)
.xx "" "prfld, prfstat, prfdc, prfsnap," "prfpr: operating system profiler." "" profiler(1M)
.xx "" "prfld, prfstat, prfdc," "prfsnap, prfpr: operating system profiler." "" profiler(1M)
.xx "profiler." "prfld," "prfstat, prfdc, prfsnap, prfpr: operating system" "" profiler(1M)
.xx "" "gps: graphical" "primitive string, format of graphical files." "" gps(4)
.xx "" "types:" "primitive system data types." "" types(5)
.xx "" "prs:" "print an SCCS file." "" prs(1)
.xx "" "date:" "print and set the date." "" date(1)
.xx "" "cal:" "print calendar." "" cal(1)
.xx "" "sum:" "print checksum and block count of a file." "" sum(1)
.xx "" "sact:" "print current SCCS file editing activity." "" sact(1)
.xx "" "man, manprog:" "print entries in this manual." "" man(1)
.xx "" "cat: concatenate and" "print files." "" cat(1)
.xx "" "scat: concatenate and" "print files on synchronous printer." "" scat(1)
.xx "" "pr:" "print files." "" pr(1)
.xx "" "printf, fprintf, sprintf:" "print formatted output." "" printf(3S)
.xx "" "lpstat:" "print LP status information." "" lpstat(1)
.xx "" "nm:" "print name list of common object file." "" nm(1)
.xx "" "uname:" "print name of current UNIX System." "" uname(1)
.xx "" "news:" "print news items." "" news(1)
.xx "" "acctcom: search and" "print process accounting file(s)." "" acctcom(1)
.xx "" "size:" "print section sizes of common object files." "" size(1)
.xx "" "id:" "print user and group IDs and names." "" id(1)
.xx "" "mm, osdd, checkmm:" "print/check documents formatted with the MM macros." "" mm(1)
.xx "" "lpd: line" "printer daemon." "" lpd(1C)
.xx "" "lp, cancel: send/cancel requests to an LP line" "printer." "" lp(1)
.xx "" "lp, lpc: line" "printer." "" lp(7)
.xx "" "scat: concatenate and print files on synchronous" "printer." "" scat(1)
.xx "" "lpr: line" "printer spooler." "" lpr(1)
.xx "" "enable, disable: enable/disable LP" "printers." "" enable(1)
.xx "" "" "printf, fprintf, sprintf: print formatted output." "" printf(3S)
.xx "" "nice: run a command at low" "priority." "" nice(1)
.xx "" "nice: change" "priority of a process." "" nice(2)
.xx "" "errpt:" "process a report of logged errors." "" errpt(1M)
.xx "" "acct: enable or disable" "process accounting." "" acct(2)
.xx "" "acctprc1, acctprc2:" "process accounting." "" acctprc(1M)
.xx "" "acctcom: search and print" "process accounting file(s)." "" acctcom(1)
.xx "" "times: get" "process and child process times." "" times(2)
.xx "" "init, telinit:" "process control initialization." "" init(1M)
.xx "" "timex: time a command; report" "process data and system activity." "" timex(1)
.xx "" "exit,  exit: terminate" "process." "" exit(2)
.xx "" "fork: create a new" "process." "" fork(2)
.xx "" "getpid, getpgrp, getppid: get process," "process group, and parent process IDs." "" getpid(2)
.xx "" "setpgrp: set" "process group ID." "" setpgrp(2)
.xx "" "getppid: get process, process group, and parent" "process IDs." "getpid, getpgrp," getpid(2)
.xx "" "inittab: script for the init" "process." "" inittab(4)
.xx "" "kill: terminate a" "process." "" kill(1)
.xx "" "nice: change priority of a" "process." "" nice(2)
.xx "" "kill: send a signal to a" "process or a group of processes." "" kill(2)
.xx "" "popen, pclose: initiate pipe to/from a" "process." "" popen(3S)
.xx "" "getpid, getpgrp, getppid: get" "process, process group, and parent process IDs." "" getpid(2)
.xx "" "ps: report" "process status." "" ps(1)
.xx "" "plock: lock" "process, text, or data in memory." "" plock(2)
.xx "" "times: get process and child" "process times." "" times(2)
.xx "" "wait: wait for child" "process to stop or terminate." "" wait(2)
.xx "" "ptrace:" "process trace." "" ptrace(2)
.xx "" "pause: suspend" "process until signal." "" pause(2)
.xx "" "wait: await completion of" "process." "" wait(1)
.xx "" "checklist: list of file systems" "processed by fsck." "" checklist(4)
.xx "" "kill: send a signal to a process or a group of" "processes." "" kill(2)
.xx "" "killall: kill all active" "processes." "" killall(1M)
.xx "" "fuser: identify" "processes using a file or file structure." "" fuser(1M)
.xx "" "awk: pattern scanning and" "processing language." "" awk(1)
.xx "" "shutdown: terminate all" "processing." "" shutdown(1M)
.xx "" "m4: macro" "processor." "" m4(1)
.xx "" "u3b, vax, m68k: provide truth value about your" "processor type." "pdp11," machid(1)
.xx "" "fscv: convert files between M68000 and VAX-11/780" "processors." "" fscv(1M)
.xx "" "alarm: set a" "process's alarm clock." "" alarm(2)
.xx "" "" "prof: display profile data." "" prof(1)
.xx "" "" "profil: execution time profile." "" profil(2)
.xx "" "prof: display" "profile data." "" prof(1)
.xx "" "monitor: prepare execution" "profile." "" monitor(3C)
.xx "" "profil: execution time" "profile." "" profil(2)
.xx "" "" "profile: setting up an environment at login time." "" profile(4)
.xx "" "prf: operating system" "profiler." "" prf(7)
.xx "" "prfstat, prfdc, prfsnap, prfpr: operating system" "profiler." "prfld," profiler(1M)
.xx "" "sadp: disk access" "profiler." "" sadp(1)
.xx "" "sh, rsh: shell, the standard/restricted command" "programming language." "" sh(1)
.xx "" "arithmetic:" "provide drill in number facts." "" arithmetic(6)
.xx "" "pdp11, u3b, vax, m68k:" "provide truth value about your processor type." "" machid(1)
.xx "" "true, false:" "provide truth values." "" true(1)
.xx "" "" "prs: print an SCCS file." "" prs(1)
.xx "" "/lastlogin, monacct, nulladm, prctmp, prdaily," "prtacct, remove, runacct, shutacct, startup,/" "" acctsh(1M)
.xx "" "" "ps: report process status." "" ps(1)
.xx "" "seed48, lcong48: generate uniformly distributed" "pseudo-random numbers." "/mrand48, jrand48, srand48," drand48(3C)
.xx "" "" "ptrace: process trace." "" ptrace(2)
.xx "" "" "ptx: permuted index." "" ptx(1)
.xx "" "ungetc:" "push character back into input stream." "" ungetc(3S)
.xx "on a stream." "" "putc, putchar, fputc, putw: put character or word" "" putc(3S)
.xx "stream." "putc," "putchar, fputc, putw: put character or word on a" "" putc(3S)
.xx "" "" "putpwent: write password file entry." "" putpwent(3C)
.xx "" "" "puts, fputs: put a string on a stream." "" puts(3S)
.xx "utmp file entry." "getutent, getutid, getutline," "pututline, setutent, endutent, utmpname: access" "" getut(3C)
.xx "" "putc, putchar, fputc," "putw: put character or word on a stream." "" putc(3S)
.xx "" "" "pwck, grpck: password/group file checkers." "" pwck(1M)
.xx "" "" "pwd: working directory name." "" pwd(1)
.xx "" "" "qsort: quicker sort." "" qsort(3C)
.xx "" "msgget: get message" "queue." "" msgget(2)
.xx "" "ipcrm: remove a message" "queue, semaphore set or shared memory id." "" ipcrm(1)
.xx "" "qsort:" "quicker sort." "" qsort(3C)
.xx "" "nohup: run a command immune to hangups and" "quits." "" nohup(1)
.xx "" "" "quiz: test your knowledge." "" quiz(6)
.xx "" "srand," "rand: Fortran uniform random-number generator." "" rand(3F)
.xx "" "" "rand, srand: simple random-number generator." "" rand(3C)
.xx "" "rand, srand: simple" "random-number generator." "" rand(3C)
.xx "" "srand, rand: Fortran uniform" "random-number generator." "" rand(3F)
.xx "" "fsplit: split f77," "ratfor, or ef\&l files." "" fsplit(1)
.xx "" "" "ratfor: rational Fortran dialect." "" ratfor(1)
.xx "" "ratfor:" "rational Fortran dialect." "" ratfor(1)
.xx "" "brc, bcheckrc," "rc, powerfail: system initialization shell scripts." "" brc(1M)
.xx "" "getpass:" "read a password." "" getpass(3C)
.xx "object file." "ldtbread:" "read an indexed symbol table entry of a common" "" ldtbread(3X)
.xx "object file." "ldshread, ldnshread:" "read an indexed\/named section header of a common" "" ldshread(3X)
.xx "" "read:" "read from file." "" read(2)
.xx "" "mail, rmail: send mail to users or" "read mail." "" mail(1)
.xx "" "line:" "read one line." "" line(1)
.xx "" "" "read: read from file." "" read(2)
.xx "file." "ldahread:" "read the archive header of a member of an archive" "" ldahread(3X)
.xx "" "ldfhread:" "read the file header of a common object file." "" ldfhread(3X)
.xx "" "ldopen, ldaopen: open a common object file for" "reading." "" ldopen(3X)
.xx "" "open: open for" "reading or writing." "" open(2)
.xx "" "lseek: move" "read/write file pointer." "" lseek(2)
.xx "char: explicit Fortran type/" "int, ifix, idint," "real, float, sngl, dble, cmplx, dcmplx, ichar," "" ftype(3F)
.xx "" "malloc, free," "realloc, calloc: main memory allocator." "" malloc(3C)
.xx "" "signal: specify what to do upon" "receipt of a signal." "" signal(2)
.xx "" "signal: specify Fortran action on" "receipt of a system signal." "" signal(3F)
.xx "" "command summary from per-process accounting" "records." "acctcms:" acctcms(1M)
.xx "" "errdead: extract error" "records from dump." "" errdead(1M)
.xx "" "fwtmp, wtmpfix: manipulate connect accounting" "records." "" fwtmp(1M)
.xx "" "frec:" "recover files from a backup tape." "" frec(1M)
.xx "" "ed," "red: text editor." "" ed(1)
.xx "expression." "" "regcmp, regex: compile and execute a regular" "" regcmp(3X)
.xx "" "" "regcmp: regular expression compile." "" regcmp(1)
.xx "" "make: maintain, update, and" "regenerate groups of programs." "" make(1)
.xx "" "regcmp," "regex: compile and execute a regular expression." "" regcmp(3X)
.xx "routines." "" "regexp: regular expression compile and match" "" regexp(5)
.xx "" "regexp:" "regular expression compile and match routines." "" regexp(5)
.xx "" "regcmp:" "regular expression compile." "" regcmp(1)
.xx "" "regcmp, regex: compile and execute a" "regular expression." "" regcmp(3X)
.xx "" "accept," "reject: allow/prevent LP requests." "" accept(1M)
.xx "" "comm: select or" "reject lines common to two sorted files." "" comm(1)
.xx "" "lorder: find ordering" "relation for an object library." "" lorder(1)
.xx "" "join:" "relational database operator." "" join(1)
.xx "file." "" "reloc: relocation information for a common object" "" reloc(4)
.xx "file." "ldrseek, ldnrseek: seek to" "relocation entries of a section of a common object" "" ldrseek(3X)
.xx "" "reloc:" "relocation information for a common object file." "" reloc(4)
.xx "" "floor, ceil, fmod, fabs: floor, ceiling," "remainder, absolute value functions." "" floor(3M)
.xx "" "mod, amod, dmod: Fortran" "remaindering intrinsic functions." "" mod(3F)
.xx "" "mk: how to" "remake the system and commands." "" mk(8)
.xx "" "calendar:" "reminder service." "" calendar(1)
.xx "" "ct: spawn getty to a" "remote terminal." "" ct(1C)
.xx "" "rmdel:" "remove a delta from an SCCS file." "" rmdel(1)
.xx "memory id." "ipcrm:" "remove a message queue, semaphore set or shared" "" ipcrm(1)
.xx "" "unlink:" "remove directory entry." "" unlink(2)
.xx "" "rm, rmdir:" "remove files or directories." "" rm(1)
.xx "" "deroff:" "remove nroff/troff, tbl, and eqn constructs." "" deroff(1)
.xx "" "/monacct, nulladm, prctmp, prdaily, prtacct," "remove, runacct, shutacct, startup, turnacct: shell/" "" acctsh(1M)
.xx "" "file system consistency check and interactive" "repair." "fsck, fsck1b, dfsck:" fsck(1M)
.xx "" "uniq: report" "repeated lines in a file." "" uniq(1)
.xx "" "rjestat: RJE status" "report and interactive status console." "" rjestat(1C)
.xx "" "clock:" "report CPU time used." "" clock(3C)
.xx "status." "ipcs:" "report inter-process communication facilities" "" ipcs(1)
.xx "" "df:" "report number of free disk blocks." "" df(1M)
.xx "" "errpt: process a" "report of logged errors." "" errpt(1M)
.xx "" "sa1, sa2, sadc: system activity" "report package." "" sar(1M)
.xx "" "timex: time a command;" "report process data and system activity." "" timex(1)
.xx "" "ps:" "report process status." "" ps(1)
.xx "" "uniq:" "report repeated lines in a file." "" uniq(1)
.xx "" "sar: system activity" "reporter." "" sar(1)
.xx "" "fseek, rewind, ftell:" "reposition a file pointer in a stream." "" fseek(3S)
.xx "" "lpsched, lpshut, lpmove: start/stop the LP" "request scheduler and move requests." "" lpsched(1M)
.xx "" "accept, reject: allow/prevent LP" "requests." "" accept(1M)
.xx "" "start/stop the LP request scheduler and move" "requests." "lpsched, lpshut, lpmove:" lpsched(1M)
.xx "" "lp, cancel: send/cancel" "requests to an LP line printer." "" lp(1)
.xx "" "bo: bootstrap operating procedure for system" "restart." "" bo(8)
.xx "" "ldgetname:" "retrieve symbol name for object file." "" ldgetname(3X)
.xx "" "getarg:" "return Fortran command-line argument." "" getarg(3F)
.xx "" "getenv:" "return Fortran environment variable." "" getenv(3F)
.xx "" "mclock:" "return Fortran time accounting." "" mclock(3F)
.xx "" "abs:" "return integer absolute value." "" abs(3C)
.xx "" "len:" "return length of Fortran string." "" len(3F)
.xx "" "index:" "return location of Fortran substring." "" index(3F)
.xx "" "logname:" "return login name of user." "" logname(3X)
.xx "" "getenv:" "return value for environment name." "" getenv(3C)
.xx "" "stat: data" "returned by stat system call." "" stat(5)
.xx "" "reversi: a game of dramatic" "reversals." "" reversi(6)
.xx "" "col: filter" "reverse line-feeds." "" col(1)
.xx "" "" "reversi: a game of dramatic reversals." "" reversi(6)
.xx "stream." "fseek," "rewind, ftell: reposition a file pointer in a" "" fseek(3S)
.xx "" "creat: create a new file or" "rewrite an existing one." "" creat(2)
.xx "" "rjestat:" "RJE status report and interactive status console." "" rjestat(1C)
.xx "console." "" "rjestat: RJE status report and interactive status" "" rjestat(1C)
.xx "" "" "rm, rmdir: remove files or directories." "" rm(1)
.xx "" "mail," "rmail: send mail to users or read mail." "" mail(1)
.xx "" "" "rmdel: remove a delta from an SCCS file." "" rmdel(1)
.xx "" "rm," "rmdir: remove files or directories." "" rm(1)
.xx "" "chroot: change" "root directory." "" chroot(2)
.xx "" "chroot: change" "root directory for a command." "" chroot(1M)
.xx "" "pow, sqrt: exponential, logarithm, power, square" "root functions." "exp, log, log10," exp(3M)
.xx "" "sqrt, dsqrt, csqrt: Fortran square" "root intrinsic function." "" sqrt(3F)
.xx "" "hpd, erase, hardcopy, tekset, td: graphical device" "routines and filters." "" gdev(1G)
.xx "" "ldfcn: common object file access" "routines." "" ldfcn(4)
.xx "" "regexp: regular expression compile and match" "routines." "" regexp(5)
.xx "" "tgoto, tputs: terminal independent operation" "routines." "tgetent, tgetnum, tgetflag, tgetstr," termcap(3)
.xx "" "toc: graphical table of contents" "routines." "" toc(1G)
.xx "programming language." "sh," "rsh: shell, the standard/restricted command" "" sh(1)
.xx "" "and, or, xor, not, lshift," "rshift: Fortran bitwise boolean functions." "" bool(3F)
.xx "" "nice:" "run a command at low priority." "" nice(1)
.xx "" "nohup:" "run a command immune to hangups and quits." "" nohup(1)
.xx "" "runacct:" "run daily accounting." "" runacct(1M)
.xx "" "" "runacct: run daily accounting." "" runacct(1M)
.xx "" "/monacct, nulladm, prctmp, prdaily, prtacct, remove," "runacct, shutacct, startup, turnacct: shell/" "" acctsh(1M)
.xx "" "" "sa1, sa2, sadc: system activity report package." "" sar(1M)
.xx "" "sa1," "sa2, sadc: system activity report package." "" sar(1M)
.xx "" "" "sact: print current SCCS file editing activity." "" sact(1)
.xx "" "sa1, sa2," "sadc: system activity report package." "" sar(1M)
.xx "" "" "sadp: disk access profiler." "" sadp(1)
.xx "" "" "sag: system activity graph." "" sag(1G)
.xx "" "" "sar: system activity reporter." "" sar(1)
.xx "" "brk," "sbrk: change data segment space allocation." "" brk(2)
.xx "" "" "scanf, fscanf, sscanf: convert formatted input." "" scanf(3S)
.xx "" "bfs: big file" "scanner." "" bfs(1)
.xx "" "awk: pattern" "scanning and processing language." "" awk(1)
.xx "printer." "" "scat: concatenate and print files on synchronous" "" scat(1)
.xx "" "" "scc: C compiler for stand-alone programs." "" scc(1)
.xx "" "cdc: change the delta commentary of an" "SCCS delta." "" cdc(1)
.xx "" "comb: combine" "SCCS deltas." "" comb(1)
.xx "" "delta: make a delta (change) to an" "SCCS file." "" delta(1)
.xx "" "sact: print current" "SCCS file editing activity." "" sact(1)
.xx "" "get: get a version of an" "SCCS file." "" get(1)
.xx "" "prs: print an" "SCCS file." "" prs(1)
.xx "" "rmdel: remove a delta from an" "SCCS file." "" rmdel(1)
.xx "" "sccsdiff: compare two versions of an" "SCCS file." "" sccsdiff(1)
.xx "" "sccsfile: format of" "SCCS file." "" sccsfile(4)
.xx "" "unget: undo a previous get of an" "SCCS file." "" unget(1)
.xx "" "val: validate" "SCCS file." "" val(1)
.xx "" "admin: create and administer" "SCCS files." "" admin(1)
.xx "" "what: identify" "SCCS files." "" what(1)
.xx "" "" "sccsdiff: compare two versions of an SCCS file." "" sccsdiff(1)
.xx "" "" "sccsfile: format of SCCS file." "" sccsfile(4)
.xx "" "lpsched, lpshut, lpmove: start/stop the LP request" "scheduler and move requests." "" lpsched(1M)
.xx "" "" "scnhdr: section header for a common object file." "" scnhdr(4)
.xx "ex." "vi:" "screen oriented (visual) display editor based on" "" vi(1)
.xx "" "inittab:" "script for the init process." "" inittab(4)
.xx "" "rc, powerfail: system initialization shell" "scripts." "brc, bcheckrc," brc(1M)
.xx "" "" "sdb: symbolic debugger." "" sdb(1)
.xx "" "" "sdiff: side-by-side difference program." "" sdiff(1)
.xx "" "grep, egrep, fgrep:" "search a file for a pattern." "" grep(1)
.xx "" "acctcom:" "search and print process accounting file(s)." "" acctcom(1)
.xx "" "lsearch: linear" "search and update." "" lsearch(3C)
.xx "" "bsearch: binary" "search." "" bsearch(3C)
.xx "" "hsearch, hcreate, hdestroy: manage hash" "search tables." "" hsearch(3C)
.xx "" "tsearch, tdelete, twalk: manage binary" "search trees." "" tsearch(3C)
.xx "" "jotto:" "secret word game." "" jotto(6)
.xx "" "scnhdr:" "section header for a common object file." "" scnhdr(4)
.xx "" "ldshread, ldnshread: read an indexed\/named" "section header of a common object file." "" ldshread(3X)
.xx "" "ldlseek, ldnlseek: seek to line number entries of a" "section of a common object file." "" ldlseek(3X)
.xx "" "ldrseek, ldnrseek: seek to relocation entries of a" "section of a common object file." "" ldrseek(3X)
.xx "" "ldsseek, ldnsseek: seek to an indexed\/named" "section of a common object file." "" ldsseek(3X)
.xx "" "size: print" "section sizes of common object files." "" size(1)
.xx "" "" "sed: stream editor." "" sed(1)
.xx "" "/lrand48, nrand48, mrand48, jrand48, srand48," "seed48, lcong48: generate uniformly distributed/" "" drand48(3C)
.xx "object file." "ldsseek, ldnsseek:" "seek to an indexed\/named section of a common" "" ldsseek(3X)
.xx "common object file." "ldlseek, ldnlseek:" "seek to line number entries of a section of a" "" ldlseek(3X)
.xx "object file." "ldrseek, ldnrseek:" "seek to relocation entries of a section of a common" "" ldrseek(3X)
.xx "file." "ldohseek:" "seek to the optional file header of a common object" "" ldohseek(3X)
.xx "" "ldtbseek:" "seek to the symbol table of a common object file." "" ldtbseek(3X)
.xx "" "shmget: get shared memory" "segment." "" shmget(2)
.xx "" "brk, sbrk: change data" "segment space allocation." "" brk(2)
.xx "" "comm:" "select or reject lines common to two sorted files." "" comm(1)
.xx "" "greek:" "select terminal filter." "" greek(1)
.xx "" "cut: cut out" "selected fields of each line of a file." "" cut(1)
.xx "" "dump: dump" "selected parts of an object file." "" dump(1)
.xx "" "semctl:" "semaphore control operations." "" semctl(2)
.xx "" "semop:" "semaphore operations." "" semop(2)
.xx "" "ipcrm: remove a message queue," "semaphore set or shared memory id." "" ipcrm(1)
.xx "" "semget: get set of" "semaphores." "" semget(2)
.xx "" "" "semctl: semaphore control operations." "" semctl(2)
.xx "" "" "semget: get set of semaphores." "" semget(2)
.xx "" "" "semop: semaphore operations." "" semop(2)
.xx "" "kill:" "send a signal to a process or a group of processes." "" kill(2)
.xx "" "mail, rmail:" "send mail to users or read mail." "" mail(1)
.xx "" "lp, cancel:" "send/cancel requests to an LP line printer." "" lp(1)
.xx "" "" "setbuf: assign buffering to a stream." "" setbuf(3S)
.xx "" "setuid," "setgid: set user and group IDs." "" setuid(2)
.xx "" "getgrent, getgrgid, getgrnam," "setgrent, endgrent: obtain." "" getgrent(3C)
.xx "" "" "setjmp, longjmp: non-local goto." "" setjmp(3C)
.xx "" "crypt," "setkey, encrypt: generate DES encryption." "" crypt(3C)
.xx "" "" "setmnt: establish mount table." "" setmnt(1M)
.xx "" "" "setpgrp: set process group ID." "" setpgrp(2)
.xx "" "getpwent, getpwuid, getpwnam," "setpwent, endpwent: get password file entry." "" getpwent(3C)
.xx "" "profile:" "setting up an environment at login time." "" profile(4)
.xx "" "gettydefs: speed and terminal" "settings used by getty." "" gettydefs(4)
.xx "" "" "setuid, setgid: set user and group IDs." "" setuid(2)
.xx "entry." "getutent, getutid, getutline, pututline," "setutent, endutent, utmpname: access utmp file" "" getut(3C)
.xx "independent fashion.." "sputl," "sgetl: access long integer data in a machine" "" sputl(3X)
.xx "programming language." "" "sh, rsh: shell, the standard/restricted command" "" sh(1)
.xx "" "shmctl:" "shared memory control operations." "" shmctl(2)
.xx "" "ipcrm: remove a message queue, semaphore set or" "shared memory id." "" ipcrm(1)
.xx "" "shmat, shmdt:" "shared memory operations." "" shmop(2)
.xx "" "shmget: get" "shared memory segment." "" shmget(2)
.xx "" "system: issue a" "shell command from Fortran." "" system(3F)
.xx "" "system: issue a" "shell command." "" system(3S)
.xx "" "remove, runacct, shutacct, startup, turnacct:" "shell procedures for accounting." "/prdaily, prtacct," acctsh(1M)
.xx "" "brc, bcheckrc, rc, powerfail: system initialization" "shell scripts." "" brc(1M)
.xx "language." "sh, rsh:" "shell, the standard/restricted command programming" "" sh(1)
.xx "" "" "shmat, shmdt: shared memory operations." "" shmop(2)
.xx "" "" "shmctl: shared memory control operations." "" shmctl(2)
.xx "" "shmat," "shmdt: shared memory operations." "" shmop(2)
.xx "" "" "shmget: get shared memory segment." "" shmget(2)
.xx "" "/nulladm, prctmp, prdaily, prtacct, remove, runacct," "shutacct, startup, turnacct: shell procedures for/" "" acctsh(1M)
.xx "" "" "shutdown: terminate all processing." "" shutdown(1M)
.xx "" "sdiff:" "side-by-side difference program." "" sdiff(1)
.xx "intrinsic function." "" "sign, isign, dsign: Fortran transfer-of-sign" "" sign(3F)
.xx "" "login:" "sign on." "" login(1)
.xx "" "pause: suspend process until" "signal." "" pause(2)
.xx "" "signal: specify what to do upon receipt of a" "signal." "" signal(2)
.xx "" "specify Fortran action on receipt of a system" "signal." "signal:" signal(3F)
.xx "system signal." "" "signal: specify Fortran action on receipt of a" "" signal(3F)
.xx "signal." "" "signal: specify what to do upon receipt of a" "" signal(2)
.xx "" "kill: send a" "signal to a process or a group of processes." "" kill(2)
.xx "" "ssignal, gsignal: software" "signals." "" ssignal(3C)
.xx "" "lex: generate programs for" "simple lexical tasks." "" lex(1)
.xx "" "rand, srand:" "simple random-number generator." "" rand(3C)
.xx "" "tc: phototypesetter" "simulator." "" tc(1)
.xx "trigonometric functions." "" "sin, cos, tan, asin, acos, atan, atan2:" "" trig(3M)
.xx "" "" "sin, dsin, csin: Fortran sine intrinsic function." "" sin(3F)
.xx "" "sin, dsin, csin: Fortran" "sine intrinsic function." "" sin(3F)
.xx "" "sinh, dsinh: Fortran hyperbolic" "sine intrinsic function." "" sinh(3F)
.xx "" "" "sinh, cosh, tanh: hyperbolic functions." "" sinh(3M)
.xx "function." "" "sinh, dsinh: Fortran hyperbolic sine intrinsic" "" sinh(3F)
.xx "" "" "size: print section sizes of common object files." "" size(1)
.xx "" "size: print section" "sizes of common object files." "" size(1)
.xx "" "" "sky: obtain ephemerides." "" sky(6)
.xx "" "" "sleep: suspend execution for an interval." "" sleep(1)
.xx "" "" "sleep: suspend execution for interval." "" sleep(3C)
.xx "" "mmt, mvt: typeset documents, viewgraphs, and" "slides." "" mmt(1)
.xx "" "troff macro package for typesetting viewgraphs and" "slides." "mv: a" mv(5)
.xx "" "ttyslot: find the" "slot in the utmp file of the current user." "" ttyslot(3C)
.xx "" "spline: interpolate" "smooth curve." "" spline(1G)
.xx "Fortran type/" "int, ifix, idint, real, float," "sngl, dble, cmplx, dcmplx, ichar, char: explicit" "" ftype(3F)
.xx "" "" "sno: SNOBOL interpreter." "" sno(1)
.xx "" "sno:" "SNOBOL interpreter." "" sno(1)
.xx "" "ssignal, gsignal:" "software signals." "" ssignal(3C)
.xx "" "sort:" "sort and/or merge files." "" sort(1)
.xx "" "qsort: quicker" "sort." "" qsort(3C)
.xx "" "" "sort: sort and/or merge files." "" sort(1)
.xx "" "tsort: topological" "sort." "" tsort(1)
.xx "" "comm: select or reject lines common to two" "sorted files." "" comm(1)
.xx "" "brk, sbrk: change data segment" "space allocation." "" brk(2)
.xx "" "ct:" "spawn getty to a remote terminal." "" ct(1C)
.xx "" "fspec: format" "specification in text files." "" fspec(4)
.xx "signal." "signal:" "specify Fortran action on receipt of a system" "" signal(3F)
.xx "" "signal:" "specify what to do upon receipt of a signal." "" signal(2)
.xx "" "getty: set terminal type, modes," "speed, and line discipline." "" getty(1M)
.xx "" "gettydefs:" "speed and terminal settings used by getty." "" gettydefs(4)
.xx "errors." "" "spell, hashmake, spellin, hashcheck: find spelling" "" spell(1)
.xx "" "spell, hashmake," "spellin, hashcheck: find spelling errors." "" spell(1)
.xx "" "spell, hashmake, spellin, hashcheck: find" "spelling errors." "" spell(1)
.xx "" "" "spline: interpolate smooth curve." "" spline(1G)
.xx "" "split:" "split a file into pieces." "" split(1)
.xx "" "csplit: context" "split." "" csplit(1)
.xx "" "fsplit:" "split f77, ratfor, or ef\&l files." "" fsplit(1)
.xx "" "" "split: split a file into pieces." "" split(1)
.xx "" "uuclean: uucp" "spool directory clean-up." "" uuclean(1M)
.xx "" "lpr: line printer" "spooler." "" lpr(1)
.xx "" "lpadmin: configure the LP" "spooling system." "" lpadmin(1M)
.xx "" "printf, fprintf," "sprintf: print formatted output." "" printf(3S)
.xx "independent fashion.." "" "sputl, sgetl: access long integer data in a machine" "" sputl(3X)
.xx "function." "" "sqrt, dsqrt, csqrt: Fortran square root intrinsic" "" sqrt(3F)
.xx "functions." "exp, log, log10, pow," "sqrt: exponential, logarithm, power, square root" "" exp(3M)
.xx "" "log10, pow, sqrt: exponential, logarithm, power," "square root functions." "exp, log," exp(3M)
.xx "" "sqrt, dsqrt, csqrt: Fortran" "square root intrinsic function." "" sqrt(3F)
.xx "generator." "" "srand, rand: Fortran uniform random-number" "" rand(3F)
.xx "" "rand," "srand: simple random-number generator." "" rand(3C)
.xx "" "/erand48, lrand48, nrand48, mrand48, jrand48," "srand48, seed48, lcong48: generate uniformly/" "" drand48(3C)
.xx "" "scanf, fscanf," "sscanf: convert formatted input." "" scanf(3S)
.xx "" "" "ssignal, gsignal: software signals." "" ssignal(3C)
.xx "" "scc: C compiler for" "stand-alone programs." "" scc(1)
.xx "" "stdio:" "standard buffered input/output package." "" stdio(3S)
.xx "" "stdipc:" "standard interprocess communication package." "" stdipc(3C)
.xx "" "sh, rsh: shell, the" "standard/restricted command programming language." "" sh(1)
.xx "requests." "lpsched, lpshut, lpmove:" "start/stop the LP request scheduler and move" "" lpsched(1M)
.xx "" "/prdaily, prtacct, remove, runacct, shutacct," "startup, turnacct: shell procedures for accounting." "" acctsh(1M)
.xx "" "" "stat: data returned by stat system call." "" stat(5)
.xx "" "" "stat, fstat: get file status." "" stat(2)
.xx "commands." "" "stat: statistical network useful with graphical" "" stat(1G)
.xx "" "stat: data returned by" "stat system call." "" stat(5)
.xx "" "stat:" "statistical network useful with graphical commands." "" stat(1G)
.xx "" "f\&f: list filenames and" "statistics for a file system." "" ff(1M)
.xx "" "ustat: get file system" "statistics." "" ustat(2)
.xx "" "rjestat: RJE status report and interactive" "status console." "" rjestat(1C)
.xx "" "lpstat: print LP" "status information." "" lpstat(1)
.xx "" "ferror, feof, clearerr, fileno: stream" "status inquiries." "" ferror(3S)
.xx "" "uustat: uucp" "status inquiry and job control." "" uustat(1C)
.xx "" "ipcs: report inter-process communication facilities" "status." "" ipcs(1)
.xx "" "ps: report process" "status." "" ps(1)
.xx "" "rjestat: RJE" "status report and interactive status console." "" rjestat(1C)
.xx "" "stat, fstat: get file" "status." "" stat(2)
.xx "" "" "stdio: standard buffered input/output package." "" stdio(3S)
.xx "package." "" "stdipc: standard interprocess communication" "" stdipc(3C)
.xx "" "" "stime: set time." "" stime(2)
.xx "" "wait: wait for child process to" "stop or terminate." "" wait(2)
.xx "strlen, strchr, strrchr, strpbrk, strspn, strcspn,/" "" "strcat, strncat, strcmp, strncmp, strcpy, strncpy," "" string(3C)
.xx "" "/strncat, strcmp, strncmp, strcpy, strncpy, strlen," "strchr, strrchr, strpbrk, strspn, strcspn, strtok:/" "" string(3C)
.xx "strrchr, strpbrk, strspn,/" "strcat, strncat," "strcmp, strncmp, strcpy, strncpy, strlen, strchr," "" string(3C)
.xx "strspn, strcspn,/" "strcat, strncat, strcmp, strncmp," "strcpy, strncpy, strlen, strchr, strrchr, strpbrk," "" string(3C)
.xx "" "strncpy, strlen, strchr, strrchr, strpbrk, strspn," "strcspn, strtok: string operations." "/strcpy," string(3C)
.xx "" "sed:" "stream editor." "" sed(1)
.xx "" "fclose, fflush: close or flush a" "stream." "" fclose(3S)
.xx "" "fopen, freopen, fdopen: open a" "stream." "" fopen(3S)
.xx "" "rewind, ftell: reposition a file pointer in a" "stream." "fseek," fseek(3S)
.xx "" "getchar, fgetc, getw: get character or word from" "stream." "getc," getc(3S)
.xx "" "gets, fgets: get a string from a" "stream." "" gets(3S)
.xx "" "putchar, fputc, putw: put character or word on a" "stream." "putc," putc(3S)
.xx "" "puts, fputs: put a string on a" "stream." "" puts(3S)
.xx "" "setbuf: assign buffering to a" "stream." "" setbuf(3S)
.xx "" "ferror, feof, clearerr, fileno:" "stream status inquiries." "" ferror(3S)
.xx "" "ungetc: push character back into input" "stream." "" ungetc(3S)
.xx "" "convert between long integer and base-64 ASCII" "string." "a64l, l64a:" a64l(3C)
.xx "" "gmtime, asctime, tzset: convert date and time to" "string." "ctime, localtime," ctime(3C)
.xx "" "ecvt, fcvt, gcvt: convert floating-point number to" "string." "" ecvt(3C)
.xx "" "gps: graphical primitive" "string, format of graphical files." "" gps(4)
.xx "" "gets, fgets: get a" "string from a stream." "" gets(3S)
.xx "" "len: return length of Fortran" "string." "" len(3F)
.xx "" "puts, fputs: put a" "string on a stream." "" puts(3S)
.xx "" "strchr, strrchr, strpbrk, strspn, strcspn, strtok:" "string operations." "/strcpy, strncpy, strlen," string(3C)
.xx "" "atof: convert ASCII" "string to floating-point number." "" atof(3C)
.xx "" "strtol, atol, atoi: convert" "string to integer." "" strtol(3C)
.xx "from an object file." "" "strip: strip symbol and line number information" "" strip(1)
.xx "object file." "strip:" "strip symbol and line number information from an" "" strip(1)
.xx "" "strcat, strncat, strcmp, strncmp, strcpy, strncpy," "strlen, strchr, strrchr, strpbrk, strspn, strcspn,/" "" string(3C)
.xx "strchr, strrchr, strpbrk, strspn, strcspn,/" "strcat," "strncat, strcmp, strncmp, strcpy, strncpy, strlen," "" string(3C)
.xx "strpbrk, strspn, strcspn,/" "strcat, strncat, strcmp," "strncmp, strcpy, strncpy, strlen, strchr, strrchr," "" string(3C)
.xx "strcspn,/" "strcat, strncat, strcmp, strncmp, strcpy," "strncpy, strlen, strchr, strrchr, strpbrk, strspn," "" string(3C)
.xx "" "strncmp, strcpy, strncpy, strlen, strchr, strrchr," "strpbrk, strspn, strcspn, strtok: string/" "/strcmp," string(3C)
.xx "" "/strcmp, strncmp, strcpy, strncpy, strlen, strchr," "strrchr, strpbrk, strspn, strcspn, strtok: string/" "" string(3C)
.xx "" "/strcpy, strncpy, strlen, strchr, strrchr, strpbrk," "strspn, strcspn, strtok: string operations." "" string(3C)
.xx "" "strlen, strchr, strrchr, strpbrk, strspn, strcspn," "strtok: string operations." "/strcpy, strncpy," string(3C)
.xx "" "" "strtol, atol, atoi: convert string to integer." "" strtol(3C)
.xx "" "fuser: identify processes using a file or file" "structure." "" fuser(1M)
.xx "" "" "stty: set the options for a terminal." "" stty(1)
.xx "" "" "su: become superuser or another user." "" su(1)
.xx "" "intro: introduction to" "subroutines and libraries." "" intro(3)
.xx "" "plot: graphics interface" "subroutines." "" plot(3X)
.xx "" "paste: merge same lines of several files or" "subsequent lines of one file." "" paste(1)
.xx "" "index: return location of Fortran" "substring." "" index(3F)
.xx "" "" "sum: print checksum and block count of a file." "" sum(1)
.xx "" "du:" "summarize disk usage." "" du(1)
.xx "" "acctcms: command" "summary from per-process accounting records." "" acctcms(1M)
.xx "" "sync: update the" "super block." "" sync(1)
.xx "" "sync: update" "super-block." "" sync(2)
.xx "" "su: become" "superuser or another user." "" su(1)
.xx "" "ud: general driver for all disk units" "supported by the M68KVM21 disk controller." "" ud(7)
.xx "" "sleep:" "suspend execution for an interval." "" sleep(1)
.xx "" "sleep:" "suspend execution for interval." "" sleep(3C)
.xx "" "pause:" "suspend process until signal." "" pause(2)
.xx "" "" "swab: swap bytes." "" swab(3C)
.xx "" "swab:" "swap bytes." "" swab(3C)
.xx "file." "strip: strip" "symbol and line number information from an object" "" strip(1)
.xx "" "ldgetname: retrieve" "symbol name for object file." "" ldgetname(3X)
.xx "" "ldtbindex: compute the index of a" "symbol table entry of a common object file." "" ldtbindex(3X)
.xx "" "ldtbread: read an indexed" "symbol table entry of a common object file." "" ldtbread(3X)
.xx "" "syms: common object file" "symbol table format." "" syms(4)
.xx "" "ldtbseek: seek to the" "symbol table of a common object file." "" ldtbseek(3X)
.xx "" "sdb:" "symbolic debugger." "" sdb(1)
.xx "" "" "syms: common object file symbol table format." "" syms(4)
.xx "" "" "sync: update super-block." "" sync(2)
.xx "" "" "sync: update the super block." "" sync(1)
.xx "" "scat: concatenate and print files on" "synchronous printer." "" scat(1)
.xx "" "" "sysdef: system definition." "" sysdef(1M)
.xx "" "perror, errno," "sys errlist, sys nerr: system error messages." "" perror(3C)
.xx "" "perror, errno, sys errlist," "sys nerr: system error messages." "" perror(3C)
.xx "" "uuto, uupick: public UNIX" "System-to-UNIX System file copy." "" uuto(1C)
.xx "" "ldtbindex: compute the index of a symbol" "table entry of a common object file." "" ldtbindex(3X)
.xx "" "ldtbread: read an indexed symbol" "table entry of a common object file." "" ldtbread(3X)
.xx "" "syms: common object file symbol" "table format." "" syms(4)
.xx "" "master: master device information" "table." "" master.dec(4)
.xx "" "mnttab: mounted file system" "table." "" mnttab(4)
.xx "" "ldtbseek: seek to the symbol" "table of a common object file." "" ldtbseek(3X)
.xx "" "toc: graphical" "table of contents routines." "" toc(1G)
.xx "" "setmnt: establish mount" "table." "" setmnt(1M)
.xx "" "tbl: format" "tables for nroff or troff." "" tbl(1)
.xx "" "hsearch, hcreate, hdestroy: manage hash search" "tables." "" hsearch(3C)
.xx "" "tabs: set" "tabs on a terminal." "" tabs(1)
.xx "" "" "tabs: set tabs on a terminal." "" tabs(1)
.xx "" "" "tail: deliver the last part of a file." "" tail(1)
.xx "functions." "sin, cos," "tan, asin, acos, atan, atan2: trigonometric" "" trig(3M)
.xx "" "" "tan, dtan: Fortran tangent intrinsic function." "" tan(3F)
.xx "" "tan, dtan: Fortran" "tangent intrinsic function." "" tan(3F)
.xx "" "tanh, dtanh: Fortran hyperbolic" "tangent intrinsic function." "" tanh(3F)
.xx "function." "" "tanh, dtanh: Fortran hyperbolic tangent intrinsic" "" tanh(3F)
.xx "" "sinh, cosh," "tanh: hyperbolic functions." "" sinh(3M)
.xx "" "tar:" "tape file archiver." "" tar(1)
.xx "" "frec: recover files from a backup" "tape." "" frec(1M)
.xx "" "filesave," "tapesave: daily/weekly 5) file system backup." "" filesave(1M)
.xx "" "" "tar: tape file archiver." "" tar(1)
.xx "" "lex: generate programs for simple lexical" "tasks." "" lex(1)
.xx "" "deroff: remove nroff/troff," "tbl, and eqn constructs." "" deroff(1)
.xx "" "" "tbl: format tables for nroff or troff." "" tbl(1)
.xx "" "" "tc: phototypesetter simulator." "" tc(1)
.xx "" "hpd, erase, hardcopy, tekset," "td: graphical device routines and filters." "" gdev(1G)
.xx "" "tsearch," "tdelete, twalk: manage binary search trees." "" tsearch(3C)
.xx "" "" "tee: pipe fitting." "" tee(1)
.xx "" "hpd, erase, hardcopy," "tekset, td: graphical device routines and filters." "" gdev(1G)
.xx "" "4014: paginator for the" "Tektronix 4014 terminal." "" 4014(1)
.xx "" "init," "telinit: process control initialization." "" init(1M)
.xx "" "tmpnam," "tempnam: create a name for a temporary file." "" tmpnam(3S)
.xx "" "tmpfile: create a" "temporary file." "" tmpfile(3S)
.xx "" "tmpnam, tempnam: create a name for a" "temporary file." "" tmpnam(3S)
.xx "" "" "term: conventional names for terminals." "" term(5)
.xx "" "" "termcap: terminal capability data base." "" termcap(5)
.xx "" "4014: paginator for the Tektronix 4014" "terminal." "" 4014(1)
.xx "" "450: handle special functions of the DASI 450" "terminal." "" 450(1)
.xx "" "termcap:" "terminal capability data base." "" termcap(5)
.xx "" "ct: spawn getty to a remote" "terminal." "" ct(1C)
.xx "" "ctermid: generate filename for" "terminal." "" ctermid(3S)
.xx "" "greek: select" "terminal filter." "" greek(1)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto, tputs:" "terminal independent operation routines." "" termcap(3)
.xx "" "termio: general" "terminal interface." "" termio(7)
.xx "" "tty: controlling" "terminal interface." "" tty(7)
.xx "" "dial: establish an out-going" "terminal line connection." "" dial(3C)
.xx "" "gettydefs: speed and" "terminal settings used by getty." "" gettydefs(4)
.xx "" "stty: set the options for a" "terminal." "" stty(1)
.xx "" "tabs: set tabs on a" "terminal." "" tabs(1)
.xx "" "ttyname, isatty: find name of a" "terminal." "" ttyname(3C)
.xx "" "getty: set" "terminal type, modes, speed, and line discipline." "" getty(1M)
.xx "" "300s: handle special functions of DASI 300 and 300s" "terminals." "300," 300(1)
.xx "" "handle special functions of HP 2640 and 2621-series" "terminals." "hp:" hp(1)
.xx "" "tty: get the" "terminal's name." "" tty(1)
.xx "" "term: conventional names for" "terminals." "" term(5)
.xx "" "kill:" "terminate a process." "" kill(1)
.xx "" "shutdown:" "terminate all processing." "" shutdown(1M)
.xx "" "abort:" "terminate Fortran program." "" abort(3F)
.xx "" "exit,  exit:" "terminate process." "" exit(2)
.xx "" "errstop:" "terminate the error-logging daemon." "" errstop(1M)
.xx "" "wait: wait for child process to stop or" "terminate." "" wait(2)
.xx "" "" "termio: general terminal interface." "" termio(7)
.xx "" "" "test: condition evaluation command." "" test(1)
.xx "" "quiz:" "test your knowledge." "" quiz(6)
.xx "" "ed, red:" "text editor." "" ed(1)
.xx "" "ex:" "text editor." "" ex(1)
.xx "" "edit:" "text editor (variant of ex for casual users)." "" edit(1)
.xx "" "newform: change the format of a" "text file." "" newform(1)
.xx "" "fspec: format specification in" "text files." "" fspec(4)
.xx "" "eqn, neqn, checkeq: format mathematical" "text for nroff or troff." "" eqn(1)
.xx "" "cw, checkcw: prepare constant-width" "text for troff." "" cw(1)
.xx "" "nroff: format" "text." "" nroff(1)
.xx "" "plock: lock process," "text, or data in memory." "" plock(2)
.xx "" "troff: typeset" "text." "" troff(1)
.xx "terminal independent operation routines." "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto, tputs:" "" termcap(3)
.xx "independent operation routines." "tgetent, tgetnum," "tgetflag, tgetstr, tgoto, tputs: terminal" "" termcap(3)
.xx "independent operation routines." "tgetent," "tgetnum, tgetflag, tgetstr, tgoto, tputs: terminal" "" termcap(3)
.xx "operation routines." "tgetent, tgetnum, tgetflag," "tgetstr, tgoto, tputs: terminal independent" "" termcap(3)
.xx "routines." "tgetent, tgetnum, tgetflag, tgetstr," "tgoto, tputs: terminal independent operation" "" termcap(3)
.xx "" "ttt, cubic:" "tic-tac-toe." "" ttt(6)
.xx "activity." "timex:" "time a command; report process data and system" "" timex(1)
.xx "" "time:" "time a command." "" time(1)
.xx "" "mclock: return Fortran" "time accounting." "" mclock(3F)
.xx "" "dcopy: copy file systems for optimal access" "time." "" dcopy(1M)
.xx "" "" "time: get time." "" time(2)
.xx "" "profil: execution" "time profile." "" profil(2)
.xx "" "profile: setting up an environment at login" "time." "" profile(4)
.xx "" "stime: set" "time." "" stime(2)
.xx "" "" "time: time a command." "" time(1)
.xx "" "time: get" "time." "" time(2)
.xx "" "localtime, gmtime, asctime, tzset: convert date and" "time to string." "ctime," ctime(3C)
.xx "" "clock: report CPU" "time used." "" clock(3C)
.xx "" "" "times: get process and child process times." "" times(2)
.xx "" "touch: update access and modification" "times of a file." "" touch(1)
.xx "" "times: get process and child process" "times." "" times(2)
.xx "" "utime: set file access and modification" "times." "" utime(2)
.xx "system activity." "" "timex: time a command; report process data and" "" timex(1)
.xx "" "" "tmpfile: create a temporary file." "" tmpfile(3S)
.xx "file." "" "tmpnam, tempnam: create a name for a temporary" "" tmpnam(3S)
.xx "" "toupper, tolower,  toupper,  tolower," "toascii: translate characters." "" conv(3C)
.xx "" "" "toc: graphical table of contents routines." "" toc(1G)
.xx "" "popen, pclose: initiate pipe" "to/from a process." "" popen(3S)
.xx "" "toupper, tolower,  toupper," " tolower, toascii: translate characters." "" conv(3C)
.xx "characters." "toupper," "tolower,  toupper,  tolower, toascii: translate" "" conv(3C)
.xx "" "tsort:" "topological sort." "" tsort(1)
.xx "" "acctmerg: merge or add" "total accounting files." "" acctmerg(1M)
.xx "file." "" "touch: update access and modification times of a" "" touch(1)
.xx "" "toupper, tolower," " toupper,  tolower, toascii: translate characters." "" conv(3C)
.xx "translate characters." "" "toupper, tolower,  toupper,  tolower, toascii:" "" conv(3C)
.xx "" "" "tplot: graphics filters." "" tplot(1G)
.xx "" "tgetent, tgetnum, tgetflag, tgetstr, tgoto," "tputs: terminal independent operation routines." "" termcap(3)
.xx "" "" "tr: translate characters." "" tr(1)
.xx "" "ptrace: process" "trace." "" ptrace(2)
.xx "" "sign, isign, dsign: Fortran" "transfer-of-sign intrinsic function." "" sign(3F)
.xx "" "toupper, tolower,  toupper,  tolower, toascii:" "translate characters." "" conv(3C)
.xx "" "tr:" "translate characters." "" tr(1)
.xx "" "ftw: walk a file" "tree." "" ftw(3C)
.xx "" "tsearch, tdelete, twalk: manage binary search" "trees." "" tsearch(3C)
.xx "" "sin, cos, tan, asin, acos, atan, atan2:" "trigonometric functions." "" trig(3M)
.xx "" "cw, checkcw: prepare constant-width text for" "troff." "" cw(1)
.xx "" "checkeq: format mathematical text for nroff or" "troff." "eqn, neqn," eqn(1)
.xx "slides." "mv: a" "troff macro package for typesetting viewgraphs and" "" mv(5)
.xx "" "tbl: format tables for nroff or" "troff." "" tbl(1)
.xx "" "" "troff: typeset text." "" troff(1)
.xx "" "" "true, false: provide truth values." "" true(1)
.xx "" "pdp11, u3b, vax, m68k: provide" "truth value about your processor type." "" machid(1)
.xx "" "true, false: provide" "truth values." "" true(1)
.xx "trees." "" "tsearch, tdelete, twalk: manage binary search" "" tsearch(3C)
.xx "" "" "tsort: topological sort." "" tsort(1)
.xx "" "" "ttt, cubic: tic-tac-toe." "" ttt(6)
.xx "" "" "tty: controlling terminal interface." "" tty(7)
.xx "" "" "tty: get the terminal's name." "" tty(1)
.xx "" "greek: graphics for the extended" "TTY-37 type-box." "" greek(5)
.xx "" "" "ttyname, isatty: find name of a terminal." "" ttyname(3C)
.xx "current user." "" "ttyslot: find the slot in the utmp file of the" "" ttyslot(3C)
.xx "" "/prtacct, remove, runacct, shutacct, startup," "turnacct: shell procedures for accounting." "" acctsh(1M)
.xx "" "tsearch, tdelete," "twalk: manage binary search trees." "" tsearch(3C)
.xx "" "dble, cmplx, dcmplx, ichar, char: explicit Fortran" "type conversion." "/ifix, idint, real, float, sngl," ftype(3F)
.xx "" "file: determine file" "type." "" file(1)
.xx "" "vax, m68k: provide truth value about your processor" "type." "pdp11, u3b," machid(1)
.xx "" "getty: set terminal" "type, modes, speed, and line discipline." "" getty(1M)
.xx "" "greek: graphics for the extended TTY-37" "type-box." "" greek(5)
.xx "" "" "types: primitive system data types." "" types(5)
.xx "" "types: primitive system data" "types." "" types(5)
.xx "" "mmt, mvt:" "typeset documents, viewgraphs, and slides." "" mmt(1)
.xx "" "troff:" "typeset text." "" troff(1)
.xx "" "mv: a troff macro package for" "typesetting viewgraphs and slides." "" mv(5)
.xx "" "ctime, localtime, gmtime, asctime," "tzset: convert date and time to string." "" ctime(3C)
.xx "processor type." "pdp11," "u3b, vax, m68k: provide truth value about your" "" machid(1)
.xx "the M68KVM21 disk controller." "" "ud: general driver for all disk units supported by" "" ud(7)
.xx "" "getpw: get name from" "UID." "" getpw(3C)
.xx "" "" "ulimit: get and set user limits." "" ulimit(2)
.xx "" "" "umask: set and get file creation mask." "" umask(2)
.xx "" "" "umask: set file-creation mode mask." "" umask(1)
.xx "" "mount," "umount: mount and dismount file system." "" mount(1M)
.xx "" "" "umount: unmount a file system." "" umount(2)
.xx "" "" "uname: get name of current operating system." "" uname(2)
.xx "" "" "uname: print name of current UNIX System." "" uname(1)
.xx "" "unget:" "undo a previous get of an SCCS file." "" unget(1)
.xx "" "" "unget: undo a previous get of an SCCS file." "" unget(1)
.xx "" "" "ungetc: push character back into input stream." "" ungetc(3S)
.xx "" "srand, rand: Fortran" "uniform random-number generator." "" rand(3F)
.xx "" "/jrand48, srand48, seed48, lcong48: generate" "uniformly distributed pseudo-random numbers." "" drand48(3C)
.xx "" "" "uniq: report repeated lines in a file." "" uniq(1)
.xx "" "mktemp: make a" "unique filename." "" mktemp(3C)
.xx "" "" "units: conversion program." "" units(1)
.xx "" "ud: general driver for all disk" "units supported by the M68KVM21 disk controller." "" ud(7)
.xx "" "link," "unlink: exercise link and unlink system calls." "" link(1M)
.xx "" "" "unlink: remove directory entry." "" unlink(2)
.xx "" "link, unlink: exercise link and" "unlink system calls." "" link(1M)
.xx "" "umount:" "unmount a file system." "" umount(2)
.xx "" "pack, pcat," "unpack: compress and expand files." "" pack(1)
.xx "" "touch:" "update access and modification times of a file." "" touch(1)
.xx "" "make: maintain," "update, and regenerate groups of programs." "" make(1)
.xx "" "lsearch: linear search and" "update." "" lsearch(3C)
.xx "" "sync:" "update super-block." "" sync(2)
.xx "" "sync:" "update the super block." "" sync(1)
.xx "" "du: summarize disk" "usage." "" du(1)
.xx "" "stat: statistical network" "useful with graphical commands." "" stat(1G)
.xx "" "id: print" "user and group IDs and names." "" id(1)
.xx "" "setuid, setgid: set" "user and group IDs." "" setuid(2)
.xx "" "cuserid: get character login name of the" "user." "" cuserid(3S)
.xx "group/" "getuid, geteuid, getgid, getegid: get real" "user, effective user, real group, and effective" "" getuid(2)
.xx "" "environ:" "user environment." "" environ(5)
.xx "" "ulimit: get and set" "user limits." "" ulimit(2)
.xx "" "logname: return login name of" "user." "" logname(3X)
.xx "" "geteuid, getgid, getegid: get real user, effective" "user, real group, and effective group IDs." "getuid," getuid(2)
.xx "" "su: become superuser or another" "user." "" su(1)
.xx "" "find the slot in the utmp file of the current" "user." "ttyslot:" ttyslot(3C)
.xx "" "write: write to another" "user." "" write(1)
.xx "" "edit: text editor (variant of ex for casual" "users)." "" edit(1)
.xx "" "mail, rmail: send mail to" "users or read mail." "" mail(1)
.xx "" "wall: write to all" "users." "" wall(1M)
.xx "" "fuser: identify processes" "using a file or file structure." "" fuser(1M)
.xx "" "" "ustat: get file system statistics." "" ustat(2)
.xx "" "gutil: graphical" "utilities." "" gutil(1G)
.xx "" "" "utime: set file access and modification times." "" utime(2)
.xx "" "utmp, wtmp:" "utmp and wtmp entry formats." "" utmp(4)
.xx "" "pututline, setutent, endutent, utmpname: access" "utmp file entry." "getutent, getutid, getutline," getut(3C)
.xx "" "ttyslot: find the slot in the" "utmp file of the current user." "" ttyslot(3C)
.xx "" "" "utmp, wtmp: utmp and wtmp entry formats." "" utmp(4)
.xx "" "getutid, getutline, pututline, setutent, endutent," "utmpname: access utmp file entry." "getutent," getut(3C)
.xx "" "" "uuclean: uucp spool directory clean-up." "" uuclean(1M)
.xx "" "uusub: monitor" "uucp network." "" uusub(1M)
.xx "" "uuclean:" "uucp spool directory clean-up." "" uuclean(1M)
.xx "" "uustat:" "uucp status inquiry and job control." "" uustat(1C)
.xx "" "" "uucp, uulog, uuname: unix to unix copy." "" uucp(1C)
.xx "" "uucp," "uulog, uuname: unix to unix copy." "" uucp(1C)
.xx "" "uucp, uulog," "uuname: unix to unix copy." "" uucp(1C)
.xx "copy." "uuto," "uupick: public UNIX System-to-UNIX System file" "" uuto(1C)
.xx "" "" "uustat: uucp status inquiry and job control." "" uustat(1C)
.xx "" "" "uusub: monitor uucp network." "" uusub(1M)
.xx "file copy." "" "uuto, uupick: public UNIX System-to-UNIX System" "" uuto(1C)
.xx "" "" "uux: unix to unix command execution." "" uux(1C)
.xx "" "" "val: validate SCCS file." "" val(1)
.xx "" "val:" "validate SCCS file." "" val(1)
.xx "" "pdp11, u3b, vax, m68k: provide truth" "value about your processor type." "" machid(1)
.xx "" "abs: return integer absolute" "value." "" abs(3C)
.xx "" "abs, iabs, dabs, cabs, zabs: Fortran absolute" "value." "" abs(3F)
.xx "" "getenv: return" "value for environment name." "" getenv(3C)
.xx "" "fmod, fabs: floor, ceiling, remainder, absolute" "value functions." "floor, ceil," floor(3M)
.xx "" "true, false: provide truth" "values." "" true(1)
.xx "" "getenv: return Fortran environment" "variable." "" getenv(3F)
.xx "" "edit: text editor" "(variant of ex for casual users)." "" edit(1)
.xx "type." "pdp11, u3b," "vax, m68k: provide truth value about your processor" "" machid(1)
.xx "" "fscv: convert files between M68000 and" "VAX-11/780 processors." "" fscv(1M)
.xx "" "" "vc: version control." "" vc(1)
.xx "" "getopt: get option letter from argument" "vector." "" getopt(3C)
.xx "" "assert:" "verify program assertion." "" assert(3X)
.xx "" "vc:" "version control." "" vc(1)
.xx "" "get: get a" "version of an SCCS file." "" get(1)
.xx "" "sccsdiff: compare two" "versions of an SCCS file." "" sccsdiff(1)
.xx "on ex." "" "vi: screen oriented (visual) display editor based" "" vi(1)
.xx "" "mmt, mvt: typeset documents," "viewgraphs, and slides." "" mmt(1)
.xx "" "mv: a troff macro package for typesetting" "viewgraphs and slides." "" mv(5)
.xx "" "vi: screen oriented" "(visual) display editor based on ex." "" vi(1)
.xx "checking." "" "volcopy, labelit: copy file systems with label" "" volcopy(1M)
.xx "" "file system: format of system" "volume." "" fs(4)
.xx "" "" "wait: await completion of process." "" wait(1)
.xx "" "wait:" "wait for child process to stop or terminate." "" wait(2)
.xx "" "" "wait: wait for child process to stop or terminate." "" wait(2)
.xx "" "ftw:" "walk a file tree." "" ftw(3C)
.xx "" "" "wall: write to all users." "" wall(1M)
.xx "" "" "wc: word count." "" wc(1)
.xx "" "" "what: identify SCCS files." "" what(1)
.xx "" "signal: specify" "what to do upon receipt of a signal." "" signal(2)
.xx "" "crash:" "what to do when the system crashes." "" crash.m68(8)
.xx "" "whodo:" "who is doing what." "" whodo(1M)
.xx "" "who:" "who is on the system." "" who(1)
.xx "" "" "who: who is on the system." "" who(1)
.xx "" "" "whodo: who is doing what." "" whodo(1M)
.xx "" "cd: change" "working directory." "" cd(1)
.xx "" "chdir: change" "working directory." "" chdir(2)
.xx "" "getcwd: get pathname of current" "working directory." "" getcwd(3C)
.xx "" "pwd:" "working directory name." "" pwd(1)
.xx "" "write:" "write on a file." "" write(2)
.xx "" "putpwent:" "write password file entry." "" putpwent(3C)
.xx "" "wall:" "write to all users." "" wall(1M)
.xx "" "write:" "write to another user." "" write(1)
.xx "" "" "write: write on a file." "" write(2)
.xx "" "" "write: write to another user." "" write(1)
.xx "" "open: open for reading or" "writing." "" open(2)
.xx "" "utmp, wtmp: utmp and" "wtmp entry formats." "" utmp(4)
.xx "" "utmp," "wtmp: utmp and wtmp entry formats." "" utmp(4)
.xx "" "fwtmp," "wtmpfix: manipulate connect accounting records." "" fwtmp(1M)
.xx "" "" "wump: the game of hunt-the-wumpus." "" wump(6)
.xx "command." "" "xargs: construct argument list(s) and execute" "" xargs(1)
.xx "functions." "and, or," "xor, not, lshift, rshift: Fortran bitwise boolean" "" bool(3F)
.xx "" "j0, j1, jn," "y0, y1, yn: Bessel functions." "" bessel(3M)
.xx "" "j0, j1, jn, y0," "y1, yn: Bessel functions." "" bessel(3M)
.xx "" "" "yacc: yet another compiler-compiler." "" yacc(1)
.xx "" "j0, j1, jn, y0, y1," "yn: Bessel functions." "" bessel(3M)
.xx "" "abs, iabs, dabs, cabs," "zabs: Fortran absolute value." "" abs(3F)
.xx "" "cm16:" "16Mb Cartridge Module Drive." "" cm16(7)
.xx "" "lrk25:" "25Mb Lark Module Drive." "" lrk25(7)
.xx "" "hp: handle special functions of HP 2640 and" "2621-series terminals." "" hp(1)
.xx "" "hp: handle special functions of HP" "2640 and 2621-series terminals." "" hp(1)
.xx "300s terminals." "" "300, 300s: handle special functions of DASI 300 and" "" 300(1)
.xx "" "300, 300s: handle special functions of DASI" "300 and 300s terminals." "" 300(1)
.xx "terminals." "300," "300s: handle special functions of DASI 300 and 300s" "" 300(1)
.xx "" "300, 300s: handle special functions of DASI 300 and" "300s terminals." "" 300(1)
.xx "" "l3tol, ltol3: convert between" "3-byte integers and long integers." "" l3tol(3C)
.xx "" "diff3:" "3-way differential file comparison." "" diff3(1)
.xx "" "" "4014: paginator for the Tektronix 4014 terminal." "" 4014(1)
.xx "" "4014: paginator for the Tektronix" "4014 terminal." "" 4014(1)
.xx "terminal." "" "450: handle special functions of the DASI 450" "" 450(1)
.xx "" "450: handle special functions of the DASI" "450 terminal." "" 450(1)
.xx "" "config: configure" "5)." "" config.68(1M)
.xx "" "filesave, tapesave: daily/weekly" "5) file system backup." "" filesave(1M)
.xx "" "cu: call another" "5) system." "" cu(1C)
.xx "" "f77: Fortran" "77 compiler." "" f77(1)
.xx "" "cm80:" "80Mb Cartridge Module Drive." "" cm80(7)
.xx "base-64 ASCII string." "" "a64l, l64a: convert between long integer and" "" a64l(3C)
.xx "" "" "abort: generate an IOT fault." "" abort(3C)
.xx "" "" "abort: terminate Fortran program." "" abort(3F)
.xx "value." "" "abs, iabs, dabs, cabs, zabs: Fortran absolute" "" abs(3F)
.xx "" "" "abs: return integer absolute value." "" abs(3C)
.xx "" "abs: return integer" "absolute value." "" abs(3C)
.xx "" "abs, iabs, dabs, cabs, zabs: Fortran" "absolute value." "" abs(3F)
.xx "" "floor, ceil, fmod, fabs: floor, ceiling, remainder," "absolute value functions." "" floor(3M)
.xx "" "" "accept, reject: allow/prevent LP requests." "" accept(1M)
.xx "" "touch: update" "access and modification times of a file." "" touch(1)
.xx "" "utime: set file" "access and modification times." "" utime(2)
.xx "" "" "access: determine accessibility of a file." "" access(2)
.xx "" "graphics:" "access graphical and numerical commands." "" graphics(1G)
.xx "fashion.." "sputl, sgetl:" "access long integer data in a machine independent" "" sputl(3X)
.xx "" "sadp: disk" "access profiler." "" sadp(1)
.xx "" "ldfcn: common object file" "access routines." "" ldfcn(4)
.xx "" "dcopy: copy file systems for optimal" "access time." "" dcopy(1M)
.xx "" "getutline, pututline, setutent, endutent, utmpname:" "access utmp file entry." "getutent, getutid," getut(3C)
.xx "" "access: determine" "accessibility of a file." "" access(2)
.xx "" "acct: enable or disable process" "accounting." "" acct(2)
.xx "" "acctcon1, acctcon2: connect-time" "accounting." "" acctcon(1M)
.xx "" "acctprc1, acctprc2: process" "accounting." "" acctprc(1M)
.xx "" "shutacct, startup, turnacct: shell procedures for" "accounting." "/prdaily, prtacct, remove, runacct," acctsh(1M)
.xx "" "acctdisk, acctdusg, accton, acctwtmp: overview of" "accounting and miscellaneous accounting commands." "" acct(1M)
.xx "" "acctwtmp: overview of accounting and miscellaneous" "accounting commands." "acctdisk, acctdusg, accton," acct(1M)
.xx "" "acct: per-process" "accounting file format." "" acct(4)
.xx "" "acctcom: search and print process" "accounting file(s)." "" acctcom(1)
.xx "" "acctmerg: merge or add total" "accounting files." "" acctmerg(1M)
.xx "" "mclock: return Fortran time" "accounting." "" mclock(3F)
.xx "" "acctcms: command summary from per-process" "accounting records." "" acctcms(1M)
.xx "" "fwtmp, wtmpfix: manipulate connect" "accounting records." "" fwtmp(1M)
.xx "" "runacct: run daily" "accounting." "" runacct(1M)
.xx "" "" "acct: enable or disable process accounting." "" acct(2)
.xx "" "" "acct: per-process accounting file format." "" acct(4)
.xx "accounting records." "" "acctcms: command summary from per-process" "" acctcms(1M)
.xx "file(s)." "" "acctcom: search and print process accounting" "" acctcom(1)
.xx "" "" "acctcon1, acctcon2: connect-time accounting." "" acctcon(1M)
.xx "" "acctcon1," "acctcon2: connect-time accounting." "" acctcon(1M)
.xx "accounting and miscellaneous accounting commands." "" "acctdisk, acctdusg, accton, acctwtmp: overview of" "" acct(1M)
.xx "and miscellaneous accounting commands." "acctdisk," "acctdusg, accton, acctwtmp: overview of accounting" "" acct(1M)
.xx "" "" "acctmerg: merge or add total accounting files." "" acctmerg(1M)
.xx "miscellaneous accounting/" "acctdisk, acctdusg," "accton, acctwtmp: overview of accounting and" "" acct(1M)
.xx "" "" "acctprc1, acctprc2: process accounting." "" acctprc(1M)
.xx "" "acctprc1," "acctprc2: process accounting." "" acctprc(1M)
.xx "accounting commands." "acctdisk, acctdusg, accton," "acctwtmp: overview of accounting and miscellaneous" "" acct(1M)
.xx "Adapter." "" "acia: Asynchronous Communications Interface" "" acia(7)
.xx "" "sin, cos, tan, asin," "acos, atan, atan2: trigonometric functions." "" trig(3M)
.xx "" "" "acos, dacos: Fortran arccosine intrinsic function." "" acos(3F)
.xx "" "killall: kill all" "active processes." "" killall(1M)
.xx "" "sag: system" "activity graph." "" sag(1G)
.xx "" "sa1, sa2, sadc: system" "activity report package." "" sar(1M)
.xx "" "sar: system" "activity reporter." "" sar(1)
.xx "" "sact: print current SCCS file editing" "activity." "" sact(1)
.xx "" "time a command; report process data and system" "activity." "timex:" timex(1)
.xx "" "acia: Asynchronous Communications Interface" "Adapter." "" acia(7)
.xx "" "mosd: the OSDD" "adapter macro package for formatting documents." "" mosd(5)
.xx "" "acctmerg: merge or" "add total accounting files." "" acctmerg(1M)
.xx "" "" "admin: create and administer SCCS files." "" admin(1)
.xx "" "admin: create and" "administer SCCS files." "" admin(1)
.xx "argument." "" "aimag, dimag: Fortran imaginary part of complex" "" aimag(3F)
.xx "function." "" "aint, dint: Fortran integer part intrinsic" "" aint(3F)
.xx "" "alarm: set a process's" "alarm clock." "" alarm(2)
.xx "" "" "alarm: set a process's alarm clock." "" alarm(2)
.xx "" "brk, sbrk: change data segment space" "allocation." "" brk(2)
.xx "" "malloc, free, realloc, calloc: main memory" "allocator." "" malloc(3C)
.xx "" "accept, reject:" "allow/prevent LP requests." "" accept(1M)
.xx "intrinsic function." "log," "alog, dlog, clog: Fortran natural logarithm" "" log(3F)
.xx "function." "log10," "alog10, dlog10: Fortran common logarithm intrinsic" "" log10(3F)
.xx "functions." "max, max0," "amax0, max1, amax1, dmax1: Fortran maximum-value" "" max(3F)
.xx "" "max, max0, amax0, max1," "amax1, dmax1: Fortran maximum-value functions." "" max(3F)
.xx "functions." "min, min0," "amin0, min1, amin1, dmin1: Fortran minimum-value" "" min(3F)
.xx "" "min, min0, amin0, min1," "amin1, dmin1: Fortran minimum-value functions." "" min(3F)
.xx "functions." "mod," "amod, dmod: Fortran remaindering intrinsic" "" mod(3F)
.xx "" "fsba: file system block" "analyzer." "" fsba(1M)
.xx "boolean functions." "" "and, or, xor, not, lshift, rshift: Fortran bitwise" "" bool(3F)
.xx "" "sort: sort" "and/or merge files." "" sort(1)
.xx "functions." "" "anint, dnint, nint, idnint: Fortran nearest integer" "" round(3F)
.xx "" "" "a.out: common assembler and link editor output." "" a.out(4)
.xx "" "aouthdr: optional" "aout header." "" aouthdr(4)
.xx "" "" "aouthdr: optional aout header." "" aouthdr(4)
.xx "" "intro: introduction to commands and" "application programs." "" intro(1)
.xx "" "introduction to system maintenance commands and" "application programs." "intro:" intro(1M)
.xx "archives." "" "ar: archive and library maintainer for portable" "" ar(1)
.xx "" "" "ar: common archive file format." "" ar(4)
.xx "" "bc:" "arbitrary-precision arithmetic language." "" bc(1)
.xx "" "acos, dacos: Fortran" "arccosine intrinsic function." "" acos(3F)
.xx "archives." "ar:" "archive and library maintainer for portable" "" ar(1)
.xx "" "cpio: format of cpio" "archive." "" cpio(4)
.xx "" "ar: common" "archive file format." "" ar(4)
.xx "" "ldahread: read the archive header of a member of an" "archive file." "" ldahread(3X)
.xx "" "ldahread: read the" "archive header of a member of an archive file." "" ldahread(3X)
.xx "" "tar: tape file" "archiver." "" tar(1)
.xx "" "ar: archive and library maintainer for portable" "archives." "" ar(1)
.xx "" "cpio: copy file" "archives in and out." "" cpio(1)
.xx "" "asin, dasin: Fortran" "arcsine intrinsic function." "" asin(3F)
.xx "" "atan2, datan2: Fortran" "arctangent intrinsic function." "" atan2(3F)
.xx "" "atan, datan: Fortran" "arctangent intrinsic function." "" atan(3F)
.xx "" "aimag, dimag: Fortran imaginary part of complex" "argument." "" aimag(3F)
.xx "" "getarg: return Fortran command-line" "argument." "" getarg(3F)
.xx "" "xargs: construct" "argument list(s) and execute command." "" xargs(1)
.xx "" "getopt: get option letter from" "argument vector." "" getopt(3C)
.xx "" "expr: evaluate" "arguments as an expression." "" expr(1)
.xx "" "echo: echo" "arguments." "" echo(1)
.xx "" "bc: arbitrary-precision" "arithmetic language." "" bc(1)
.xx "" "" "arithmetic: provide drill in number facts." "" arithmetic(6)
.xx "" "expr: evaluate arguments" "as an expression." "" expr(1)
.xx "" "" "as, ljas: common assembler." "" as(1)
.xx "" "asa: interpret" "ASA carriage control characters." "" asa(1)
.xx "" "" "asa: interpret ASA carriage control characters." "" asa(1)
.xx "" "ascii: map of" "ASCII character set." "" ascii(5)
.xx "" "" "ascii: map of ASCII character set." "" ascii(5)
.xx "" "l64a: convert between long integer and base-64" "ASCII string." "a64l," a64l(3C)
.xx "" "atof: convert" "ASCII string to floating-point number." "" atof(3C)
.xx "" "ctime, localtime, gmtime," "asctime, tzset: convert date and time to string." "" ctime(3C)
.xx "" "sin, cos, tan," "asin, acos, atan, atan2: trigonometric functions." "" trig(3M)
.xx "" "" "asin, dasin: Fortran arcsine intrinsic function." "" asin(3F)
.xx "" "help:" "ask for help." "" help(1)
.xx "" "a.out: common" "assembler and link editor output." "" a.out(4)
.xx "" "as, ljas: common" "assembler." "" as(1)
.xx "" "" "assert: verify program assertion." "" assert(3X)
.xx "" "assert: verify program" "assertion." "" assert(3X)
.xx "" "setbuf:" "assign buffering to a stream." "" setbuf(3S)
.xx "" "acia:" "Asynchronous Communications Interface Adapter." "" acia(7)
.xx "" "sin, cos, tan, asin, acos," "atan, atan2: trigonometric functions." "" trig(3M)
.xx "" "" "atan, datan: Fortran arctangent intrinsic function." "" atan(3F)
.xx "function." "" "atan2, datan2: Fortran arctangent intrinsic" "" atan2(3F)
.xx "" "sin, cos, tan, asin, acos, atan," "atan2: trigonometric functions." "" trig(3M)
.xx "number." "" "atof: convert ASCII string to floating-point" "" atof(3C)
.xx "" "strtol, atol," "atoi: convert string to integer." "" strtol(3C)
.xx "" "strtol," "atol, atoi: convert string to integer." "" strtol(3C)
.xx "" "wait:" "await completion of process." "" wait(1)
.xx "" "" "awk: pattern scanning and processing language." "" awk(1)
.xx "" "ungetc: push character" "back into input stream." "" ungetc(3S)
.xx "" "" "back: the game of backgammon." "" back(6)
.xx "" "back: the game of" "backgammon." "" back(6)
.xx "" "filesave, tapesave: daily/weekly 5) file system" "backup." "" filesave(1M)
.xx "" "finc: fast incremental" "backup." "" finc(1M)
.xx "" "frec: recover files from a" "backup tape." "" frec(1M)
.xx "" "" "banner: make posters." "" banner(1)
.xx "" "termcap: terminal capability data" "base." "" termcap(5)
.xx "" "a64l, l64a: convert between long integer and" "base-64 ASCII string." "" a64l(3C)
.xx "" "vi: screen oriented (visual) display editor" "based on ex." "" vi(1)
.xx "" "" "basename, dirname: deliver portions of pathnames." "" basename(1)
.xx "" "" "bc: arbitrary-precision arithmetic language." "" bc(1)
.xx "shell scripts." "brc," "bcheckrc, rc, powerfail: system initialization" "" brc(1M)
.xx "" "" "bcopy: interactive block copy." "" bcopy(1M)
.xx "" "" "bdiff: file comparator for large files." "" bdiff(1)
.xx "" "cb: C program" "beautifier." "" cb(1)
.xx "" "j0, j1, jn, y0, y1, yn:" "Bessel functions." "" bessel(3M)
.xx "" "" "bfs: big file scanner." "" bfs(1)
.xx "" "fread, fwrite:" "binary input/output." "" fread(3S)
.xx "" "bsearch:" "binary search." "" bsearch(3C)
.xx "" "tsearch, tdelete, twalk: manage" "binary search trees." "" tsearch(3C)
.xx "" "and, or, xor, not, lshift, rshift: Fortran" "bitwise boolean functions." "" bool(3F)
.xx "" "" "bj: the game of black jack." "" bj(6)
.xx "" "bj: the game of" "black jack." "" bj(6)
.xx "" "fsba: file system" "block analyzer." "" fsba(1M)
.xx "" "bcopy: interactive" "block copy." "" bcopy(1M)
.xx "" "sum: print checksum and" "block count of a file." "" sum(1)
.xx "" "sync: update the super" "block." "" sync(1)
.xx "" "df: report number of free disk" "blocks." "" df(1M)
.xx "restart." "" "bo: bootstrap operating procedure for system" "" bo(8)
.xx "" "and, or, xor, not, lshift, rshift: Fortran bitwise" "boolean functions." "" bool(3F)
.xx "" "bo:" "bootstrap operating procedure for system restart." "" bo(8)
.xx "shell scripts." "" "brc, bcheckrc, rc, powerfail: system initialization" "" brc(1M)
.xx "" "" "brk, sbrk: change data segment space allocation." "" brk(2)
.xx "programs." "" "bs: a compiler/interpreter for modest-sized" "" bs(1)
.xx "" "" "bsearch: binary search." "" bsearch(3C)
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)
.xx "" "setbuf: assign" "buffering to a stream." "" setbuf(3S)
.xx "" "mknod:" "build special file." "" mknod(1M)
.xx "" "swab: swap" "bytes." "" swab(3C)
.xx "" "cc\-" "C compiler." "" cc(1)
.xx "" "scc:" "C compiler for stand-alone programs." "" scc(1)
.xx "" "cflow: generate" "C flow graph." "" cflow(1)
.xx "" "cpp: the" "C language preprocessor." "" cpp(1)
.xx "" "cb:" "C program beautifier." "" cb(1)
.xx "" "lint: a" "C program checker." "" lint(1)
.xx "" "cxref: generate" "C program cross-reference." "" cxref(1)
.xx "" "abs, iabs, dabs," "cabs, zabs: Fortran absolute value." "" abs(3F)
.xx "" "" "cal: print calendar." "" cal(1)
.xx "" "dc: desk" "calculator." "" dc(1)
.xx "" "cal: print" "calendar." "" cal(1)
.xx "" "" "calendar: reminder service." "" calendar(1)
.xx "" "cu:" "call another 5) system." "" cu(1C)
.xx "" "stat: data returned by stat system" "call." "" stat(5)
.xx "" "malloc, free, realloc," "calloc: main memory allocator." "" malloc(3C)
.xx "" "intro: introduction to system" "calls and error numbers." "" intro(2)
.xx "" "link, unlink: exercise link and unlink system" "calls." "" link(1M)
.xx "" "lp," "cancel: send/cancel requests to an LP line printer." "" lp(1)
.xx "" "termcap: terminal" "capability data base." "" termcap(5)
.xx "" "pnch: file format for" "card images." "" pnch(4)
.xx "" "asa: interpret ASA" "carriage control characters." "" asa(1)
.xx "" "cm16: 16Mb" "Cartridge Module Drive." "" cm16(7)
.xx "" "cm80: 80Mb" "Cartridge Module Drive." "" cm80(7)
.xx "" "edit: text editor (variant of ex for" "casual users)." "" edit(1)
.xx "" "" "cat: concatenate and print files." "" cat(1)
.xx "" "" "cb: C program beautifier." "" cb(1)
.xx "" "" "cc\- C compiler." "" cc(1)
.xx "" "cos, dcos," "ccos: Fortran cosine intrinsic function." "" cos(3F)
.xx "" "" "cd: change working directory." "" cd(1)
.xx "" "" "cdc: change the delta commentary of an SCCS delta." "" cdc(1)
.xx "absolute value functions." "floor," "ceil, fmod, fabs: floor, ceiling, remainder," "" floor(3M)
.xx "" "floor, ceil, fmod, fabs: floor," "ceiling, remainder, absolute value functions." "" floor(3M)
.xx "" "exp, dexp," "cexp: Fortran exponential intrinsic function." "" exp(3F)
.xx "" "" "cflow: generate C flow graph." "" cflow(1)
.xx "" "delta: make a delta" "(change) to an SCCS file." "" delta(1)
.xx "" "pipe: create an interprocess" "channel." "" pipe(2)
.xx "" "real, float, sngl, dble, cmplx, dcmplx, ichar," "char: explicit Fortran type conversion." "/idint," ftype(3F)
.xx "" "ungetc: push" "character back into input stream." "" ungetc(3S)
.xx "" "eqnchar: special" "character definitions for eqn and neqn." "" eqnchar(5)
.xx "" "cuserid: get" "character login name of the user." "" cuserid(3S)
.xx "" "getc, getchar, fgetc, getw: get" "character or word from stream." "" getc(3S)
.xx "" "putc, putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)
.xx "" "ascii: map of ASCII" "character set." "" ascii(5)
.xx "" "asa: interpret ASA carriage control" "characters." "" asa(1)
.xx "" "tolower,  toupper,  tolower, toascii: translate" "characters." "toupper," conv(3C)
.xx "" "isprint, isgraph, iscntrl, isascii: classify" "characters." "/isxdigit, isalnum, isspace, ispunct," ctype(3C)
.xx "" "tr: translate" "characters." "" tr(1)
.xx "nulladm, prctmp, prdaily, prtacct, remove,/" "" "chargefee, ckpacct, dodisk, lastlogin, monacct," "" acctsh(1M)
.xx "" "" "chdir: change working directory." "" chdir(2)
.xx "" "fsck, fsck1b, dfsck: file system consistency" "check and interactive repair." "" fsck(1M)
.xx "" "" "checkall: faster file system checking procedure." "" checkall(1M)
.xx "" "cw," "checkcw: prepare constant-width text for troff." "" cw(1)
.xx "troff." "eqn, neqn," "checkeq: format mathematical text for nroff or" "" eqn(1)
.xx "" "lint: a C program" "checker." "" lint(1)
.xx "" "pwck, grpck: password/group file" "checkers." "" pwck(1M)
.xx "" "checkall: faster file system" "checking procedure." "" checkall(1M)
.xx "" "volcopy, labelit: copy file systems with label" "checking." "" volcopy(1M)
.xx "" "" "checklist: list of file systems processed by fsck." "" checklist(4)
.xx "MM macros." "mm, osdd," "checkmm: print/check documents formatted with the" "" mm(1)
.xx "" "sum: print" "checksum and block count of a file." "" sum(1)
.xx "" "chess: the game of" "chess." "" chess(6)
.xx "" "" "chess: the game of chess." "" chess(6)
.xx "" "chown," "chgrp: change owner or group." "" chown(1)
.xx "" "times: get process and" "child process times." "" times(2)
.xx "" "wait: wait for" "child process to stop or terminate." "" wait(2)
.xx "" "" "chmod: change mode." "" chmod(1)
.xx "" "" "chmod: change mode of file." "" chmod(2)
.xx "" "" "chown: change owner and group of a file." "" chown(2)
.xx "" "" "chown, chgrp: change owner or group." "" chown(1)
.xx "" "" "chroot: change root directory." "" chroot(2)
.xx "" "" "chroot: change root directory for a command." "" chroot(1M)
.xx "prctmp, prdaily, prtacct, remove,/" "chargefee," "ckpacct, dodisk, lastlogin, monacct, nulladm," "" acctsh(1M)
.xx "" "ispunct, isprint, isgraph, iscntrl, isascii:" "classify characters." "/isxdigit, isalnum, isspace," ctype(3C)
.xx "" "uuclean: uucp spool directory" "clean-up." "" uuclean(1M)
.xx "" "clri:" "clear inode." "" clri(1M)
.xx "" "ferror, feof," "clearerr, fileno: stream status inquiries." "" ferror(3S)
.xx "" "alarm: set a process's alarm" "clock." "" alarm(2)
.xx "" "cron:" "clock daemon." "" cron(1M)
.xx "" "" "clock: report CPU time used." "" clock(3C)
.xx "" "log, alog, dlog," "clog: Fortran natural logarithm intrinsic function." "" log(3F)
.xx "" "ldclose, ldaclose:" "close a common object file." "" ldclose(3X)
.xx "" "close:" "close a file descriptor." "" close(2)
.xx "" "" "close: close a file descriptor." "" close(2)
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)
.xx "" "" "clri: clear inode." "" clri(1M)
.xx "" "" "cm16: 16Mb Cartridge Module Drive." "" cm16(7)
.xx "" "" "cm80: 80Mb Cartridge Module Drive." "" cm80(7)
.xx "" "" "cmp: compare two files." "" cmp(1)
.xx "" "int, ifix, idint, real, float, sngl, dble," "cmplx, dcmplx, ichar, char: explicit Fortran type/" "" ftype(3F)
.xx "" "" "col: filter reverse line-feeds." "" col(1)
.xx "" "" "comb: combine SCCS deltas." "" comb(1)
.xx "" "comb:" "combine SCCS deltas." "" comb(1)
.xx "files." "" "comm: select or reject lines common to two sorted" "" comm(1)
.xx "" "nice: run a" "command at low priority." "" nice(1)
.xx "" "chroot: change root directory for a" "command." "" chroot(1M)
.xx "" "env: set environment for" "command execution." "" env(1)
.xx "" "uux: unix to unix" "command execution." "" uux(1C)
.xx "" "system: issue a shell" "command from Fortran." "" system(3F)
.xx "" "nohup: run a" "command immune to hangups and quits." "" nohup(1)
.xx "" "getopt: parse" "command options." "" getopt(1)
.xx "" "sh, rsh: shell, the standard/restricted" "command programming language." "" sh(1)
.xx "" "timex: time a" "command; report process data and system activity." "" timex(1)
.xx "records." "acctcms:" "command summary from per-process accounting" "" acctcms(1M)
.xx "" "system: issue a shell" "command." "" system(3S)
.xx "" "test: condition evaluation" "command." "" test(1)
.xx "" "time: time a" "command." "" time(1)
.xx "" "xargs: construct argument list(s) and execute" "command." "" xargs(1)
.xx "" "getarg: return Fortran" "command-line argument." "" getarg(3F)
.xx "" "overview of accounting and miscellaneous accounting" "commands." "acctdisk, acctdusg, accton, acctwtmp:" acct(1M)
.xx "" "intro: introduction to" "commands and application programs." "" intro(1)
.xx "" "intro: introduction to system maintenance" "commands and application programs." "" intro(1M)
.xx "" "graphics: access graphical and numerical" "commands." "" graphics(1G)
.xx "" "install: install" "commands." "" install(1M)
.xx "" "mk: how to remake the system and" "commands." "" mk(8)
.xx "" "stat: statistical network useful with graphical" "commands." "" stat(1G)
.xx "" "cdc: change the delta" "commentary of an SCCS delta." "" cdc(1)
.xx "" "ar:" "common archive file format." "" ar(4)
.xx "" "a.out:" "common assembler and link editor output." "" a.out(4)
.xx "" "as, ljas:" "common assembler." "" as(1)
.xx "" "log10, alog10, dlog10: Fortran" "common logarithm intrinsic function." "" log10(3F)
.xx "" "ldfcn:" "common object file access routines." "" ldfcn(4)
.xx "" "ldopen, ldaopen: open a" "common object file for reading." "" ldopen(3X)
.xx "" "ldlitem: manipulate line number entries of a" "common object file function." "ldlread, ldlinit," ldlread(3X)
.xx "" "ldclose, ldaclose: close a" "common object file." "" ldclose(3X)
.xx "" "ldfhread: read the file header of a" "common object file." "" ldfhread(3X)
.xx "" "seek to line number entries of a section of a" "common object file." "ldlseek, ldnlseek:" ldlseek(3X)
.xx "" "ldohseek: seek to the optional file header of a" "common object file." "" ldohseek(3X)
.xx "" "seek to relocation entries of a section of a" "common object file." "ldrseek, ldnrseek:" ldrseek(3X)
.xx "" "read an indexed\/named section header of a" "common object file." "ldshread, ldnshread:" ldshread(3X)
.xx "" "ldnsseek: seek to an indexed\/named section of a" "common object file." "ldsseek," ldsseek(3X)
.xx "" "compute the index of a symbol table entry of a" "common object file." "ldtbindex:" ldtbindex(3X)
.xx "" "ldtbread: read an indexed symbol table entry of a" "common object file." "" ldtbread(3X)
.xx "" "ldtbseek: seek to the symbol table of a" "common object file." "" ldtbseek(3X)
.xx "" "linenum: line number entries in a" "common object file." "" linenum(4)
.xx "" "nm: print name list of" "common object file." "" nm(1)
.xx "" "reloc: relocation information for a" "common object file." "" reloc(4)
.xx "" "scnhdr: section header for a" "common object file." "" scnhdr(4)
.xx "" "syms:" "common object file symbol table format." "" syms(4)
.xx "" "filehdr: file header for" "common object files." "" filehdr(4)
.xx "" "ld: link editor for" "common object files." "" ld(1)
.xx "" "size: print section sizes of" "common object files." "" size(1)
.xx "" "comm: select or reject lines" "common to two sorted files." "" comm(1)
.xx "" "ipcs: report inter-process" "communication facilities status." "" ipcs(1)
.xx "" "stdipc: standard interprocess" "communication package." "" stdipc(3C)
.xx "" "acia: Asynchronous" "Communications Interface Adapter." "" acia(7)
.xx "" "diff: differential file" "comparator." "" diff(1)
.xx "" "bdiff: file" "comparator for large files." "" bdiff(1)
.xx "" "cmp:" "compare two files." "" cmp(1)
.xx "" "sccsdiff:" "compare two versions of an SCCS file." "" sccsdiff(1)
.xx "" "diff3: 3-way differential file" "comparison." "" diff3(1)
.xx "" "dircmp: directory" "comparison." "" dircmp(1)
.xx "" "regcmp, regex:" "compile and execute a regular expression." "" regcmp(3X)
.xx "" "regexp: regular expression" "compile and match routines." "" regexp(5)
.xx "" "regcmp: regular expression" "compile." "" regcmp(1)
.xx "" "cc\- C" "compiler." "" cc(1)
.xx "" "f77: Fortran 77" "compiler." "" f77(1)
.xx "" "scc: C" "compiler for stand-alone programs." "" scc(1)
.xx "" "yacc: yet another" "compiler-compiler." "" yacc(1)
.xx "" "bs: a" "compiler/interpreter for modest-sized programs." "" bs(1)
.xx "" "erf, erfc: error function and" "complementary error function." "" erf(3M)
.xx "" "wait: await" "completion of process." "" wait(1)
.xx "" "aimag, dimag: Fortran imaginary part of" "complex argument." "" aimag(3F)
.xx "" "conjg, dconjg: Fortran" "complex conjugate intrinsic function." "" conjg(3F)
.xx "" "pack, pcat, unpack:" "compress and expand files." "" pack(1)
.xx "common object file." "ldtbindex:" "compute the index of a symbol table entry of a" "" ldtbindex(3X)
.xx "" "cat:" "concatenate and print files." "" cat(1)
.xx "" "scat:" "concatenate and print files on synchronous printer." "" scat(1)
.xx "" "test:" "condition evaluation command." "" test(1)
.xx "" "" "config: configure 5)." "" config.68(1M)
.xx "" "config:" "configure 5)." "" config.68(1M)
.xx "" "lpadmin:" "configure the LP spooling system." "" lpadmin(1M)
.xx "function." "" "conjg, dconjg: Fortran complex conjugate intrinsic" "" conjg(3F)
.xx "" "conjg, dconjg: Fortran complex" "conjugate intrinsic function." "" conjg(3F)
.xx "" "fwtmp, wtmpfix: manipulate" "connect accounting records." "" fwtmp(1M)
.xx "" "dial: establish an out-going terminal line" "connection." "" dial(3C)
.xx "" "acctcon1, acctcon2:" "connect-time accounting." "" acctcon(1M)
.xx "" "fsck, fsck1b, dfsck: file system" "consistency check and interactive repair." "" fsck(1M)
.xx "" "rjestat: RJE status report and interactive status" "console." "" rjestat(1C)
.xx "" "cw, checkcw: prepare" "constant-width text for troff." "" cw(1)
.xx "" "mkfs, omkfs:" "construct a file system." "" mkfs(1M)
.xx "" "xargs:" "construct argument list(s) and execute command." "" xargs(1)
.xx "" "deroff: remove nroff/troff, tbl, and eqn" "constructs." "" deroff(1)
.xx "" "ls: list" "contents of directories." "" ls(1)
.xx "" "toc: graphical table of" "contents routines." "" toc(1G)
.xx "" "csplit:" "context split." "" csplit(1)
.xx "" "asa: interpret ASA carriage" "control characters." "" asa(1)
.xx "" "ioctl:" "control device." "" ioctl(2)
.xx "" "fcntl: file" "control." "" fcntl(2)
.xx "" "init, telinit: process" "control initialization." "" init(1M)
.xx "" "msgctl: message" "control operations." "" msgctl(2)
.xx "" "semctl: semaphore" "control operations." "" semctl(2)
.xx "" "shmctl: shared memory" "control operations." "" shmctl(2)
.xx "" "fcntl: file" "control options." "" fcntl(5)
.xx "" "uustat: uucp status inquiry and job" "control." "" uustat(1C)
.xx "" "vc: version" "control." "" vc(1)
.xx "" "for all disk units supported by the M68KVM21 disk" "controller." "ud: general driver" ud(7)
.xx "" "tty:" "controlling terminal interface." "" tty(7)
.xx "" "" "conv: object file converter." "" conv(1)
.xx "" "term:" "conventional names for terminals." "" term(5)
.xx "" "cmplx, dcmplx, ichar, char: explicit Fortran type" "conversion." "/ifix, idint, real, float, sngl, dble," ftype(3F)
.xx "" "units:" "conversion program." "" units(1)
.xx "" "dd:" "convert and copy a file." "" dd(1)
.xx "" "atof:" "convert ASCII string to floating-point number." "" atof(3C)
.xx "" "l3tol, ltol3:" "convert between 3-byte integers and long integers." "" l3tol(3C)
.xx "string." "a64l, l64a:" "convert between long integer and base-64 ASCII" "" a64l(3C)
.xx "" "ctime, localtime, gmtime, asctime, tzset:" "convert date and time to string." "" ctime(3C)
.xx "processors." "fscv:" "convert files between M68000 and VAX-11/780" "" fscv(1M)
.xx "" "ecvt, fcvt, gcvt:" "convert floating-point number to string." "" ecvt(3C)
.xx "" "scanf, fscanf, sscanf:" "convert formatted input." "" scanf(3S)
.xx "" "strtol, atol, atoi:" "convert string to integer." "" strtol(3C)
.xx "" "conv: object file" "converter." "" conv(1)
.xx "" "dd: convert and" "copy a file." "" dd(1)
.xx "" "bcopy: interactive block" "copy." "" bcopy(1M)
.xx "" "cpio:" "copy file archives in and out." "" cpio(1)
.xx "" "dcopy:" "copy file systems for optimal access time." "" dcopy(1M)
.xx "" "volcopy, labelit:" "copy file systems with label checking." "" volcopy(1M)
.xx "" "cp, ln, mv:" "copy, link or move files." "" cp(1)
.xx "" "uucp, uulog, uuname: unix to unix" "copy." "" uucp(1C)
.xx "" "uupick: public UNIX System-to-UNIX System file" "copy." "uuto," uuto(1C)
.xx "" "" "core: format of core image file." "" core(4)
.xx "" "core: format of" "core image file." "" core(4)
.xx "" "mem, kmem:" "core memory." "" mem(7)
.xx "" "" "cos, dcos, ccos: Fortran cosine intrinsic function." "" cos(3F)
.xx "functions." "sin," "cos, tan, asin, acos, atan, atan2: trigonometric" "" trig(3M)
.xx "function." "" "cosh, dcosh: Fortran hyperbolic cosine intrinsic" "" cosh(3F)
.xx "" "sinh," "cosh, tanh: hyperbolic functions." "" sinh(3M)
.xx "" "cos, dcos, ccos: Fortran" "cosine intrinsic function." "" cos(3F)
.xx "" "cosh, dcosh: Fortran hyperbolic" "cosine intrinsic function." "" cosh(3F)
.xx "" "sum: print checksum and block" "count of a file." "" sum(1)
.xx "" "wc: word" "count." "" wc(1)
.xx "" "" "cp, ln, mv: copy, link or move files." "" cp(1)
.xx "" "cpio: format of" "cpio archive." "" cpio(4)
.xx "" "" "cpio: copy file archives in and out." "" cpio(1)
.xx "" "" "cpio: format of cpio archive." "" cpio(4)
.xx "" "" "cpp: the C language preprocessor." "" cpp(1)
.xx "" "clock: report" "CPU time used." "" clock(3C)
.xx "" "craps: the game of" "craps." "" craps(6)
.xx "" "" "craps: the game of craps." "" craps(6)
.xx "" "" "crash: examine system images." "" crash(1M)
.xx "" "" "crash: what to do when the system crashes." "" crash.m68(8)
.xx "" "crash: what to do when the system" "crashes." "" crash.m68(8)
.xx "one." "" "creat: create a new file or rewrite an existing" "" creat(2)
.xx "" "tmpnam, tempnam:" "create a name for a temporary file." "" tmpnam(3S)
.xx "" "creat:" "create a new file or rewrite an existing one." "" creat(2)
.xx "" "fork:" "create a new process." "" fork(2)
.xx "" "tmpfile:" "create a temporary file." "" tmpfile(3S)
.xx "" "pipe:" "create an interprocess channel." "" pipe(2)
.xx "" "admin:" "create and administer SCCS files." "" admin(1)
.xx "" "umask: set and get file" "creation mask." "" umask(2)
.xx "" "" "cron: clock daemon." "" cron(1M)
.xx "" "cxref: generate C program" "cross-reference." "" cxref(1)
.xx "" "" "crypt: encode/decode." "" crypt(1)
.xx "" "" "crypt, setkey, encrypt: generate DES encryption." "" crypt(3C)
.xx "" "sin, dsin," "csin: Fortran sine intrinsic function." "" sin(3F)
.xx "" "" "csplit: context split." "" csplit(1)
.xx "" "sqrt, dsqrt," "csqrt: Fortran square root intrinsic function." "" sqrt(3F)
.xx "" "" "ct: spawn getty to a remote terminal." "" ct(1C)
.xx "" "" "ctermid: generate filename for terminal." "" ctermid(3S)
.xx "date and time to string." "" "ctime, localtime, gmtime, asctime, tzset: convert" "" ctime(3C)
.xx "" "" "cu: call another 5) system." "" cu(1C)
.xx "" "ttt," "cubic: tic-tac-toe." "" ttt(6)
.xx "" "uname: get name of" "current operating system." "" uname(2)
.xx "" "sact: print" "current SCCS file editing activity." "" sact(1)
.xx "" "uname: print name of" "current UNIX System." "" uname(1)
.xx "" "ttyslot: find the slot in the utmp file of the" "current user." "" ttyslot(3C)
.xx "" "getcwd: get pathname of" "current working directory." "" getcwd(3C)
.xx "" "spline: interpolate smooth" "curve." "" spline(1G)
.xx "" "" "cuserid: get character login name of the user." "" cuserid(3S)
.xx "file." "" "cut: cut out selected fields of each line of a" "" cut(1)
.xx "" "cut:" "cut out selected fields of each line of a file." "" cut(1)
.xx "" "" "cw, checkcw: prepare constant-width text for troff." "" cw(1)
.xx "" "" "cxref: generate C program cross-reference." "" cxref(1)
.xx "" "abs, iabs," "dabs, cabs, zabs: Fortran absolute value." "" abs(3F)
.xx "" "acos," "dacos: Fortran arccosine intrinsic function." "" acos(3F)
.xx "" "cron: clock" "daemon." "" cron(1M)
.xx "" "errdemon: error-logging" "daemon." "" errdemon(1M)
.xx "" "errstop: terminate the error-logging" "daemon." "" errstop(1M)
.xx "" "lpd: line printer" "daemon." "" lpd(1C)
.xx "" "runacct: run" "daily accounting." "" runacct(1M)
.xx "" "filesave, tapesave:" "daily/weekly 5) file system backup." "" filesave(1M)
.xx "" "300, 300s: handle special functions of" "DASI 300 and 300s terminals." "" 300(1)
.xx "" "450: handle special functions of the" "DASI 450 terminal." "" 450(1)
.xx "" "asin," "dasin: Fortran arcsine intrinsic function." "" asin(3F)
.xx "" "timex: time a command; report process" "data and system activity." "" timex(1)
.xx "" "termcap: terminal capability" "data base." "" termcap(5)
.xx "" "sputl, sgetl: access long integer" "data in a machine independent fashion.." "" sputl(3X)
.xx "" "plock: lock process, text, or" "data in memory." "" plock(2)
.xx "" "prof: display profile" "data." "" prof(1)
.xx "" "stat:" "data returned by stat system call." "" stat(5)
.xx "" "brk, sbrk: change" "data segment space allocation." "" brk(2)
.xx "" "types: primitive system" "data types." "" types(5)
.xx "" "join: relational" "database operator." "" join(1)
.xx "" "atan," "datan: Fortran arctangent intrinsic function." "" atan(3F)
.xx "" "atan2," "datan2: Fortran arctangent intrinsic function." "" atan2(3F)
.xx "" "ctime, localtime, gmtime, asctime, tzset: convert" "date and time to string." "" ctime(3C)
.xx "" "date: print and set the" "date." "" date(1)
.xx "" "" "date: print and set the date." "" date(1)
.xx "type/" "int, ifix, idint, real, float, sngl," "dble, cmplx, dcmplx, ichar, char: explicit Fortran" "" ftype(3F)
.xx "" "" "dc: desk calculator." "" dc(1)
.xx "" "int, ifix, idint, real, float, sngl, dble, cmplx," "dcmplx, ichar, char: explicit Fortran type/" "" ftype(3F)
.xx "function." "conjg," "dconjg: Fortran complex conjugate intrinsic" "" conjg(3F)
.xx "" "" "dcopy: copy file systems for optimal access time." "" dcopy(1M)
.xx "" "cos," "dcos, ccos: Fortran cosine intrinsic function." "" cos(3F)
.xx "function." "cosh," "dcosh: Fortran hyperbolic cosine intrinsic" "" cosh(3F)
.xx "" "" "dd: convert and copy a file." "" dd(1)
.xx "" "fsdb, fsdb1b: file system" "debugger." "" fsdb(1M)
.xx "" "sdb: symbolic" "debugger." "" sdb(1)
.xx "" "sysdef: system" "definition." "" sysdef(1M)
.xx "" "eqnchar: special character" "definitions for eqn and neqn." "" eqnchar(5)
.xx "" "basename, dirname:" "deliver portions of pathnames." "" basename(1)
.xx "" "tail:" "deliver the last part of a file." "" tail(1)
.xx "" "cdc: change the delta commentary of an SCCS" "delta." "" cdc(1)
.xx "" "delta: make a" "delta (change) to an SCCS file." "" delta(1)
.xx "" "cdc: change the" "delta commentary of an SCCS delta." "" cdc(1)
.xx "" "rmdel: remove a" "delta from an SCCS file." "" rmdel(1)
.xx "" "" "delta: make a delta (change) to an SCCS file." "" delta(1)
.xx "" "comb: combine SCCS" "deltas." "" comb(1)
.xx "" "mesg: permit or" "deny messages." "" mesg(1)
.xx "constructs." "" "deroff: remove nroff/troff, tbl, and eqn" "" deroff(1)
.xx "" "crypt, setkey, encrypt: generate" "DES encryption." "" crypt(3C)
.xx "" "close: close a file" "descriptor." "" close(2)
.xx "" "dup: duplicate an open file" "descriptor." "" dup(2)
.xx "" "dc:" "desk calculator." "" dc(1)
.xx "" "access:" "determine accessibility of a file." "" access(2)
.xx "" "file:" "determine file type." "" file(1)
.xx "" "master: master" "device information table." "" master.dec(4)
.xx "" "ioctl: control" "device." "" ioctl(2)
.xx "" "devnm:" "device name." "" devnm(1M)
.xx "" "hpd, erase, hardcopy, tekset, td: graphical" "device routines and filters." "" gdev(1G)
.xx "" "dk: disk" "device special files." "" dk(7)
.xx "" "" "devnm: device name." "" devnm(1M)
.xx "" "exp," "dexp, cexp: Fortran exponential intrinsic function." "" exp(3F)
.xx "" "" "df: report number of free disk blocks." "" df(1M)
.xx "interactive repair." "fsck, fsck1b," "dfsck: file system consistency check and" "" fsck(1M)
.xx "connection." "" "dial: establish an out-going terminal line" "" dial(3C)
.xx "" "ratfor: rational Fortran" "dialect." "" ratfor(1)
.xx "" "" "diff: differential file comparator." "" diff(1)
.xx "" "" "diff3: 3-way differential file comparison." "" diff3(1)
.xx "" "sdiff: side-by-side" "difference program." "" sdiff(1)
.xx "" "diffmk: mark" "differences between files." "" diffmk(1)
.xx "" "diff:" "differential file comparator." "" diff(1)
.xx "" "diff3: 3-way" "differential file comparison." "" diff3(1)
.xx "" "" "diffmk: mark differences between files." "" diffmk(1)
.xx "" "aimag," "dimag: Fortran imaginary part of complex argument." "" aimag(3F)
.xx "" "aint," "dint: Fortran integer part intrinsic function." "" aint(3F)
.xx "" "" "dir: format of directories." "" dir(4)
.xx "" "" "dircmp: directory comparison." "" dircmp(1)
.xx "" "dir: format of" "directories." "" dir(4)
.xx "" "ls: list contents of" "directories." "" ls(1)
.xx "" "rm, rmdir: remove files or" "directories." "" rm(1)
.xx "" "cd: change working" "directory." "" cd(1)
.xx "" "chdir: change working" "directory." "" chdir(2)
.xx "" "chroot: change root" "directory." "" chroot(2)
.xx "" "uuclean: uucp spool" "directory clean-up." "" uuclean(1M)
.xx "" "dircmp:" "directory comparison." "" dircmp(1)
.xx "" "unlink: remove" "directory entry." "" unlink(2)
.xx "" "chroot: change root" "directory for a command." "" chroot(1M)
.xx "" "getcwd: get pathname of current working" "directory." "" getcwd(3C)
.xx "" "mkdir: make a" "directory." "" mkdir(1)
.xx "" "mvdir: move a" "directory." "" mvdir(1M)
.xx "" "pwd: working" "directory name." "" pwd(1)
.xx "" "mknod: make a" "directory, or a special or ordinary file." "" mknod(2)
.xx "" "basename," "dirname: deliver portions of pathnames." "" basename(1)
.xx "" "" "dis: disassembler." "" dis(1)
.xx "" "enable," "disable: enable/disable LP printers." "" enable(1)
.xx "" "acct: enable or" "disable process accounting." "" acct(2)
.xx "" "dis:" "disassembler." "" dis(1)
.xx "" "getty: set terminal type, modes, speed, and line" "discipline." "" getty(1M)
.xx "" "sadp:" "disk access profiler." "" sadp(1)
.xx "" "df: report number of free" "disk blocks." "" df(1M)
.xx "" "driver for all disk units supported by the M68KVM21" "disk controller." "ud: general" ud(7)
.xx "" "dk:" "disk device special files." "" dk(7)
.xx "" "fl8: 8 inch Floppy" "Disk Drive." "" fl8(7)
.xx "controller." "ud: general driver for all" "disk units supported by the M68KVM21 disk" "" ud(7)
.xx "" "du: summarize" "disk usage." "" du(1)
.xx "" "mount, umount: mount and" "dismount file system." "" mount(1M)
.xx "" "vi: screen oriented (visual)" "display editor based on ex." "" vi(1)
.xx "" "prof:" "display profile data." "" prof(1)
.xx "" "hypot: Euclidean" "distance function." "" hypot(3M)
.xx "" "srand48, seed48, lcong48: generate uniformly" "distributed pseudo-random numbers." "/jrand48," drand48(3C)
.xx "" "" "dk: disk device special files." "" dk(7)
.xx "function." "log, alog," "dlog, clog: Fortran natural logarithm intrinsic" "" log(3F)
.xx "function." "log10, alog10," "dlog10: Fortran common logarithm intrinsic" "" log10(3F)
.xx "" "max, max0, amax0, max1, amax1," "dmax1: Fortran maximum-value functions." "" max(3F)
.xx "" "min, min0, amin0, min1, amin1," "dmin1: Fortran minimum-value functions." "" min(3F)
.xx "" "mod, amod," "dmod: Fortran remaindering intrinsic functions." "" mod(3F)
.xx "functions." "anint," "dnint, nint, idnint: Fortran nearest integer" "" round(3F)
.xx "" "mm, osdd, checkmm: print/check" "documents formatted with the MM macros." "" mm(1)
.xx "" "mm: the MM macro package for formatting" "documents." "" mm(5)
.xx "" "mosd: the OSDD adapter macro package for formatting" "documents." "" mosd(5)
.xx "" "mmt, mvt: typeset" "documents, viewgraphs, and slides." "" mmt(1)
.xx "prdaily, prtacct, remove,/" "chargefee, ckpacct," "dodisk, lastlogin, monacct, nulladm, prctmp," "" acctsh(1M)
.xx "" "whodo: who is" "doing what." "" whodo(1M)
.xx "" "reversi: a game of" "dramatic reversals." "" reversi(6)
.xx "jrand48, srand48, seed48, lcong48: generate/" "" "drand48, erand48, lrand48, nrand48, mrand48," "" drand48(3C)
.xx "" "graph:" "draw a graph." "" graph(1G)
.xx "" "arithmetic: provide" "drill in number facts." "" arithmetic(6)
.xx "" "cm16: 16Mb Cartridge Module" "Drive." "" cm16(7)
.xx "" "cm80: 80Mb Cartridge Module" "Drive." "" cm80(7)
.xx "" "fl8: 8 inch Floppy Disk" "Drive." "" fl8(7)
.xx "" "lrk25: 25Mb Lark Module" "Drive." "" lrk25(7)
.xx "disk controller." "ud: general" "driver for all disk units supported by the M68KVM21" "" ud(7)
.xx "" "sign, isign," "dsign: Fortran transfer-of-sign intrinsic function." "" sign(3F)
.xx "" "sin," "dsin, csin: Fortran sine intrinsic function." "" sin(3F)
.xx "" "sinh," "dsinh: Fortran hyperbolic sine intrinsic function." "" sinh(3F)
.xx "function." "sqrt," "dsqrt, csqrt: Fortran square root intrinsic" "" sqrt(3F)
.xx "" "tan," "dtan: Fortran tangent intrinsic function." "" tan(3F)
.xx "function." "tanh," "dtanh: Fortran hyperbolic tangent intrinsic" "" tanh(3F)
.xx "" "" "du: summarize disk usage." "" du(1)
.xx "" "" "dump: dump selected parts of an object file." "" dump(1)
.xx "" "errdead: extract error records from" "dump." "" errdead(1M)
.xx "" "od: octal" "dump." "" od(1)
.xx "" "dump:" "dump selected parts of an object file." "" dump(1)
.xx "" "" "dup: duplicate an open file descriptor." "" dup(2)
.xx "" "dup:" "duplicate an open file descriptor." "" dup(2)
.xx "" "echo:" "echo arguments." "" echo(1)
.xx "" "" "echo: echo arguments." "" echo(1)
.xx "string." "" "ecvt, fcvt, gcvt: convert floating-point number to" "" ecvt(3C)
.xx "" "" "ed, red: text editor." "" ed(1)
.xx "" "end, etext," "edata: last locations in program." "" end(3C)
.xx "" "" "edit: text editor (variant of ex for casual users)." "" edit(1)
.xx "" "sact: print current SCCS file" "editing activity." "" sact(1)
.xx "" "vi: screen oriented (visual) display" "editor based on ex." "" vi(1)
.xx "" "ed, red: text" "editor." "" ed(1)
.xx "" "ex: text" "editor." "" ex(1)
.xx "" "ld: link" "editor for common object files." "" ld(1)
.xx "" "ged: graphical" "editor." "" ged(1G)
.xx "" "a.out: common assembler and link" "editor output." "" a.out(4)
.xx "" "sed: stream" "editor." "" sed(1)
.xx "" "edit: text" "editor (variant of ex for casual users)." "" edit(1)
.xx "" "get real user, effective user, real group, and" "effective group IDs." "/geteuid, getgid, getegid:" getuid(2)
.xx "" "getuid, geteuid, getgid, getegid: get real user," "effective user, real group, and effective group/" "" getuid(2)
.xx "" "" "ef\&l: Extended Fortran Language." "" efl(1)
.xx "" "fsplit: split f77, ratfor, or" "ef\&l files." "" fsplit(1)
.xx "" "grep," "egrep, fgrep: search a file for a pattern." "" grep(1)
.xx "" "" "enable, disable: enable/disable LP printers." "" enable(1)
.xx "" "acct:" "enable or disable process accounting." "" acct(2)
.xx "" "enable, disable:" "enable/disable LP printers." "" enable(1)
.xx "" "crypt:" "encode/decode." "" crypt(1)
.xx "" "crypt, setkey," "encrypt: generate DES encryption." "" crypt(3C)
.xx "" "crypt, setkey, encrypt: generate DES" "encryption." "" crypt(3C)
.xx "" "makekey: generate" "encryption key." "" makekey(1)
.xx "" "" "end, etext, edata: last locations in program." "" end(3C)
.xx "" "getgrent, getgrgid, getgrnam, setgrent," "endgrent: obtain." "" getgrent(3C)
.xx "" "getpwent, getpwuid, getpwnam, setpwent," "endpwent: get password file entry." "" getpwent(3C)
.xx "" "getutent, getutid, getutline, pututline, setutent," "endutent, utmpname: access utmp file entry." "" getut(3C)
.xx "" "nlist: get" "entries from name list." "" nlist(3C)
.xx "" "linenum: line number" "entries in a common object file." "" linenum(4)
.xx "" "man, manprog: print" "entries in this manual." "" man(1)
.xx "" "man: macros for formatting" "entries in this manual." "" man(5)
.xx "" "ldlread, ldlinit, ldlitem: manipulate line number" "entries of a common object file function." "" ldlread(3X)
.xx "" "ldlseek, ldnlseek: seek to line number" "entries of a section of a common object file." "" ldlseek(3X)
.xx "" "ldrseek, ldnrseek: seek to relocation" "entries of a section of a common object file." "" ldrseek(3X)
.xx "" "utmp, wtmp: utmp and wtmp" "entry formats." "" utmp(4)
.xx "" "getpwnam, setpwent, endpwent: get password file" "entry." "getpwent, getpwuid," getpwent(3C)
.xx "" "setutent, endutent, utmpname: access utmp file" "entry." "getutent, getutid, getutline, pututline," getut(3C)
.xx "" "ldtbindex: compute the index of a symbol table" "entry of a common object file." "" ldtbindex(3X)
.xx "" "ldtbread: read an indexed symbol table" "entry of a common object file." "" ldtbread(3X)
.xx "" "putpwent: write password file" "entry." "" putpwent(3C)
.xx "" "unlink: remove directory" "entry." "" unlink(2)
.xx "" "" "env: set environment for command execution." "" env(1)
.xx "" "" "environ: user environment." "" environ(5)
.xx "" "profile: setting up an" "environment at login time." "" profile(4)
.xx "" "environ: user" "environment." "" environ(5)
.xx "" "env: set" "environment for command execution." "" env(1)
.xx "" "getenv: return value for" "environment name." "" getenv(3C)
.xx "" "getenv: return Fortran" "environment variable." "" getenv(3F)
.xx "" "sky: obtain" "ephemerides." "" sky(6)
.xx "" "eqnchar: special character definitions for" "eqn and neqn." "" eqnchar(5)
.xx "" "deroff: remove nroff/troff, tbl, and" "eqn constructs." "" deroff(1)
.xx "nroff or troff." "" "eqn, neqn, checkeq: format mathematical text for" "" eqn(1)
.xx "neqn." "" "eqnchar: special character definitions for eqn and" "" eqnchar(5)
.xx "srand48, seed48, lcong48: generate/" "drand48," "erand48, lrand48, nrand48, mrand48, jrand48," "" drand48(3C)
.xx "routines and filters." "hpd," "erase, hardcopy, tekset, td: graphical device" "" gdev(1G)
.xx "function." "" "erf, erfc: error function and complementary error" "" erf(3M)
.xx "function." "erf," "erfc: error function and complementary error" "" erf(3M)
.xx "" "" "err: error-logging interface." "" err(7)
.xx "" "" "errdead: extract error records from dump." "" errdead(1M)
.xx "" "" "errdemon: error-logging daemon." "" errdemon(1M)
.xx "" "" "errfile: error-log file format." "" errfile(4)
.xx "messages." "perror," "errno, sys errlist, sys nerr: system error" "" perror(3C)
.xx "" "erf, erfc:" "error function and complementary error function." "" erf(3M)
.xx "" "erf, erfc: error function and complementary" "error function." "" erf(3M)
.xx "" "perror, errno, sys errlist, sys nerr: system" "error messages." "" perror(3C)
.xx "" "intro: introduction to system calls and" "error numbers." "" intro(2)
.xx "" "errdead: extract" "error records from dump." "" errdead(1M)
.xx "" "matherr:" "error-handling function." "" matherr(3M)
.xx "" "errfile:" "error-log file format." "" errfile(4)
.xx "" "errdemon:" "error-logging daemon." "" errdemon(1M)
.xx "" "errstop: terminate the" "error-logging daemon." "" errstop(1M)
.xx "" "err:" "error-logging interface." "" err(7)
.xx "" "errpt: process a report of logged" "errors." "" errpt(1M)
.xx "" "spell, hashmake, spellin, hashcheck: find spelling" "errors." "" spell(1)
.xx "" "" "errpt: process a report of logged errors." "" errpt(1M)
.xx "" "" "errstop: terminate the error-logging daemon." "" errstop(1M)
.xx "" "dial:" "establish an out-going terminal line connection." "" dial(3C)
.xx "" "setmnt:" "establish mount table." "" setmnt(1M)
.xx "" "end," "etext, edata: last locations in program." "" end(3C)
.xx "" "hypot:" "Euclidean distance function." "" hypot(3M)
.xx "" "expr:" "evaluate arguments as an expression." "" expr(1)
.xx "" "test: condition" "evaluation command." "" test(1)
.xx "" "edit: text editor (variant of" "ex for casual users)." "" edit(1)
.xx "" "" "ex: text editor." "" ex(1)
.xx "" "screen oriented (visual) display editor based on" "ex." "vi:" vi(1)
.xx "" "crash:" "examine system images." "" crash(1M)
.xx "execute a file." "" "execl, execv, execle, execve, execlp, execvp:" "" exec(2)
.xx "" "execl, execv," "execle, execve, execlp, execvp: execute a file." "" exec(2)
.xx "" "execl, execv, execle, execve," "execlp, execvp: execute a file." "" exec(2)
.xx "" "execl, execv, execle, execve, execlp, execvp:" "execute a file." "" exec(2)
.xx "" "regcmp, regex: compile and" "execute a regular expression." "" regcmp(3X)
.xx "" "xargs: construct argument list(s) and" "execute command." "" xargs(1)
.xx "" "env: set environment for command" "execution." "" env(1)
.xx "" "sleep: suspend" "execution for an interval." "" sleep(1)
.xx "" "sleep: suspend" "execution for interval." "" sleep(3C)
.xx "" "monitor: prepare" "execution profile." "" monitor(3C)
.xx "" "profil:" "execution time profile." "" profil(2)
.xx "" "uux: unix to unix command" "execution." "" uux(1C)
.xx "file." "execl," "execv, execle, execve, execlp, execvp: execute a" "" exec(2)
.xx "" "execl, execv, execle," "execve, execlp, execvp: execute a file." "" exec(2)
.xx "" "execl, execv, execle, execve, execlp," "execvp: execute a file." "" exec(2)
.xx "" "link, unlink:" "exercise link and unlink system calls." "" link(1M)
.xx "" "creat: create a new file or rewrite an" "existing one." "" creat(2)
.xx "" "" "exit,  exit: terminate process." "" exit(2)
.xx "" "exit," " exit: terminate process." "" exit(2)
.xx "" "m68kops" "\-EXORmacs operations." "" m68kops(8)
.xx "function." "" "exp, dexp, cexp: Fortran exponential intrinsic" "" exp(3F)
.xx "power, square root functions." "" "exp, log, log10, pow, sqrt: exponential, logarithm," "" exp(3M)
.xx "" "pack, pcat, unpack: compress and" "expand files." "" pack(1)
.xx "" "float, sngl, dble, cmplx, dcmplx, ichar, char:" "explicit Fortran type conversion." "/idint, real," ftype(3F)
.xx "" "exp, dexp, cexp: Fortran" "exponential intrinsic function." "" exp(3F)
.xx "functions." "exp, log, log10, pow, sqrt:" "exponential, logarithm, power, square root" "" exp(3M)
.xx "" "" "expr: evaluate arguments as an expression." "" expr(1)
.xx "" "regexp: regular" "expression compile and match routines." "" regexp(5)
.xx "" "regcmp: regular" "expression compile." "" regcmp(1)
