'\" t
.TH GETUT 3C
.SH NAME
getutent, getutid, getutline, pututline, setutent, endutent, utmpname \- access utmp file entry
.SH SYNOPSIS
.nf
.B #include <utmp.h>
.PP
.B struct utmp \(**getutent ( )
.PP
.BR "struct utmp \(**getutid (" id )
.BR "struct utmp \(**" id ;
.PP
.BR "struct utmp \(**getutline (" line )
.BR "struct utmp \(**" line ;
.PP
.BR "void pututline (" utmp )
.BR "struct utmp \(**" utmp ;
.PP
.B void setutent ( )
.PP
.B void endutent ( )
.PP
.BR "void utmpname (" file" )
.BR "char \(**" file ;
.SH DESCRIPTION
.IR Getutent ,
.IR getutid ,
and
.I getutline\^
each return a pointer to a structure of the following type:
.PP
.TS
l1 l1 l1 l.
.tr ~ 
struct	utmp {
	char	ut_user[8];	/\(** User login name \(**/
	char	ut_id[4];	/\(** /etc/inittab id (usually line #) \(**/
	char	ut_line[12];	/\(** device name (console, lnxx) \(**/
	short	ut_pid;	/\(** process id \(**/
	short	ut_type;	/\(** type of entry \(**/
	struct	exit_status {
	~~~~short	~~~~e_termination;	/\(** Process termination status \(**/
	~~~~short	~~~~e_exit;	/\(** Process exit status \(**/
	} ut_exit;		/\(** The exit status of a process
			/\(** marked as \s-1DEAD_PROCESS\s+1. \(**/
	time_t	ut_time;	/\(** time entry was made \(**/
};
.tr ~~
.TE
.PP
.I Getutent\^
reads in the next entry from a
.IR utmp -like
file.  If the file is not already open, it opens it.  If
it reaches the end of the file, it fails.
.PP
.I Getutid\^
searches forward from the current point in the
.I utmp\^
file until it
finds an entry with a
.I ut_type\^
matching
.I id\->ut_type\^
if the type specified is
.SM RUN_LVL\*S,
.SM BOOT_TIME\*S,
.SM OLD_TIME\*S,
or
.SM NEW_TIME\*S.
If the type specified in
.I id\^
is
.SM INIT_PROCESS\*S,
.SM LOGIN_PROCESS\*S,
.SM USER_PROCESS\*S,
or
.SM DEAD_PROCESS\*S,
.I getutid\^
will return a pointer to the first entry whose type is one of these
four and whose
.I ut_id\^
field matches
.IR id\->ut_id .
.I Getutid\^
fails if the
end of file is reached without a match.
.PP
.I Getutline\^
searches forward from the current point in the
.I utmp\^
file until it
finds an entry of the type
.SM
LOGIN_PROCESS
or
.SM
USER_PROCESS
which also has a
.I ut_line\^
string matching the
.I line\->ut_line\^
string.  If the end of file is reached without a match, it fails.
.PP
.I Pututline\^
writes out the supplied
.I utmp\^
structure into the
.I utmp\^
file.  It uses
.I getutid\^
to search forward for the proper place if it finds that it is
not already at the proper place.  It is assumed that 
the user of
.I pututline\^
has searched for the proper entry using one of the
.I getut\^
routines.  If this has been done,
.I pututline\^
will not search.  If
.I pututline\^
does not find a matching slot for the new entry, it will add
a new entry to the end of the file.
.PP
.I Setutent\^
resets the input stream to the beginning of the file.  This should
be done before each search for a new entry if it is desired that
the entire file be examined.
.PP
.I Endutent\^
closes the currently open file.
.PP
.I Utmpname\^
allows the user to change the name of the file examined from
.B /etc/utmp
to any other filename.  It is expected that most often this other
file will be
.BR /etc/wtmp .
If the file doesn't exist, this will not be apparent until the
first attempt to reference the file is made.
.I Utmpname\^
does not open the file.  It just closes the old file, if it is
currently open, and saves the new filename.
.SH FILES
/etc/utmp
.br
/etc/wtmp
.SH SEE ALSO
ttyslot(3C), utmp(4).
.SH DIAGNOSTICS
A
.SM
.B NULL
pointer is returned upon failure to read
or write.  Failure to read may be due to permissions or
because end-of-file has been reached.
.SH COMMENTS
The most current entry is saved in a static structure.  Multiple
accesses require that it be copied before further accesses are made.
Each call to either
.I getutid\^
or
.I getutline\^
sees the routine examine the static structure before
performing more \s-1I/O\s+1.  If the search of the static structure
results in a match, no further search is performed.
To use
.I getutline\^
to search for multiple occurences, zero
out the static structure after each success; otherwise
.I getutline\^
will just return the same pointer over and over again.
There is one exception to the rule about removing the structure
before further reads are done.  If the implicit read done by
.I pututline\^
finds that it isn't already at the correct place in
the file, the contents of the static structure
returned by the
.IR getutent ,
.IR getutid ,
or
.I getutline\^
routines are not harmed, if the user has
just modified those contents and
passed the pointer back to
.IR pututline .
.PP
These routines use buffered standard \s-1I/O\s+1 for input, but
.I pututline\^
uses an unbuffered non-standard write to avoid race conditions
between processes trying to modify the
.I utmp\^
and
.I wtmp\^
files.
.\"	@(#)getut.3c	1.6	
