.TH MEMORY 3C
.SH NAME
memccpy, memchr, memcmp, memcpy, memset \- memory operations
.SH SYNOPSIS
.nf
.B #include <memory.h>
.PP
.BR "char \(**memccpy (" "s1, s2, c, n" )
.BR "char \(**" "s1, " "\(**" s2 ;
.BR int " c, n" ;
.PP
.BR "char \(**memchr (" "s, c, n" )
.BR "char \(**" s ;
.BR "int" " c, n" ;
.PP
.BR "int memcmp (" "s1, s2, n" )
.BR "char \(**" s1, " \(**" s2 ;
.BR int " n" ;
.PP
.BR "char \(**memcpy (" "s1, s2, n" )
.BR "char \(**" s1, " \(**" s2 ;
.BR int " n" ;
.PP
.BR "char \(**memset (" "s, c, n" )
.BR "char \(**" s ;
.BR int " c, n" ;
.fi
.SH DESCRIPTION
These functions operate efficiently on memory areas
(arrays of characters bounded by a count, not terminated by a null character).
They do not check for the overflow of any receiving memory area.
.PP
.I Memccpy\^
copies characters from memory area
.I s2\^
into
.IR s1 ,
stopping after the first occurrence of character
.I c\^
has been copied or after
.I n\^
characters have been copied, whichever comes first.
It returns either a pointer to the character after
the copy of
.I c\^
in
.I s1\^
or a
.SM NULL
pointer if
.I c\^
was not found in the first
.I n\^
characters of
.IR s2 .
.PP
.PP
.I Memchr\^
returns either a pointer to the first
occurrence of character 
.I c\^
in the first
.I n\^
characters of memory area
.I s
or a
.SM NULL
pointer if
.I c\^
does not occur.
.PP
.I Memcmp\^
compares its arguments, looking at the first
.I n\^
characters only.  It returns an integer
less than, equal to, or greater than 0,
depending on whether
.I s1\^
is lexicographically less than, equal to, or
greater than
.IR s2 .
.PP
.I Memcpy\^
copies
.I n\^
characters from memory area
.I s2\^
to
.IR s1 .
It returns
.IR s1 .
.PP
.I Memset\^
sets the first
.I n\^
characters in memory area
.I s\^
to the value of character
.IR c .
It returns
.I s .
.SH NOTE
For user convenience, all these functions are declared in the optional
.B <memory.h>
header file.
.SH BUGS
.I Memcmp\^
uses native character comparison, which is signed
on
.SM PDP\*S-11s,
unsigned on other machines.
.PP
Because character movement is performed
differently in different implementations,
overlapping moves may yield unexpected results.
.\"	@(#)memory.3c	1.6	
