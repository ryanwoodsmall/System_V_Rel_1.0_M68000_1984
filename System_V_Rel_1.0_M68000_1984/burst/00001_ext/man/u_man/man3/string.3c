.TH STRING 3C 
.SH NAME
strcat, strncat, strcmp, strncmp, strcpy, strncpy, strlen, strchr, strrchr, strpbrk, strspn, strcspn, strtok \- string operations
.SH SYNOPSIS
.nf
.B #include <string.h>
.PP
.BR "char \(**strcat (" "s1, s2" )
.BR "char \(**" "s1" ", \(**" "s2" ;
.PP
.BR "char \(**strncat (" "s1, s2, n" )
.BR "char \(**" "s1" ", \(**" "s2" ;
.BR int " n" ;
.PP
.BR "int strcmp (" "s1, s2" )
.BR "char \(**" "s1" ", \(**" s2 ;
.PP
.BR "int strncmp (" "s1, s2, n" )
.BR "char \(**" "s1" ", \(**" s2 ;
.BR int " n" ;
.PP
.BR "char \(**strcpy (" "s1, s2" )
.BR "char \(**" "s1" ", \(**" s2 ;
.PP
.BR "char \(**strncpy (" "s1, s2, n" )
.BR "char \(**" "s1" ", \(**" s2 ;
.BR int " n" ;
.PP
.BR "int strlen (" s )
.BR "char \(**" s ;
.PP
.BR "char \(**strchr (" "s, c" )
.BR "char \(**" "s, c" ;
.PP
.BR "char \(**strrchr (" "s, c" )
.BR "char \(**" "s, c" ;
.PP
.BR "char \(**strpbrk (" "s1, s2" )
.BR "char \(**" "s1" ", \(**" s2 ;
.PP
.BR "int strspn (" "s1, s2" )
.BR "char \(**" "s1" ", \(**" s2 ;
.PP
.BR "int strcspn (" "s1, s2" )
.BR "char \(**" "s1" ", \(**" s2 ;
.PP
.BR "char \(**strtok (" "s1, s2" )
.BR "char \(**" "s1" ", \(**" s2 ;
.SH DESCRIPTION
The arguments
.IR s1 , " s2" ,
and
.I s\^
point to strings (arrays of characters terminated by a
null character).
The functions
.IR strcat ,
.IR strncat ,
.IR strcpy ,
and
.I strncpy\^
all alter
.IR s1 .
These functions do not check for overflow of
the array pointed to by
.IR s1 .
.PP
.I Strcat\^
appends a copy of string
.I s2\^
to the end of string
.IR s1 .
.I Strncat\^
appends at most
.I n\^
characters.
Each function returns a pointer to the null-terminated result.
.PP
.I Strcmp\^
performs a lexicographical comparison of its
arguments and returns an integer
less than, equal to, or greater than 0,
when
.I s1\^
is less than, equal to, or
greater than
.IR s2 ", respectively."
.I Strncmp\^
makes the same comparison but looks at a maximum of
.I n\^
characters.
.PP
.I Strcpy\^
copies string
.I s2\^
to string
.IR s1 ,
stopping after the null character has been copied.
.I Strncpy\^
copies exactly
.I n\^
characters,
truncating
.I s2\^
or adding
null characters to 
.I s1\^
if necessary.
The result is not null-terminated if the length
of
.I s2\^
is
.I n\^
or more.
Each function returns
.IR s1 .
.PP
.I Strlen\^
returns the number of characters in
.IR s ,
not including the terminating null character.
.PP
.I Strchr\^
.RI ( strrchr )
returns a pointer to the first (last)
occurrence of character 
.I c\^
in string
.IR s ,
or a
.SM NULL
pointer if
.I c\^
does not occur in the string.
The null character terminating a string is considered to
be part of the string.
.PP
.I Strpbrk\^
returns a pointer to the first occurrence in string
.I s1\^
of any character from string
.IR s2 ,
or a
.SM NULL
pointer if no character from
.I s2\^
exists in
.IR s1 .
.PP
.I Strspn\^
.RI ( strcspn )
returns the length of the initial segment of string
.I s1\^
which consists entirely of characters from (not from) string
.IR s2 .
.PP
.I Strtok\^
considers the string
.I s1\^
to consist of a sequence of zero or more text tokens separated
by spans of one or more characters from the separator string
.IR s2 .
The first call (with pointer
.I s1\^
specified) returns a pointer to the first character of the first
token, and writes a
null character into
.I s1\^
immediately following the returned token. The function
keeps track of its position in the string
between separate calls, so that on subsequent calls
(which must be made with
a
.SM NULL
pointer as
the first argument)
it works through the string
.I s1\^
immediately following that token.
This can be continued 
until no tokens remain.
The separator string
.I s2\^
may be different from call to call.
When no token remains in
.IR s1 ,
a
.SM NULL
pointer is returned.
.SH NOTE
For user convenience, all these functions are declared in the optional
.B <string.h>
header file.
.SH BUGS
.I Strcmp\^
and
.I strncmp\^
use native character comparison, which is signed
on
.SM PDP\*S-11s,
unsigned on other machines.
.PP
Character movement is performed differently in
different implementations;
therefore, overlapping moves may yield unexpected results.
.\"	@(#)string.3c	1.6	
